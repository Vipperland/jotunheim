<?php

// Generated by Haxe 3.4.7
class jotun_db_Limit {
	public function __construct(){}
	static $ONE = "1";
	static function MAX($i = null) {
		if($i === null) {
			$i = 1;
		}
		$int = $i;
		$tmp = null;
		if($int < 0) {
			$tmp = 4294967296.0 + $int;
		} else {
			$tmp = $int + 0.0;
		}
		return Std::string($tmp);
	}
	static function PAGE($i, $len = null) {
		if($len === null) {
			$len = 10;
		}
		$int = $len;
		$tmp = null;
		if($int < 0) {
			$tmp = 4294967296.0 + $int;
		} else {
			$tmp = $int + 0.0;
		}
		$tmp1 = Std::string($tmp) . " offset ";
		$int1 = $i * $len;
		$tmp2 = null;
		if($int1 < 0) {
			$tmp2 = 4294967296.0 + $int1;
		} else {
			$tmp2 = $int1 + 0.0;
		}
		return _hx_string_or_null($tmp1) . Std::string($tmp2);
	}
	static function SECTION($from, $to) {
		$from = _hx_shift_right($from, 0);
		$to = _hx_shift_right($to, 0);
		$int = $to - $from;
		$tmp = null;
		if($int < 0) {
			$tmp = 4294967296.0 + $int;
		} else {
			$tmp = $int + 0.0;
		}
		$tmp1 = Std::string($tmp) . " offset ";
		$int1 = $from;
		$tmp2 = null;
		if($int1 < 0) {
			$tmp2 = 4294967296.0 + $int1;
		} else {
			$tmp2 = $int1 + 0.0;
		}
		return _hx_string_or_null($tmp1) . Std::string($tmp2);
	}
	function __toString() { return 'jotun.db.Limit'; }
}
