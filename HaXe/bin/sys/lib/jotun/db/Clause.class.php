<?php

// Generated by Haxe 3.4.7
class jotun_db_Clause {
	public function __construct($conditions, $joiner) {
		if(!php_Boot::$skip_constructor) {
		$this->_joiner = $joiner;
		$this->conditions = $conditions;
	}}
	public $_joiner;
	public $conditions;
	public function joiner() {
		return $this->_joiner;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $_IDX = 0;
	static function hOR($conditions) {
		return new jotun_db_Clause($conditions, " || ");
	}
	static function hAND($conditions) {
		return new jotun_db_Clause($conditions, " && ");
	}
	static function LIKE($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}} LIKE ?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function NOT_LIKE($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}} NOT LIKE ?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function ID($value) {
		return _hx_anonymous(array("param" => "id", "condition" => "{{p}}=?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function EQUAL($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}}=?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function DIFFERENT($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}}!=?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function IS_NULL($param) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}} IS NULL", "value" => null, "i" => jotun_db_Clause::$_IDX++, "skip" => true));
	}
	static function NOT_NULL($param) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}} != NULL", "value" => null, "i" => jotun_db_Clause::$_IDX++, "skip" => true));
	}
	static function IN($param, $values) {
		if(Std::is($values, _hx_qtype("Array"))) {
			$q = (new _hx_array(array()));
			jotun_utils_Dice::All($values, array(new _hx_lambda(array(&$q), "jotun_db_Clause_0"), 'execute'), null);
			$tmp = "{{p}} IN (" . _hx_string_or_null($q->join(",")) . ")";
			return _hx_anonymous(array("param" => $param, "condition" => $tmp, "value" => $values, "i" => jotun_db_Clause::$_IDX++));
		} else {
			return _hx_anonymous(array("param" => $param, "condition" => "{{p}} IN (?)", "value" => $values, "i" => jotun_db_Clause::$_IDX++));
		}
	}
	static function NOT_IN($param, $values) {
		if(Std::is($values, _hx_qtype("Array"))) {
			$q = (new _hx_array(array()));
			jotun_utils_Dice::All($values, array(new _hx_lambda(array(&$q), "jotun_db_Clause_1"), 'execute'), null);
			$tmp = "{{p}} NOT IN (" . _hx_string_or_null($q->join(",")) . ")";
			return _hx_anonymous(array("param" => $param, "condition" => $tmp, "value" => $values, "i" => jotun_db_Clause::$_IDX++));
		} else {
			return _hx_anonymous(array("param" => $param, "condition" => "{{p}} NOT IN (?)", "value" => $values, "i" => jotun_db_Clause::$_IDX++));
		}
	}
	static function REGEXP($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}} REGEXP ?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function TRUE($param) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}}=?", "value" => true, "i" => jotun_db_Clause::$_IDX++));
	}
	static function FALSE($param) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}}=?", "value" => false, "i" => jotun_db_Clause::$_IDX++));
	}
	static function DIFF($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}}!=?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function LESS($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}}<?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function LESS_OR($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}}<=?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function GREATER($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}}>?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function GREATER_OR($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}}>=?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function IN_RANGE($param, $from, $to) {
		$tmp = jotun_db_Clause::GREATER($param, $from);
		return jotun_db_Clause::hAND((new _hx_array(array($tmp, jotun_db_Clause::LESS($param, $to)))));
	}
	static function OUT_RANGE($param, $from, $to) {
		$tmp = jotun_db_Clause::LESS($param, $from);
		return jotun_db_Clause::hOR((new _hx_array(array($tmp, jotun_db_Clause::GREATER($param, $to)))));
	}
	static function FLAGS($param, $flags, $any = null) {
		if($any === null) {
			$any = false;
		}
		$a = (new _hx_array(array()));
		jotun_utils_Dice::Values($flags, array(new _hx_lambda(array(&$a, &$param), "jotun_db_Clause_2"), 'execute'), null);
		if($any) {
			return jotun_db_Clause::hOR($a);
		} else {
			return jotun_db_Clause::hAND($a);
		}
	}
	static function BIT($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "{{p}} & ?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	static function BIT_NOT($param, $value) {
		return _hx_anonymous(array("param" => $param, "condition" => "~{{p}} & ?", "value" => $value, "i" => jotun_db_Clause::$_IDX++));
	}
	function __toString() { return 'jotun.db.Clause'; }
}
function jotun_db_Clause_0(&$q, $p, $v) {
	{
		$q[$q->length] = "?";
	}
}
function jotun_db_Clause_1(&$q, $p, $v) {
	{
		$q[$q->length] = "?";
	}
}
function jotun_db_Clause_2(&$a, &$param, $v) {
	{
		$a1 = $a->length;
		$tmp = jotun_db_Clause::BIT($param, $v);
		$a[$a1] = $tmp;
	}
}
