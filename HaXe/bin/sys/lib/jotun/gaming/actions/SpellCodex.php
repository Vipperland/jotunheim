<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\gaming\actions;

use \php\Boot;

/**
 * ...
 * @author Rim Project
 */
class SpellCodex {
	/**
	 * @var bool
	 */
	static public $_debug;
	/**
	 * @var \Closure
	 */
	static public $_rAction;
	/**
	 * @var \Closure
	 */
	static public $_rRequirement;
	/**
	 * @var \Closure
	 */
	static public $_wAction;
	/**
	 * @var \Closure
	 */
	static public $_wRequirement;

	/**
	 * @var SpellCasting[]|\Array_hx
	 */
	public $_chain;
	/**
	 * @var int
	 */
	public $_position;
	/**
	 * @var mixed
	 */
	public $index;

	/**
	 * @param \Closure $saveAction
	 * @param \Closure $loadAction
	 * @param \Closure $saveRequirement
	 * @param \Closure $loadRequirement
	 * 
	 * @return void
	 */
	public static function cacheController ($saveAction, $loadAction, $saveRequirement, $loadRequirement) {
		#src/jotun/gaming/actions/SpellCodex.hx:32: characters 3-24
		SpellCodex::$_wAction = $saveAction;
		#src/jotun/gaming/actions/SpellCodex.hx:33: characters 3-24
		SpellCodex::$_rAction = $loadAction;
		#src/jotun/gaming/actions/SpellCodex.hx:34: characters 3-34
		SpellCodex::$_wRequirement = $saveRequirement;
		#src/jotun/gaming/actions/SpellCodex.hx:35: characters 3-34
		SpellCodex::$_rRequirement = $loadRequirement;
	}

	/**
	 * @param string $name
	 * @param mixed $data
	 * @param IDataProvider $provider
	 * @param SpellCodex $controller
	 * 
	 * @return SpellCasting
	 */
	public static function createContext ($name, $data, $provider, $controller) {
		#src/jotun/gaming/actions/SpellCodex.hx:28: characters 3-68
		return new SpellCasting($name, $data, $provider, $controller, SpellCodex::$_debug);
	}

	/**
	 * @param string $id
	 * 
	 * @return Action
	 */
	public static function loadAction ($id) {
		#src/jotun/gaming/actions/SpellCodex.hx:39: characters 10-59
		if (SpellCodex::$_rAction !== null) {
			#src/jotun/gaming/actions/SpellCodex.hx:39: characters 29-41
			return (SpellCodex::$_rAction)($id);
		} else {
			#src/jotun/gaming/actions/SpellCodex.hx:39: characters 44-59
			return Action::load($id);
		}
	}

	/**
	 * @param string $id
	 * 
	 * @return Requirement
	 */
	public static function loadRequirement ($id) {
		#src/jotun/gaming/actions/SpellCodex.hx:51: characters 10-74
		if (SpellCodex::$_rRequirement !== null) {
			#src/jotun/gaming/actions/SpellCodex.hx:51: characters 34-51
			return (SpellCodex::$_rRequirement)($id);
		} else {
			#src/jotun/gaming/actions/SpellCodex.hx:51: characters 54-74
			return Requirement::load($id);
		}
	}

	/**
	 * @param Action $a
	 * 
	 * @return void
	 */
	public static function saveAction ($a) {
		#src/jotun/gaming/actions/SpellCodex.hx:43: lines 43-47
		if (SpellCodex::$_wAction !== null) {
			#src/jotun/gaming/actions/SpellCodex.hx:44: characters 4-15
			(SpellCodex::$_wAction)($a);
		} else {
			#src/jotun/gaming/actions/SpellCodex.hx:46: characters 4-18
			Action::save($a);
		}
	}

	/**
	 * @param Requirement $r
	 * 
	 * @return void
	 */
	public static function saveRequirement ($r) {
		#src/jotun/gaming/actions/SpellCodex.hx:55: lines 55-59
		if (SpellCodex::$_wRequirement !== null) {
			#src/jotun/gaming/actions/SpellCodex.hx:56: characters 4-20
			(SpellCodex::$_wRequirement)($r);
		} else {
			#src/jotun/gaming/actions/SpellCodex.hx:58: characters 4-23
			Requirement::save($r);
		}
	}

	/**
	 * @param mixed $data
	 * @param bool $debug
	 * @param \Closure $validate
	 * @param string[]|\Array_hx $priority
	 * 
	 * @return void
	 */
	public function __construct ($data, $debug = null, $validate = null, $priority = null) {
		#src/jotun/gaming/actions/SpellCodex.hx:81: characters 43-45
		$this->_chain = new \Array_hx();
		#src/jotun/gaming/actions/SpellCodex.hx:79: characters 30-31
		$this->_position = 0;
		#src/jotun/gaming/actions/SpellCodex.hx:71: characters 3-25
		SpellCodex::$_debug = $debug === true;
		#src/jotun/gaming/actions/SpellCodex.hx:72: characters 3-53
		$this->index = SpellGroup::patch($data, $validate, $priority);
	}

	/**
	 * @param SpellCasting $context
	 * 
	 * @return void
	 */
	public function _onCallAfter ($context) {
	}

	/**
	 * @param SpellCasting $context
	 * 
	 * @return void
	 */
	public function _onCallBefore ($context) {
	}

	/**
	 * @param SpellCasting[]|\Array_hx $chain
	 * 
	 * @return void
	 */
	public function _onChainEnd ($chain) {
	}

	/**
	 * @param string $name
	 * @param mixed $data
	 * @param IDataProvider $provider
	 * 
	 * @return bool
	 */
	public function invoke ($name, $data = null, $provider = null) {
		#src/jotun/gaming/actions/SpellCodex.hx:84: characters 3-72
		$context = SpellCodex::createContext($name, $data, $provider, $this);
		#src/jotun/gaming/actions/SpellCodex.hx:85: lines 85-109
		if (\Reflect::hasField($this->index, $name)) {
			#src/jotun/gaming/actions/SpellCodex.hx:86: characters 4-29
			$context->chain = $this->_position;
			#src/jotun/gaming/actions/SpellCodex.hx:87: characters 4-35
			$this->_chain->offsetSet($this->_chain->length, $context);
			#src/jotun/gaming/actions/SpellCodex.hx:88: lines 88-90
			if ($this->_position > 0) {
				#src/jotun/gaming/actions/SpellCodex.hx:89: characters 5-41
				$context->parent = ($this->_chain->arr[$this->_position - 1] ?? null);
			}
			#src/jotun/gaming/actions/SpellCodex.hx:91: characters 4-15
			++$this->_position;
			#src/jotun/gaming/actions/SpellCodex.hx:92: characters 4-26
			$this->_onCallBefore($context);
			#src/jotun/gaming/actions/SpellCodex.hx:93: characters 4-47
			\Reflect::field($this->index, $name)->execute($context);
			#src/jotun/gaming/actions/SpellCodex.hx:94: characters 4-15
			--$this->_position;
			#src/jotun/gaming/actions/SpellCodex.hx:95: characters 4-25
			$this->_onCallAfter($context);
			#src/jotun/gaming/actions/SpellCodex.hx:96: lines 96-100
			if ($this->_position === 0) {
				#src/jotun/gaming/actions/SpellCodex.hx:97: characters 5-25
				$context->ended = true;
				#src/jotun/gaming/actions/SpellCodex.hx:98: characters 5-24
				$this->_onChainEnd($this->_chain);
				#src/jotun/gaming/actions/SpellCodex.hx:99: characters 5-16
				$this->_chain = new \Array_hx();
			}
			#src/jotun/gaming/actions/SpellCodex.hx:101: characters 4-15
			return true;
		} else {
			#src/jotun/gaming/actions/SpellCodex.hx:103: lines 103-107
			if (SpellCodex::$_debug) {
				#src/jotun/gaming/actions/SpellCodex.hx:104: characters 5-27
				$this->_onCallBefore($context);
				#src/jotun/gaming/actions/SpellCodex.hx:105: characters 5-112
				$context->addLog(0, "â‰ˆ EVENT " . ($name??'null') . " [!] Not Found on " . (\Type::getClassName(\Type::getClass($this))??'null') . ". ");
				#src/jotun/gaming/actions/SpellCodex.hx:106: characters 5-26
				$this->_onCallAfter($context);
			}
			#src/jotun/gaming/actions/SpellCodex.hx:108: characters 4-16
			return false;
		}
	}

	/**
	 * @param bool $mode
	 * 
	 * @return void
	 */
	public function setDebug ($mode) {
		#src/jotun/gaming/actions/SpellCodex.hx:76: characters 3-16
		SpellCodex::$_debug = $mode;
	}
}

Boot::registerClass(SpellCodex::class, 'jotun.gaming.actions.SpellCodex');
