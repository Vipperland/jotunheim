<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\gaming\actions;

use \php\Boot;
use \jotun\tools\Utils;

/**
 * ...
 * @author Rim Project
 */
class Resolution {
	/**
	 * @var string
	 */
	const BREAK_ALWAYS = "always";
	/**
	 * @var string
	 */
	const BREAK_NEVER = "never";

	/**
	 * @var bool
	 */
	public $_stopped;
	/**
	 * @var string
	 */
	public $_type;
	/**
	 * @var mixed
	 */
	public $breakon;
	/**
	 * @var SpellGroup
	 */
	public $fail;
	/**
	 * @var string
	 */
	public $id;
	/**
	 * @var string[]|\Array_hx
	 */
	public $query;
	/**
	 * @var bool
	 */
	public $reverse;
	/**
	 * @var SpellGroup
	 */
	public $then;

	/**
	 * @param string $type
	 * @param mixed $data
	 * @param string $param
	 * 
	 * @return void
	 */
	public function __construct ($type, $data, $param) {
		#src/jotun/gaming/actions/Resolution.hx:34: characters 3-15
		$this->_type = $type;
		#src/jotun/gaming/actions/Resolution.hx:35: characters 3-40
		$this->reverse = Utils::boolean(Boot::dynamicField($data, 'reverse'));
		#src/jotun/gaming/actions/Resolution.hx:36: characters 3-25
		$this->breakon = Boot::dynamicField($data, 'breakon');
		#src/jotun/gaming/actions/Resolution.hx:37: lines 37-46
		if (\Reflect::hasField($data, $param)) {
			#src/jotun/gaming/actions/Resolution.hx:38: characters 4-50
			$qset = \Reflect::field($data, $param);
			#src/jotun/gaming/actions/Resolution.hx:39: characters 4-36
			\Reflect::deleteField($data, $param);
			#src/jotun/gaming/actions/Resolution.hx:40: lines 40-45
			if (($qset instanceof \Array_hx)) {
				#src/jotun/gaming/actions/Resolution.hx:41: characters 5-17
				$this->query = $qset;
				#src/jotun/gaming/actions/Resolution.hx:42: characters 5-29
				$_this = $this->query;
				$_this->length = \array_unshift($_this->arr, "@result");
			} else if (Utils::isValid($qset)) {
				#src/jotun/gaming/actions/Resolution.hx:44: characters 5-30
				$this->query = \Array_hx::wrap([
					"@result",
					$qset,
				]);
			}
		}
		#src/jotun/gaming/actions/Resolution.hx:47: lines 47-49
		if (Boot::dynamicField($data, 'then') !== null) {
			#src/jotun/gaming/actions/Resolution.hx:48: characters 4-53
			$this->then = new SpellGroup(($this->_type??'null') . ":then", Boot::dynamicField($data, 'then'));
		}
		#src/jotun/gaming/actions/Resolution.hx:50: lines 50-52
		if (Boot::dynamicField($data, 'fail') !== null) {
			#src/jotun/gaming/actions/Resolution.hx:51: characters 4-53
			$this->fail = new SpellGroup(($this->_type??'null') . ":fail", Boot::dynamicField($data, 'fail'));
		}
		#src/jotun/gaming/actions/Resolution.hx:53: characters 3-15
		$this->id = Boot::dynamicField($data, 'id');
	}

	/**
	 * Reset the state to connected
	 * 
	 * @return void
	 */
	public function connect () {
		#src/jotun/gaming/actions/Resolution.hx:99: characters 3-19
		$this->_stopped = false;
	}

	/**
	 * A disconnected element will stop any propagation in the same context
	 * The user can create a proxy to stop and work with the current context flow and then connect() in any other context
	 * 
	 * @return void
	 */
	public function disconnect () {
		#src/jotun/gaming/actions/Resolution.hx:107: characters 3-18
		$this->_stopped = true;
	}

	/**
	 * @return int
	 */
	public function length () {
		#src/jotun/gaming/actions/Resolution.hx:111: characters 10-46
		if ($this->query !== null) {
			#src/jotun/gaming/actions/Resolution.hx:111: characters 26-42
			return $this->query->length - 1;
		} else {
			#src/jotun/gaming/actions/Resolution.hx:111: characters 45-46
			return 0;
		}
	}

	/**
	 * Manual trigger to release the element to a new context
	 * @param	result
	 * @param	context
	 * 
	 * @param bool $result
	 * @param SpellCasting $context
	 * 
	 * @return void
	 */
	public function release ($result, $context) {
		#src/jotun/gaming/actions/Resolution.hx:89: lines 89-92
		if ($this->_stopped) {
			#src/jotun/gaming/actions/Resolution.hx:90: characters 4-20
			$this->_stopped = false;
			#src/jotun/gaming/actions/Resolution.hx:91: characters 4-33
			$context->release($this, $result);
		}
	}

	/**
	 * @param bool $result
	 * @param SpellCasting $context
	 * 
	 * @return bool
	 */
	public function resolve ($result, $context) {
		#src/jotun/gaming/actions/Resolution.hx:57: lines 57-69
		if (!$this->_stopped) {
			#src/jotun/gaming/actions/Resolution.hx:58: characters 4-19
			++$context->ident;
			#src/jotun/gaming/actions/Resolution.hx:59: lines 59-67
			if ($result) {
				#src/jotun/gaming/actions/Resolution.hx:60: lines 60-62
				if ($this->then !== null) {
					#src/jotun/gaming/actions/Resolution.hx:61: characters 6-27
					$this->then->execute($context);
				}
			} else if ($this->fail !== null) {
				#src/jotun/gaming/actions/Resolution.hx:65: characters 6-27
				$this->fail->execute($context);
			}
			#src/jotun/gaming/actions/Resolution.hx:68: characters 4-19
			--$context->ident;
		}
		#src/jotun/gaming/actions/Resolution.hx:70: characters 10-36
		if ($this->reverse) {
			#src/jotun/gaming/actions/Resolution.hx:70: characters 20-27
			return !$result;
		} else {
			#src/jotun/gaming/actions/Resolution.hx:70: characters 30-36
			return $result;
		}
	}

	/**
	 * @param bool $result
	 * 
	 * @return bool
	 */
	public function willBreakOn ($result) {
		#src/jotun/gaming/actions/Resolution.hx:74: lines 74-76
		if ($this->_stopped || ($this->breakon === "always")) {
			#src/jotun/gaming/actions/Resolution.hx:75: characters 4-15
			return true;
		}
		#src/jotun/gaming/actions/Resolution.hx:77: lines 77-79
		if ($this->breakon === "never") {
			#src/jotun/gaming/actions/Resolution.hx:78: characters 4-16
			return false;
		}
		#src/jotun/gaming/actions/Resolution.hx:80: characters 10-58
		if ($this->breakon !== $result) {
			#src/jotun/gaming/actions/Resolution.hx:80: characters 31-58
			if ($result) {
				#src/jotun/gaming/actions/Resolution.hx:80: characters 42-57
				return $this->breakon === null;
			} else {
				#src/jotun/gaming/actions/Resolution.hx:80: characters 31-58
				return false;
			}
		} else {
			#src/jotun/gaming/actions/Resolution.hx:80: characters 10-58
			return true;
		}
	}
}

Boot::registerClass(Resolution::class, 'jotun.gaming.actions.Resolution');
