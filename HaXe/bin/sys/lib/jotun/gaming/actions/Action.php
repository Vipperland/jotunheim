<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\gaming\actions;

use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\tools\Utils;
use \jotun\utils\Dice;

/**
 * ...
 * @author Rim Project
 */
class Action extends Resolution {
	/**
	 * @var mixed
	 */
	static public $cache;
	/**
	 * @var ActionQueryGroup
	 */
	static public $codex;

	/**
	 * @var Requirement[]|\Array_hx
	 */
	public $require;
	/**
	 * @var int
	 */
	public $target;

	/**
	 * @param Action $evt
	 * @param SpellCasting $context
	 * @param bool $success
	 * @param int $score
	 * @param int $position
	 * 
	 * @return void
	 */
	public static function _log ($evt, $context, $success, $score, $position) {
		#src/jotun/gaming/actions/Action.hx:119: characters 76-118
		$tmp = ($evt->willBreakOn($success) ? "[x]" : "[>]");
		#src/jotun/gaming/actions/Action.hx:119: characters 127-177
		$tmp1 = (Utils::isValid($evt->id) ? "#{" . ($evt->id??'null') . "} " : "");
		#src/jotun/gaming/actions/Action.hx:119: characters 3-298
		$context->addLog(0, "â†‘ " . ((($success ? "SUCCESS" : "FAILED"))??'null') . " ACTION " . ($tmp??'null') . " " . ($tmp1??'null') . "[" . ($position??'null') . "] " . ((($evt->target !== 0 ? "score:" . ($score??'null') . "/" . ($evt->target??'null') . " " : ""))??'null') . "queries:" . ($evt->length()??'null'));
	}

	/**
	 * @param string $id
	 * @param mixed[]|\Array_hx $queries
	 * @param mixed $breakon
	 * 
	 * @return mixed
	 */
	public static function createFromQueries ($id, $queries, $breakon = null) {
		#src/jotun/gaming/actions/Action.hx:23: characters 3-51
		return new HxAnon([
			"id" => $id,
			"@" => $queries,
			"breakon" => $breakon,
		]);
	}

	/**
	 * @param string $id
	 * 
	 * @return Action
	 */
	public static function load ($id) {
		#src/jotun/gaming/actions/Action.hx:31: characters 10-23
		return \Reflect::field(Action::$cache, $id);
	}

	/**
	 * @param Action $action
	 * 
	 * @return void
	 */
	public static function save ($action) {
		#src/jotun/gaming/actions/Action.hx:27: characters 3-31
		\Reflect::setField(Action::$cache, $action->id, $action);
	}

	/**
	 * Parse action from object data
	 *
	 * 	// Object definition
	 * {
	 * "id": STRING	 					// same id will replace previous
	 * "require" : STRING | ARRAY			// List of requirements for action to run
	 * "target" : INT						// Each succesful required will add +1 to score, failed requirements will result in -1, action only will run if score >= target
	 * "reverse" : BOOL					// Reverse axction result
	 * "breakon" : NULL | BOOL | STRING		// Check if next action in chain will be executed ("always" and "never" are valid values for string)
	 * "then" : ARRAY						// Actions to execute if SUCCESS state (will ignore reverse state)
	 * "fail" : ARRAY						// Actions to execute if FAILED state (will ignore reverse state)
	 * "*" : STRING | ARRAY				// Queries to execute if SUCCESS (before then and fail, ignore reverse state)
	 * }
	 *
	 * @param	type
	 * @param	data
	 * 
	 * @param string $type
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($type, $data) {
		#src/jotun/gaming/actions/Action.hx:56: lines 56-87
		$_gthis = $this;
		#src/jotun/gaming/actions/Action.hx:57: characters 3-25
		parent::__construct($type, $data, "@");
		#src/jotun/gaming/actions/Action.hx:59: characters 3-15
		$this->require = new \Array_hx();
		#src/jotun/gaming/actions/Action.hx:60: characters 3-17
		$i = 0;
		#src/jotun/gaming/actions/Action.hx:61: lines 61-73
		Dice::All(Boot::dynamicField($data, 'require'), function ($p, $v) use (&$i, &$_gthis, &$type) {
			#src/jotun/gaming/actions/Action.hx:62: lines 62-64
			if (is_string($v)) {
				#src/jotun/gaming/actions/Action.hx:63: characters 5-38
				$v = SpellCodex::loadRequirement($v);
			}
			#src/jotun/gaming/actions/Action.hx:65: lines 65-72
			if ($v !== null) {
				#src/jotun/gaming/actions/Action.hx:66: lines 66-70
				if (($v instanceof Requirement)) {
					#src/jotun/gaming/actions/Action.hx:67: characters 6-25
					$_gthis->require->offsetSet($i, $v);
				} else {
					#src/jotun/gaming/actions/Action.hx:69: characters 6-59
					$_gthis->require->offsetSet($i, new Requirement(($type??'null') . "[" . \Std::string($p) . "]", $v));
				}
				#src/jotun/gaming/actions/Action.hx:71: characters 5-8
				$i += 1;
			}
		});
		#src/jotun/gaming/actions/Action.hx:75: lines 75-79
		if ($this->target === null) {
			#src/jotun/gaming/actions/Action.hx:76: characters 4-27
			$this->target = $this->require->length;
		} else {
			#src/jotun/gaming/actions/Action.hx:78: characters 4-33
			$this->target = (int)(Boot::dynamicField($data, 'target'));
		}
		#src/jotun/gaming/actions/Action.hx:81: lines 81-83
		if ($this->breakon === null) {
			#src/jotun/gaming/actions/Action.hx:82: characters 4-30
			$this->breakon = Boot::dynamicField($data, 'require') > 0;
		}
		#src/jotun/gaming/actions/Action.hx:84: lines 84-86
		if (Utils::isValid(Boot::dynamicField($data, 'id'))) {
			#src/jotun/gaming/actions/Action.hx:85: characters 4-31
			SpellCodex::saveAction($this);
		}
	}

	/**
	 * @param SpellCasting $context
	 * @param int $position
	 * 
	 * @return bool
	 */
	public function invoke ($context, $position) {
		#src/jotun/gaming/actions/Action.hx:90: characters 3-12
		$this->connect();
		#src/jotun/gaming/actions/Action.hx:92: characters 3-26
		$resolution = 0;
		#src/jotun/gaming/actions/Action.hx:93: characters 3-18
		++$context->ident;
		#src/jotun/gaming/actions/Action.hx:94: lines 94-102
		Dice::All($this->require, function ($p, $r) use (&$context, &$resolution) {
			#src/jotun/gaming/actions/Action.hx:95: characters 4-43
			$result = $r->verify($context, $p);
			#src/jotun/gaming/actions/Action.hx:96: lines 96-100
			if ($result) {
				#src/jotun/gaming/actions/Action.hx:97: characters 5-17
				$resolution += 1;
			} else {
				#src/jotun/gaming/actions/Action.hx:99: characters 5-17
				$resolution -= 1;
			}
			#src/jotun/gaming/actions/Action.hx:101: characters 4-32
			return $r->willBreakOn($result);
		});
		#src/jotun/gaming/actions/Action.hx:103: characters 3-18
		--$context->ident;
		#src/jotun/gaming/actions/Action.hx:105: characters 3-116
		$success = ($this->target === 0) || (($this->target > 0) && ($resolution >= $this->target)) || (($this->target < 0) && ($resolution <= $this->target));
		#src/jotun/gaming/actions/Action.hx:106: lines 106-108
		if ($context->debug) {
			#src/jotun/gaming/actions/Action.hx:107: characters 4-54
			Action::_log($this, $context, $success, $resolution, $position);
		}
		#src/jotun/gaming/actions/Action.hx:109: lines 109-114
		if ($success) {
			#src/jotun/gaming/actions/Action.hx:110: characters 4-32
			$context->registerAction($this);
			#src/jotun/gaming/actions/Action.hx:111: lines 111-113
			if (Utils::isValid($this->query)) {
				#src/jotun/gaming/actions/Action.hx:112: characters 5-37
				Action::$codex->invocation($this->query, $context);
			}
		}
		#src/jotun/gaming/actions/Action.hx:115: characters 3-35
		return $this->resolve($success, $context);
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$cache = new HxAnon();
		self::$codex = new ActionQueryGroup();
	}
}

Boot::registerClass(Action::class, 'jotun.gaming.actions.Action');
Action::__hx__init();
