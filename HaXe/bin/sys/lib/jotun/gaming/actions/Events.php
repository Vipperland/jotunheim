<?php
/**
 * Generated by Haxe 4.3.4
 */

namespace jotun\gaming\actions;

use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\utils\Dice;

/**
 * ...
 * @author Rim Project
 */
class Events {
	/**
	 * @var EventContext
	 */
	public $_context;
	/**
	 * @var int
	 */
	public $_cursor_pos;
	/**
	 * @var Action[]|\Array_hx
	 */
	public $_data;
	/**
	 * @var bool
	 */
	public $_is_waiting;
	/**
	 * @var \Closure
	 */
	public $_load;
	/**
	 * @var \Closure
	 */
	public $_save;
	/**
	 * @var string
	 */
	public $_type;

	/**
	 * @param Events $evt
	 * @param EventContext $context
	 * 
	 * @return void
	 */
	public static function _log ($evt, $context) {
		#src/jotun/gaming/actions/Events.hx:132: characters 3-32
		$a = $evt->_data->length;
		#src/jotun/gaming/actions/Events.hx:133: characters 3-142
		$context->addLog(0, ((($context->chain > 0 ? "└ " : ""))??'null') . "≈ EVENT " . ((($a === 0 ? "" : "CHAIN "))??'null') . ($evt->_type??'null') . ((($a === 0 ? " [!] Empty" : " @" . ($a??'null')))??'null'));
		#src/jotun/gaming/actions/Events.hx:134: lines 134-136
		if (($context->chain > 0) && ($context->parent->action !== null)) {
			#src/jotun/gaming/actions/Events.hx:135: characters 4-73
			$context->addLog(1, "├ ACTION \"" . ($context->parent->action->query??'null') . "\"");
		}
	}

	/**
	 * @param mixed $data
	 * @param \Closure $validate
	 * 
	 * @return mixed
	 */
	public static function patch ($data, $validate = null) {
		#src/jotun/gaming/actions/Events.hx:19: characters 3-43
		$patched = new HxAnon();
		#src/jotun/gaming/actions/Events.hx:20: lines 20-32
		if ($data !== null) {
			#src/jotun/gaming/actions/Events.hx:21: lines 21-31
			Dice::All($data, function ($p, $v) use (&$validate, &$patched) {
				#src/jotun/gaming/actions/Events.hx:22: characters 9-48
				if ($validate !== null) {
					#src/jotun/gaming/actions/Events.hx:22: characters 33-47
					$p = $validate($p, $v);
				}
				#src/jotun/gaming/actions/Events.hx:23: lines 23-29
				if (($p !== null) && ($p !== "")) {
					#src/jotun/gaming/actions/Events.hx:24: lines 24-28
					if (!($v instanceof Events)) {
						#src/jotun/gaming/actions/Events.hx:25: characters 7-39
						$value = new Events($p, $v);
						\Reflect::setField($patched, $p, $value);
					} else {
						#src/jotun/gaming/actions/Events.hx:27: characters 7-24
						$value = $v;
						\Reflect::setField($patched, $p, $value);
					}
				}
			});
		}
		#src/jotun/gaming/actions/Events.hx:33: characters 3-17
		return $patched;
	}

	/**
	 * @param string $type
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return void
	 */
	public function __construct ($type, $data) {
		#src/jotun/gaming/actions/Events.hx:45: characters 3-15
		$this->_type = $type;
		#src/jotun/gaming/actions/Events.hx:46: characters 3-14
		$this->_init($data);
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return void
	 */
	public function _init ($data) {
		#src/jotun/gaming/actions/Events.hx:49: lines 49-69
		$_gthis = $this;
		#src/jotun/gaming/actions/Events.hx:50: characters 3-13
		$this->_data = new \Array_hx();
		#src/jotun/gaming/actions/Events.hx:51: characters 3-18
		$i = 0;
		#src/jotun/gaming/actions/Events.hx:52: characters 3-22
		$r = new HxAnon();
		#src/jotun/gaming/actions/Events.hx:53: lines 53-68
		Dice::All($data, function ($p, $v) use (&$i, &$r, &$_gthis) {
			#src/jotun/gaming/actions/Events.hx:54: lines 54-56
			if (is_string($v)) {
				#src/jotun/gaming/actions/Events.hx:55: characters 5-38
				$v = EventController::loadAction($v);
			}
			#src/jotun/gaming/actions/Events.hx:57: lines 57-67
			if (($v !== null) && ((Boot::dynamicField($v, 'id') === null) || !\Reflect::hasField($r, Boot::dynamicField($v, 'id')))) {
				#src/jotun/gaming/actions/Events.hx:58: lines 58-62
				if (($v instanceof Action)) {
					#src/jotun/gaming/actions/Events.hx:59: characters 6-18
					$_gthis->_data->offsetSet($i, $v);
				} else {
					#src/jotun/gaming/actions/Events.hx:61: characters 6-53
					$_gthis->_data->offsetSet($i, new Action(($_gthis->_type??'null') . "[" . ($p??'null') . "]", $v));
				}
				#src/jotun/gaming/actions/Events.hx:63: lines 63-65
				if (Boot::dynamicField($v, 'id') !== null) {
					#src/jotun/gaming/actions/Events.hx:64: characters 6-34
					\Reflect::setField($r, Boot::dynamicField($v, 'id'), 1);
				}
				#src/jotun/gaming/actions/Events.hx:66: characters 5-8
				$i += 1;
			}
		});
	}

	/**
	 * @return void
	 */
	public function _innerRun () {
		#src/jotun/gaming/actions/Events.hx:98: lines 98-121
		$_gthis = $this;
		#src/jotun/gaming/actions/Events.hx:99: characters 3-23
		$a = null;
		#src/jotun/gaming/actions/Events.hx:100: lines 100-110
		Dice::Count($this->_cursor_pos, $this->_data->length, function ($current, $max, $completed) use (&$_gthis, &$a) {
			#src/jotun/gaming/actions/Events.hx:101: characters 4-17
			++$_gthis->_cursor_pos;
			#src/jotun/gaming/actions/Events.hx:102: characters 4-32
			$_gthis->_context->registerEvent($_gthis);
			#src/jotun/gaming/actions/Events.hx:103: characters 4-22
			$a = ($_gthis->_data->arr[$current] ?? null);
			#src/jotun/gaming/actions/Events.hx:104: lines 104-109
			if ($a->willBreakOn($a->run($_gthis->_context, $current))) {
				#src/jotun/gaming/actions/Events.hx:105: characters 5-24
				$_gthis->_is_waiting = false;
				#src/jotun/gaming/actions/Events.hx:106: characters 5-16
				return true;
			} else {
				#src/jotun/gaming/actions/Events.hx:108: characters 5-23
				return $_gthis->_is_waiting;
			}
		});
		#src/jotun/gaming/actions/Events.hx:111: lines 111-120
		if (($this->_is_waiting === false) || ($this->_cursor_pos >= $this->_data->length)) {
			#src/jotun/gaming/actions/Events.hx:112: characters 4-20
			--$this->_context->ident;
			#src/jotun/gaming/actions/Events.hx:113: lines 113-118
			if ($this->_context->ident === 0) {
				#src/jotun/gaming/actions/Events.hx:114: lines 114-117
				if ($this->_context->debug) {
					#src/jotun/gaming/actions/Events.hx:115: characters 6-26
					Events::_log($this, $this->_context);
					#src/jotun/gaming/actions/Events.hx:116: characters 6-28
					$_this = $this->_context->log;
					$_this->arr = \array_reverse($_this->arr);
				}
			}
			#src/jotun/gaming/actions/Events.hx:119: characters 4-19
			$this->_context = null;
		}
	}

	/**
	 * @return string
	 */
	public function getType () {
		#src/jotun/gaming/actions/Events.hx:72: characters 3-15
		return $this->_type;
	}

	/**
	 * @param string $q
	 * 
	 * @return bool
	 */
	public function matchType ($q) {
		#src/jotun/gaming/actions/Events.hx:76: characters 3-20
		return $this->_type === $q;
	}

	/**
	 * @param EventContext $context
	 * 
	 * @return void
	 */
	public function run ($context) {
		#src/jotun/gaming/actions/Events.hx:124: characters 3-22
		$this->_is_waiting = false;
		#src/jotun/gaming/actions/Events.hx:125: characters 3-18
		$this->_cursor_pos = 0;
		#src/jotun/gaming/actions/Events.hx:126: characters 3-21
		$this->_context = $context;
		#src/jotun/gaming/actions/Events.hx:127: characters 3-18
		++$context->ident;
		#src/jotun/gaming/actions/Events.hx:128: characters 3-14
		$this->_innerRun();
	}
}

Boot::registerClass(Events::class, 'jotun.gaming.actions.Events');
