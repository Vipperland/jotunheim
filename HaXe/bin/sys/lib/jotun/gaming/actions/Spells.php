<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\gaming\actions;

use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\utils\Dice;

/**
 * ...
 * @author Rim Project
 */
class Spells {
	/**
	 * @var SpellCasting
	 */
	public $_context;
	/**
	 * @var int
	 */
	public $_cursor_pos;
	/**
	 * @var Action[]|\Array_hx
	 */
	public $_data;
	/**
	 * @var bool
	 */
	public $_is_waiting;
	/**
	 * @var \Closure
	 */
	public $_load;
	/**
	 * @var \Closure
	 */
	public $_save;
	/**
	 * @var string
	 */
	public $_type;

	/**
	 * @param Spells $evt
	 * @param SpellCasting $context
	 * 
	 * @return void
	 */
	public static function _log ($evt, $context) {
		#src/jotun/gaming/actions/Spells.hx:172: characters 3-32
		$a = $evt->_data->length;
		#src/jotun/gaming/actions/Spells.hx:173: characters 3-142
		$context->addLog(0, ((($context->chain > 0 ? "└ " : ""))??'null') . "≈ EVENT " . ((($a === 0 ? "" : "CHAIN "))??'null') . ($evt->_type??'null') . ((($a === 0 ? " [!] Empty" : " @" . ($a??'null')))??'null'));
		#src/jotun/gaming/actions/Spells.hx:174: lines 174-176
		if (($context->chain > 0) && ($context->parent->action !== null)) {
			#src/jotun/gaming/actions/Spells.hx:175: characters 4-73
			$context->addLog(1, "├ ACTION \"" . ($context->parent->action->query??'null') . "\"");
		}
	}

	/**
	 * Create a patch with events data
	 * @param	data			Object of names array of event chain
	 * @param	validate		Validate event name, control if events are valid or not
	 * @param	priority		Events to be patched first
	 * @return Array of fully patched events, actions and requirements
	 * 
	 * @param mixed $data
	 * @param \Closure $validate
	 * @param string[]|\Array_hx $priority
	 * 
	 * @return mixed
	 */
	public static function patch ($data, $validate = null, $priority = null) {
		#src/jotun/gaming/actions/Spells.hx:29: characters 3-43
		$patched = new HxAnon();
		#src/jotun/gaming/actions/Spells.hx:30: lines 30-54
		if ($data !== null) {
			#src/jotun/gaming/actions/Spells.hx:31: lines 31-43
			if ($priority !== null) {
				#src/jotun/gaming/actions/Spells.hx:32: lines 32-42
				Dice::Values($priority, function ($v) use (&$data, &$patched) {
					#src/jotun/gaming/actions/Spells.hx:33: lines 33-40
					if (\Reflect::hasField($data, $v)) {
						#src/jotun/gaming/actions/Spells.hx:34: characters 7-35
						$e = \Reflect::field($data, $v);
						#src/jotun/gaming/actions/Spells.hx:35: lines 35-39
						if (!($e instanceof Spells)) {
							#src/jotun/gaming/actions/Spells.hx:36: characters 8-40
							$value = new Spells($v, $e);
							\Reflect::setField($patched, $v, $value);
						} else {
							#src/jotun/gaming/actions/Spells.hx:38: characters 8-25
							$value = $e;
							\Reflect::setField($patched, $v, $value);
						}
					}
					#src/jotun/gaming/actions/Spells.hx:41: characters 6-34
					\Reflect::deleteField($data, $v);
				});
			}
			#src/jotun/gaming/actions/Spells.hx:44: lines 44-53
			Dice::All($data, function ($p, $v) use (&$validate, &$patched) {
				#src/jotun/gaming/actions/Spells.hx:45: characters 9-48
				if ($validate !== null) {
					#src/jotun/gaming/actions/Spells.hx:45: characters 33-47
					$p = $validate($p, $v);
				}
				#src/jotun/gaming/actions/Spells.hx:46: lines 46-52
				if (($p !== null) && ($p !== "")) {
					#src/jotun/gaming/actions/Spells.hx:47: lines 47-51
					if (!($v instanceof Spells)) {
						#src/jotun/gaming/actions/Spells.hx:48: characters 7-39
						$value = new Spells($p, $v);
						\Reflect::setField($patched, $p, $value);
					} else {
						#src/jotun/gaming/actions/Spells.hx:50: characters 7-24
						$value = $v;
						\Reflect::setField($patched, $p, $value);
					}
				}
			});
		}
		#src/jotun/gaming/actions/Spells.hx:55: characters 3-17
		return $patched;
	}

	/**
	 * @param string $type
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return void
	 */
	public function __construct ($type, $data) {
		#src/jotun/gaming/actions/Spells.hx:70: characters 3-15
		$this->_type = $type;
		#src/jotun/gaming/actions/Spells.hx:71: characters 3-14
		$this->_init($data);
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return void
	 */
	public function _init ($data) {
		#src/jotun/gaming/actions/Spells.hx:74: lines 74-94
		$_gthis = $this;
		#src/jotun/gaming/actions/Spells.hx:75: characters 3-13
		$this->_data = new \Array_hx();
		#src/jotun/gaming/actions/Spells.hx:76: characters 3-18
		$i = 0;
		#src/jotun/gaming/actions/Spells.hx:77: characters 3-22
		$r = new HxAnon();
		#src/jotun/gaming/actions/Spells.hx:78: lines 78-93
		Dice::All($data, function ($p, $v) use (&$i, &$r, &$_gthis) {
			#src/jotun/gaming/actions/Spells.hx:79: lines 79-81
			if (is_string($v)) {
				#src/jotun/gaming/actions/Spells.hx:80: characters 5-38
				$v = SpellController::loadAction($v);
			}
			#src/jotun/gaming/actions/Spells.hx:82: lines 82-92
			if (($v !== null) && ((Boot::dynamicField($v, 'id') === null) || !\Reflect::hasField($r, Boot::dynamicField($v, 'id')))) {
				#src/jotun/gaming/actions/Spells.hx:83: lines 83-87
				if (($v instanceof Action)) {
					#src/jotun/gaming/actions/Spells.hx:84: characters 6-18
					$_gthis->_data->offsetSet($i, $v);
				} else {
					#src/jotun/gaming/actions/Spells.hx:86: characters 6-53
					$_gthis->_data->offsetSet($i, new Action(($_gthis->_type??'null') . "[" . ($p??'null') . "]", $v));
				}
				#src/jotun/gaming/actions/Spells.hx:88: lines 88-90
				if (Boot::dynamicField($v, 'id') !== null) {
					#src/jotun/gaming/actions/Spells.hx:89: characters 6-34
					\Reflect::setField($r, Boot::dynamicField($v, 'id'), 1);
				}
				#src/jotun/gaming/actions/Spells.hx:91: characters 5-8
				$i += 1;
			}
		});
	}

	/**
	 * @return void
	 */
	public function _innerRun () {
		#src/jotun/gaming/actions/Spells.hx:134: lines 134-157
		$_gthis = $this;
		#src/jotun/gaming/actions/Spells.hx:135: characters 3-23
		$a = null;
		#src/jotun/gaming/actions/Spells.hx:136: lines 136-146
		Dice::Count($this->_cursor_pos, $this->_data->length, function ($current, $max, $completed) use (&$_gthis, &$a) {
			#src/jotun/gaming/actions/Spells.hx:137: characters 4-17
			++$_gthis->_cursor_pos;
			#src/jotun/gaming/actions/Spells.hx:138: characters 4-32
			$_gthis->_context->registerEvent($_gthis);
			#src/jotun/gaming/actions/Spells.hx:139: characters 4-22
			$a = ($_gthis->_data->arr[$current] ?? null);
			#src/jotun/gaming/actions/Spells.hx:140: lines 140-145
			if ($a->willBreakOn($a->run($_gthis->_context, $current))) {
				#src/jotun/gaming/actions/Spells.hx:141: characters 5-24
				$_gthis->_is_waiting = false;
				#src/jotun/gaming/actions/Spells.hx:142: characters 5-16
				return true;
			} else {
				#src/jotun/gaming/actions/Spells.hx:144: characters 5-23
				return $_gthis->_is_waiting;
			}
		});
		#src/jotun/gaming/actions/Spells.hx:147: lines 147-156
		if ($this->_is_waiting === false) {
			#src/jotun/gaming/actions/Spells.hx:148: characters 4-20
			--$this->_context->ident;
			#src/jotun/gaming/actions/Spells.hx:149: lines 149-154
			if ($this->_context->ident === 0) {
				#src/jotun/gaming/actions/Spells.hx:150: lines 150-153
				if ($this->_context->debug) {
					#src/jotun/gaming/actions/Spells.hx:151: characters 6-26
					Spells::_log($this, $this->_context);
					#src/jotun/gaming/actions/Spells.hx:152: characters 6-28
					$_this = $this->_context->log;
					$_this->arr = \array_reverse($_this->arr);
				}
			}
			#src/jotun/gaming/actions/Spells.hx:155: characters 4-19
			$this->_context = null;
		}
	}

	/**
	 * @return bool
	 */
	public function canWait () {
		#src/jotun/gaming/actions/Spells.hx:160: characters 3-36
		return $this->_cursor_pos < $this->_data->length;
	}

	/**
	 * @return string
	 */
	public function getType () {
		#src/jotun/gaming/actions/Spells.hx:97: characters 3-15
		return $this->_type;
	}

	/**
	 * @param string $q
	 * 
	 * @return bool
	 */
	public function matchType ($q) {
		#src/jotun/gaming/actions/Spells.hx:101: characters 3-20
		return $this->_type === $q;
	}

	/**
	 * @param SpellCasting $context
	 * 
	 * @return void
	 */
	public function run ($context) {
		#src/jotun/gaming/actions/Spells.hx:164: characters 3-22
		$this->_is_waiting = false;
		#src/jotun/gaming/actions/Spells.hx:165: characters 3-18
		$this->_cursor_pos = 0;
		#src/jotun/gaming/actions/Spells.hx:166: characters 3-21
		$this->_context = $context;
		#src/jotun/gaming/actions/Spells.hx:167: characters 3-18
		++$context->ident;
		#src/jotun/gaming/actions/Spells.hx:168: characters 3-14
		$this->_innerRun();
	}
}

Boot::registerClass(Spells::class, 'jotun.gaming.actions.Spells');
