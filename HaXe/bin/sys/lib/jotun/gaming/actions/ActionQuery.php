<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\gaming\actions;

use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\utils\Filler;
use \haxe\Log;
use \jotun\tools\Utils;
use \jotun\utils\Dice;
use \php\_Boot\HxString;
use \jotun\objects\Query;

/**
 * ...
 * @author Rim Project
 */
class ActionQuery extends Query {
	/**
	 * @var string
	 */
	static public $RULE_ADD = "+";
	/**
	 * @var string
	 */
	static public $RULE_BIT_AND = "&";
	/**
	 * @var string
	 */
	static public $RULE_BIT_NOT = "~";
	/**
	 * @var string
	 */
	static public $RULE_BIT_OR = "|";
	/**
	 * @var string
	 */
	static public $RULE_BIT_XOR = "!";
	/**
	 * @var string
	 */
	static public $RULE_DECREMENT = "--";
	/**
	 * @var string
	 */
	static public $RULE_DIVIDE = "/";
	/**
	 * @var string
	 */
	static public $RULE_EQUAL = "=";
	/**
	 * @var string
	 */
	static public $RULE_INCREMENT = "++";
	/**
	 * @var string
	 */
	static public $RULE_MOD = "%";
	/**
	 * @var string
	 */
	static public $RULE_MULTIPLY = "*";
	/**
	 * @var string
	 */
	static public $RULE_POW = "^";
	/**
	 * @var string
	 */
	static public $RULE_RANDOM = "#";
	/**
	 * @var string
	 */
	static public $RULE_SHIFT_LEFT = "<<";
	/**
	 * @var string
	 */
	static public $RULE_SHIFT_RIGHT = ">>";
	/**
	 * @var string
	 */
	static public $RULE_SUBTRACT = "-";

	/**
	 * @var SpellCasting
	 */
	public $invocation;

	/**
	 *
	 * 
	 * @return void
	 */
	public function __construct () {
		#src/jotun/gaming/actions/ActionQuery.hx:125: characters 3-10
		parent::__construct();
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	public function _BOOL ($value) {
		#src/jotun/gaming/actions/ActionQuery.hx:60: characters 3-30
		return Utils::boolean($value);
	}

	/**
	 * @param mixed $value
	 * @param float $alt
	 * 
	 * @return float
	 */
	public function _FLOAT ($value, $alt = null) {
		#src/jotun/gaming/actions/ActionQuery.hx:69: characters 3-113
		$o = (is_string($value) ? \Std::parseFloat($value) : ((is_float($value) || is_int($value)) ? $value : null));
		#src/jotun/gaming/actions/ActionQuery.hx:70: characters 10-29
		if ($o !== null) {
			#src/jotun/gaming/actions/ActionQuery.hx:70: characters 22-23
			return $o;
		} else {
			#src/jotun/gaming/actions/ActionQuery.hx:70: characters 26-29
			return $alt;
		}
	}

	/**
	 * @param mixed $value
	 * @param int $alt
	 * 
	 * @return int
	 */
	public function _INT ($value, $alt = null) {
		#src/jotun/gaming/actions/ActionQuery.hx:64: characters 3-112
		$o = (is_string($value) ? \Std::parseInt($value) : (Boot::isOfType($value, Boot::getClass('Int')) ? $value : null));
		#src/jotun/gaming/actions/ActionQuery.hx:65: characters 10-29
		if ($o !== null) {
			#src/jotun/gaming/actions/ActionQuery.hx:65: characters 22-23
			return $o;
		} else {
			#src/jotun/gaming/actions/ActionQuery.hx:65: characters 26-29
			return $alt;
		}
	}

	/**
	 * @param string $value
	 * 
	 * @return mixed
	 */
	public function _PARAMS ($value) {
		#src/jotun/gaming/actions/ActionQuery.hx:46: characters 3-27
		$params = new HxAnon();
		#src/jotun/gaming/actions/ActionQuery.hx:47: lines 47-55
		if ($value !== null) {
			#src/jotun/gaming/actions/ActionQuery.hx:48: characters 4-38
			$value = HxString::split($value, "+")->join(" ");
			#src/jotun/gaming/actions/ActionQuery.hx:49: lines 49-54
			Dice::Values(HxString::split($value, "&"), function ($v) use (&$params) {
				#src/jotun/gaming/actions/ActionQuery.hx:50: characters 5-44
				$data = HxString::split($v, "=");
				#src/jotun/gaming/actions/ActionQuery.hx:51: lines 51-53
				if ($data->length > 1) {
					#src/jotun/gaming/actions/ActionQuery.hx:52: characters 6-48
					\Reflect::setField($params, ($data->arr[0] ?? null), ($data->arr[1] ?? null));
				}
			});
		}
		#src/jotun/gaming/actions/ActionQuery.hx:56: characters 3-16
		return $params;
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	public function _isempty ($value) {
		#src/jotun/gaming/actions/ActionQuery.hx:42: characters 10-38
		if ($value !== null) {
			#src/jotun/gaming/actions/ActionQuery.hx:42: characters 27-38
			return $value === "";
		} else {
			#src/jotun/gaming/actions/ActionQuery.hx:42: characters 10-38
			return true;
		}
	}

	/**
	 * @param mixed $a
	 * @param string $r
	 * @param mixed $v
	 * 
	 * @return mixed
	 */
	public function _resolve ($a, $r, $v) {
		#src/jotun/gaming/actions/ActionQuery.hx:78: lines 78-80
		if ($r === null) {
			#src/jotun/gaming/actions/ActionQuery.hx:79: characters 4-11
			$r = "=";
		}
		#src/jotun/gaming/actions/ActionQuery.hx:81: lines 81-116
		if ($r === "+" || $r === "add") {
			#src/jotun/gaming/actions/ActionQuery.hx:85: characters 21-26
			return Boot::addOrConcat($a, $v);
		} else if ($r === "&" || $r === "and") {
			#src/jotun/gaming/actions/ActionQuery.hx:107: characters 21-26
			return $a & $v;
		} else if ($r === "--" || $r === "decrement") {
			#src/jotun/gaming/actions/ActionQuery.hx:91: characters 29-34
			return $a - 1;
		} else if ($r === "/" || $r === "divided") {
			#src/jotun/gaming/actions/ActionQuery.hx:95: characters 25-30
			return $a / $v;
		} else if ($r === "=" || $r === "eq" || $r === "equal") {
			#src/jotun/gaming/actions/ActionQuery.hx:83: characters 28-29
			return $a;
		} else if ($r === "++" || $r === "increment") {
			#src/jotun/gaming/actions/ActionQuery.hx:89: characters 29-34
			return $a + 1;
		} else if ($r === "<<" || $r === "lshift") {
			#src/jotun/gaming/actions/ActionQuery.hx:99: characters 26-32
			return $a << $v;
		} else if ($r === "%" || $r === "mod") {
			#src/jotun/gaming/actions/ActionQuery.hx:97: characters 21-26
			return fmod($a, $v);
		} else if ($r === "*" || $r === "multiply") {
			#src/jotun/gaming/actions/ActionQuery.hx:93: characters 26-31
			return $a * $v;
		} else if ($r === "not" || $r === "~") {
			#src/jotun/gaming/actions/ActionQuery.hx:103: characters 21-34
			return $a & ~$v;
		} else if ($r === "or" || $r === "|") {
			#src/jotun/gaming/actions/ActionQuery.hx:105: characters 20-25
			return $a | $v;
		} else if ($r === "^" || $r === "pow") {
			#src/jotun/gaming/actions/ActionQuery.hx:111: characters 21-35
			return ($a ** $v);
		} else if ($r === "#" || $r === "random") {
			#src/jotun/gaming/actions/ActionQuery.hx:113: characters 25-40
			return $this->rng() * $v + $a;
		} else if ($r === ">>" || $r === "rshift") {
			#src/jotun/gaming/actions/ActionQuery.hx:101: characters 25-31
			return $a >> $v;
		} else if ($r === "-" || $r === "sub") {
			#src/jotun/gaming/actions/ActionQuery.hx:87: characters 21-26
			return $a - $v;
		} else if ($r === "!" || $r === "xor") {
			#src/jotun/gaming/actions/ActionQuery.hx:109: characters 21-26
			return $a ^ $v;
		} else {
			#src/jotun/gaming/actions/ActionQuery.hx:115: characters 14-15
			return $a;
		}
	}

	/**
	 * Call a registered Event chain
	 * @param	events
	 * @return
	 * 
	 * @param string $id
	 * 
	 * @return ActionQuery
	 */
	public function call ($id) {
		#src/jotun/gaming/actions/ActionQuery.hx:141: characters 3-49
		$action = SpellCodex::loadAction($id);
		#src/jotun/gaming/actions/ActionQuery.hx:142: lines 142-144
		if ($action !== null) {
			#src/jotun/gaming/actions/ActionQuery.hx:143: characters 4-32
			$action->invoke($this->invocation, 0);
		}
		#src/jotun/gaming/actions/ActionQuery.hx:145: characters 3-14
		return $this;
	}

	/**
	 * @return IDataProvider
	 */
	public function getDataProvider () {
		#src/jotun/gaming/actions/ActionQuery.hx:38: characters 3-36
		return $this->invocation->currentProvider;
	}

	/**
	 * @return float
	 */
	public function rng () {
		#src/jotun/gaming/actions/ActionQuery.hx:74: characters 3-23
		return \mt_rand() / \mt_getrandmax();
	}

	/**
	 * Set value to a variable
	 * setfloat var_name * 0.5 // effect: var_name*=0.5
	 * setfloat var_name / 0.5 // effect: var_name/=0.5
	 * @param	name
	 * @param	rule
	 * @param	value
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param float $value
	 * 
	 * @return ActionQuery
	 */
	public function setfloat ($name, $rule, $value) {
		#src/jotun/gaming/actions/ActionQuery.hx:182: characters 3-50
		$a = $this->getDataProvider()->getFloat($name);
		#src/jotun/gaming/actions/ActionQuery.hx:183: lines 183-186
		if ($this->_isempty($value) && !$this->_isempty($rule)) {
			#src/jotun/gaming/actions/ActionQuery.hx:184: characters 4-24
			$value = $this->_FLOAT($rule);
			#src/jotun/gaming/actions/ActionQuery.hx:185: characters 4-15
			$rule = null;
		}
		#src/jotun/gaming/actions/ActionQuery.hx:187: characters 3-34
		$v = $this->_FLOAT($value, 0);
		#src/jotun/gaming/actions/ActionQuery.hx:188: characters 3-27
		$v = $this->_resolve($a, $rule, $v);
		#src/jotun/gaming/actions/ActionQuery.hx:189: lines 189-191
		if (!Boot::equal($a, $v)) {
			#src/jotun/gaming/actions/ActionQuery.hx:190: characters 4-37
			$this->getDataProvider()->setVar($name, $v);
		}
		#src/jotun/gaming/actions/ActionQuery.hx:192: characters 3-14
		return $this;
	}

	/**
	 * Set value to a variable
	 * setfloat var_name * 2 // effect: var_name*=2
	 * setfloat var_name / 2 // effect: var_name/=2
	 * @param	name
	 * @param	rule
	 * @param	value
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param int $value
	 * 
	 * @return ActionQuery
	 */
	public function setint ($name, $rule, $value) {
		#src/jotun/gaming/actions/ActionQuery.hx:204: characters 3-48
		$a = $this->getDataProvider()->getInt($name);
		#src/jotun/gaming/actions/ActionQuery.hx:205: lines 205-208
		if ($this->_isempty($value) && !$this->_isempty($rule)) {
			#src/jotun/gaming/actions/ActionQuery.hx:206: characters 4-22
			$value = $this->_INT($rule);
			#src/jotun/gaming/actions/ActionQuery.hx:207: characters 4-15
			$rule = null;
		}
		#src/jotun/gaming/actions/ActionQuery.hx:209: characters 3-32
		$v = $this->_INT($value, 0);
		#src/jotun/gaming/actions/ActionQuery.hx:210: characters 3-27
		$v = $this->_resolve($a, $rule, $v);
		#src/jotun/gaming/actions/ActionQuery.hx:211: lines 211-213
		if (!Boot::equal($a, $v)) {
			#src/jotun/gaming/actions/ActionQuery.hx:212: characters 4-46
			$this->getDataProvider()->setVar($name, (int)($v));
		}
		#src/jotun/gaming/actions/ActionQuery.hx:214: characters 3-14
		return $this;
	}

	/**
	 * Set a random number to the var, can be float or int
	 * setrng var_name = 10 50 // effect: var_name = (any value from 10 to 50)
	 * setrng var_name = 100 // effect: var_name = (any value from 0 to 100)
	 * @param	name
	 * @param	rule
	 * @param	min
	 * @param	max
	 * @param	float
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param float $min
	 * @param float $max
	 * @param bool $float
	 * 
	 * @return ActionQuery
	 */
	public function setrng ($name, $rule, $min, $max = null, $float = null) {
		#src/jotun/gaming/actions/ActionQuery.hx:161: lines 161-164
		if ($max === null) {
			#src/jotun/gaming/actions/ActionQuery.hx:162: characters 4-13
			$max = $min;
			#src/jotun/gaming/actions/ActionQuery.hx:163: characters 4-11
			$min = 0;
		}
		#src/jotun/gaming/actions/ActionQuery.hx:165: characters 3-37
		$f = Utils::boolean($float);
		#src/jotun/gaming/actions/ActionQuery.hx:166: characters 3-33
		$a_min = $this->_FLOAT($min);
		#src/jotun/gaming/actions/ActionQuery.hx:167: characters 3-55
		$a_max = $this->_FLOAT($max) + (($f ? 0 : 1)) - $a_min;
		#src/jotun/gaming/actions/ActionQuery.hx:168: characters 3-43
		$value = $this->rng() * $a_max + $a_min;
		#src/jotun/gaming/actions/ActionQuery.hx:169: characters 39-70
		$tmp = ($f ? $value : (int)($value));
		#src/jotun/gaming/actions/ActionQuery.hx:169: characters 3-71
		(($f ? Boot::getInstanceClosure($this, 'setfloat') : Boot::getInstanceClosure($this, 'setint')))($name, $rule, $tmp);
		#src/jotun/gaming/actions/ActionQuery.hx:170: characters 3-14
		return $this;
	}

	/**
	 *
	 * @param	name
	 * @param	rule
	 * @param	value
	 * @return
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param string $value
	 * 
	 * @return ActionQuery
	 */
	public function setstr ($name, $rule, $value) {
		#src/jotun/gaming/actions/ActionQuery.hx:247: characters 3-49
		$a = $this->getDataProvider()->getStr($name);
		#src/jotun/gaming/actions/ActionQuery.hx:248: lines 248-251
		if ($this->_isempty($value)) {
			#src/jotun/gaming/actions/ActionQuery.hx:249: characters 4-16
			$value = $rule;
			#src/jotun/gaming/actions/ActionQuery.hx:250: characters 4-15
			$rule = null;
		}
		#src/jotun/gaming/actions/ActionQuery.hx:252: characters 3-35
		$value = $this->_resolve($a, $rule, $value);
		#src/jotun/gaming/actions/ActionQuery.hx:253: lines 253-255
		if ($a !== $value) {
			#src/jotun/gaming/actions/ActionQuery.hx:254: characters 4-41
			$this->getDataProvider()->setStr($name, $value);
		}
		#src/jotun/gaming/actions/ActionQuery.hx:256: characters 3-14
		return $this;
	}

	/**
	 * Toggle Swith value
	 * @param	name
	 * @param	value
	 * @return
	 * 
	 * @param string $name
	 * @param bool $value
	 * 
	 * @return ActionQuery
	 */
	public function setswitch ($name, $value) {
		#src/jotun/gaming/actions/ActionQuery.hx:266: characters 3-50
		$a = $this->getDataProvider()->getSwitch($name);
		#src/jotun/gaming/actions/ActionQuery.hx:267: characters 3-56
		$v = $this->_isempty($value) || Utils::boolean($value);
		#src/jotun/gaming/actions/ActionQuery.hx:268: lines 268-270
		if ($a !== $v) {
			#src/jotun/gaming/actions/ActionQuery.hx:269: characters 4-40
			$this->getDataProvider()->setSwitch($name, $v);
		}
		#src/jotun/gaming/actions/ActionQuery.hx:271: characters 3-14
		return $this;
	}

	/**
	 * Set value to a variable
	 * setvar var_name = foobar // effect: var_name="foobar"
	 * @param	name
	 * @param	rule
	 * @param	value
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param mixed $value
	 * 
	 * @return ActionQuery
	 */
	public function setvar ($name, $rule, $value) {
		#src/jotun/gaming/actions/ActionQuery.hx:225: characters 3-50
		$a = $this->getDataProvider()->getVar($name);
		#src/jotun/gaming/actions/ActionQuery.hx:226: lines 226-229
		if ($this->_isempty($value)) {
			#src/jotun/gaming/actions/ActionQuery.hx:227: characters 4-16
			$value = $rule;
			#src/jotun/gaming/actions/ActionQuery.hx:228: characters 4-15
			$rule = null;
		}
		#src/jotun/gaming/actions/ActionQuery.hx:230: lines 230-236
		if (is_string($a)) {
			#src/jotun/gaming/actions/ActionQuery.hx:231: characters 4-33
			return $this->setstr($a, $rule, $value);
		} else if (is_bool($a)) {
			#src/jotun/gaming/actions/ActionQuery.hx:233: characters 4-33
			return $this->setswitch($name, $value);
		} else {
			#src/jotun/gaming/actions/ActionQuery.hx:235: characters 4-36
			return $this->setint($name, $rule, $value);
		}
	}

	/**
	 * @param array $messages
	 * 
	 * @return ActionQuery
	 */
	public function tracer (...$messages) {
		#src/jotun/gaming/actions/ActionQuery.hx:129: characters 3-8
		(Log::$trace)("[ActionQuery:tracer] " . (Filler::to(\Array_hx::wrap($messages)->join(" "), $this->invocation)??'null'), new HxAnon([
			"fileName" => "src/jotun/gaming/actions/ActionQuery.hx",
			"lineNumber" => 129,
			"className" => "jotun.gaming.actions.ActionQuery",
			"methodName" => "tracer",
		]));
		#src/jotun/gaming/actions/ActionQuery.hx:130: characters 3-14
		return $this;
	}
}

Boot::registerClass(ActionQuery::class, 'jotun.gaming.actions.ActionQuery');
