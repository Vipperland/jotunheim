<?php
/**
 * Generated by Haxe 4.3.4
 */

namespace jotun\gaming\actions;

use \php\_Boot\HxDynamicStr;
use \php\Boot;
use \jotun\tools\Utils;
use \jotun\utils\Dice;
use \jotun\objects\Query;

/**
 * ...
 * @author Rim Project
 */
class RequirementQuery extends Query {
	/**
	 * @var EventContext
	 */
	public $ioContext;

	/**
	 * @return void
	 */
	public function __construct () {
		#src/jotun/gaming/actions/RequirementQuery.hx:80: characters 3-10
		parent::__construct();
	}

	/**
	 * @param mixed $value
	 * @param float $alt
	 * 
	 * @return float
	 */
	public function _FLOAT ($value, $alt) {
		#src/jotun/gaming/actions/RequirementQuery.hx:31: characters 3-113
		$o = (is_string($value) ? \Std::parseFloat($value) : ((is_float($value) || is_int($value)) ? $value : null));
		#src/jotun/gaming/actions/RequirementQuery.hx:32: characters 10-29
		if ($o !== null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:32: characters 22-23
			return $o;
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:32: characters 26-29
			return $alt;
		}
	}

	/**
	 * @param mixed $value
	 * @param int $alt
	 * 
	 * @return int
	 */
	public function _INT ($value, $alt) {
		#src/jotun/gaming/actions/RequirementQuery.hx:26: characters 3-112
		$o = (is_string($value) ? \Std::parseInt($value) : (Boot::isOfType($value, Boot::getClass('Int')) ? $value : null));
		#src/jotun/gaming/actions/RequirementQuery.hx:27: characters 10-29
		if ($o !== null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:27: characters 22-23
			return $o;
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:27: characters 26-29
			return $alt;
		}
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	public function _isempty ($value) {
		#src/jotun/gaming/actions/RequirementQuery.hx:22: characters 10-38
		if ($value !== null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:22: characters 27-38
			return $value === "";
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:22: characters 10-38
			return true;
		}
	}

	/**
	 * @param mixed $a
	 * @param string $r
	 * @param mixed $v
	 * 
	 * @return bool
	 */
	public function _resolve ($a, $r, $v) {
		#src/jotun/gaming/actions/RequirementQuery.hx:40: lines 40-42
		if ($r === null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:41: characters 4-12
			$r = ">=";
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:43: lines 43-74
		if ($r === "*=" || $r === "contain") {
			#src/jotun/gaming/actions/RequirementQuery.hx:61: characters 26-44
			return !Boot::equal(HxDynamicStr::wrap($a)->indexOf($v), -1);
		} else if ($r === "!=" || $r === "diff") {
			#src/jotun/gaming/actions/RequirementQuery.hx:47: characters 23-29
			return !Boot::equal($a, $v);
		} else if ($r === "=" || $r === "equal") {
			#src/jotun/gaming/actions/RequirementQuery.hx:45: characters 23-29
			return Boot::equal($a, $v);
		} else if ($r === ">" || $r === "great") {
			#src/jotun/gaming/actions/RequirementQuery.hx:53: characters 22-27
			return $a > $v;
		} else if ($r === ">=" || $r === "great-or") {
			#src/jotun/gaming/actions/RequirementQuery.hx:55: characters 27-33
			return $a >= $v;
		} else if ($r === "inside" || $r === "~=") {
			#src/jotun/gaming/actions/RequirementQuery.hx:63: characters 25-43
			return !Boot::equal(HxDynamicStr::wrap($v)->indexOf($a), -1);
		} else if ($r === "<" || $r === "less") {
			#src/jotun/gaming/actions/RequirementQuery.hx:49: characters 22-27
			return $a < $v;
		} else if ($r === "<=" || $r === "less-or") {
			#src/jotun/gaming/actions/RequirementQuery.hx:51: characters 26-32
			return $a <= $v;
		} else if ($r === "!&" || $r === "not") {
			#src/jotun/gaming/actions/RequirementQuery.hx:59: characters 21-34
			return Boot::equal((~$a & $v), $v);
		} else if ($r === "#=" || $r === "rand") {
			#src/jotun/gaming/actions/RequirementQuery.hx:65: characters 23-53
			return Boot::equal((int)(($this->rng() * $a)), $v);
		} else if ($r === "#!" || $r === "rand-diff") {
			#src/jotun/gaming/actions/RequirementQuery.hx:67: characters 28-58
			return !Boot::equal((int)(($this->rng() * $a)), $v);
		} else if ($r === "#>" || $r === "rand-great-or") {
			#src/jotun/gaming/actions/RequirementQuery.hx:69: characters 32-48
			return ($this->rng() * $a) >= $v;
		} else if ($r === "#<" || $r === "rand-less-or") {
			#src/jotun/gaming/actions/RequirementQuery.hx:71: characters 31-47
			return ($this->rng() * $a) <= $v;
		} else if ($r === "&" || $r === "test") {
			#src/jotun/gaming/actions/RequirementQuery.hx:57: characters 22-34
			return Boot::equal(($a & $v), $v);
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:73: characters 14-20
			return Boot::equal($a, $v);
		}
	}

	/**
	 * @return IDataProvider
	 */
	public function getDataProvider () {
		#src/jotun/gaming/actions/RequirementQuery.hx:18: characters 3-35
		return $this->ioContext->currentProvider;
	}

	/**
	 * @return bool
	 */
	public function hasrequestcontext () {
		#src/jotun/gaming/actions/RequirementQuery.hx:163: characters 3-43
		return $this->ioContext->requestProvider !== null;
	}

	/**
	 *
	 * @param	hits
	 * @param	...ids
	 * @return
	 * 
	 * @param int $hits
	 * @param array $ids
	 * 
	 * @return bool
	 */
	public function isactionchain ($hits, ...$ids) {
		#src/jotun/gaming/actions/RequirementQuery.hx:209: characters 3-23
		$matches = 0;
		#src/jotun/gaming/actions/RequirementQuery.hx:210: lines 210-212
		if (($hits <= 0) || ($hits > \count($ids))) {
			#src/jotun/gaming/actions/RequirementQuery.hx:211: characters 4-21
			$hits = \count($ids);
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:213: lines 213-218
		return !Dice::Values($this->ioContext->history, function ($a) use (&$ids, &$hits, &$matches) {
			#src/jotun/gaming/actions/RequirementQuery.hx:214: lines 214-216
			if ($a->id === $ids[$matches]) {
				#src/jotun/gaming/actions/RequirementQuery.hx:215: characters 5-14
				$matches += 1;
			}
			#src/jotun/gaming/actions/RequirementQuery.hx:217: characters 4-26
			return $matches >= $hits;
		})->completed;
	}

	/**
	 * Check if
	 * @param	...ids
	 * @return
	 * 
	 * @param array $ids
	 * 
	 * @return bool
	 */
	public function isactionid (...$ids) {
		#src/jotun/gaming/actions/RequirementQuery.hx:193: lines 193-200
		$_gthis = $this;
		#src/jotun/gaming/actions/RequirementQuery.hx:194: lines 194-196
		if (($this->ioContext->action !== null) && ($this->ioContext->action->target !== null) && ($this->ioContext->action->target->id !== null)) {
			#src/jotun/gaming/actions/RequirementQuery.hx:195: characters 4-16
			return false;
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:197: lines 197-199
		return !Dice::Values($ids, function ($v) use (&$_gthis) {
			#src/jotun/gaming/actions/RequirementQuery.hx:198: characters 4-42
			return $v === $_gthis->ioContext->action->target->id;
		})->completed;
	}

	/**
	 *
	 * @param	...ids
	 * @return
	 * 
	 * @param array $ids
	 * 
	 * @return bool
	 */
	public function isafteranyaction (...$ids) {
		#src/jotun/gaming/actions/RequirementQuery.hx:226: lines 226-234
		$_gthis = $this;
		#src/jotun/gaming/actions/RequirementQuery.hx:227: characters 3-23
		$matches = 0;
		#src/jotun/gaming/actions/RequirementQuery.hx:228: lines 228-232
		return !Dice::Values($ids, function ($id) use (&$_gthis) {
			#src/jotun/gaming/actions/RequirementQuery.hx:229: lines 229-231
			return !Dice::Values($_gthis->ioContext->history, function ($a) use (&$id) {
				#src/jotun/gaming/actions/RequirementQuery.hx:230: characters 12-53
				if (($id !== null) && (mb_strlen($id) > 0)) {
					#src/jotun/gaming/actions/RequirementQuery.hx:230: characters 43-53
					return $a->id === $id;
				} else {
					#src/jotun/gaming/actions/RequirementQuery.hx:230: characters 12-53
					return false;
				}
			})->completed;
		})->completed;
	}

	/**
	 *
	 * @return
	 * 
	 * @return bool
	 */
	public function isdebug () {
		#src/jotun/gaming/actions/RequirementQuery.hx:241: characters 3-25
		return $this->ioContext->debug;
	}

	/**
	 * Check if event origin is of type
	 * @param	...rest
	 * @return
	 * 
	 * @param array $types
	 * 
	 * @return bool
	 */
	public function iseventtype (...$types) {
		#src/jotun/gaming/actions/RequirementQuery.hx:182: lines 182-186
		$_gthis = $this;
		#src/jotun/gaming/actions/RequirementQuery.hx:183: lines 183-185
		return !Dice::Values($types, function ($v) use (&$_gthis) {
			#src/jotun/gaming/actions/RequirementQuery.hx:184: characters 4-37
			return $v === Boot::dynamicField($_gthis->ioContext->origin, 'type');
		})->completed;
	}

	/**
	 * @return bool
	 */
	public function ismaincontext () {
		#src/jotun/gaming/actions/RequirementQuery.hx:171: characters 3-61
		return $this->ioContext->dataProvider === $this->ioContext->currentProvider;
	}

	/**
	 * @return bool
	 */
	public function isrequestcontext () {
		#src/jotun/gaming/actions/RequirementQuery.hx:167: characters 10-87
		if ($this->hasrequestcontext()) {
			#src/jotun/gaming/actions/RequirementQuery.hx:167: characters 33-87
			return $this->ioContext->requestProvider === $this->ioContext->currentProvider;
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:167: characters 10-87
			return false;
		}
	}

	/**
	 * Do a getvar() but use a value of random number generator
	 * @param	name
	 * @param	rule
	 * @param	min
	 * @param	max
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param float $min
	 * @param float $max
	 * @param bool $float
	 * 
	 * @return bool
	 */
	public function isrng ($name, $rule, $min, $max = null, $float = null) {
		#src/jotun/gaming/actions/RequirementQuery.hx:93: lines 93-96
		if ($max === null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:94: characters 4-13
			$max = $min;
			#src/jotun/gaming/actions/RequirementQuery.hx:95: characters 4-11
			$min = 0;
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:97: characters 3-37
		$f = Utils::boolean($float);
		#src/jotun/gaming/actions/RequirementQuery.hx:98: characters 3-36
		$a_min = $this->_FLOAT($min, 0);
		#src/jotun/gaming/actions/RequirementQuery.hx:99: characters 3-58
		$a_max = $this->_FLOAT($max, 0) + (($f ? 0 : 1)) - $a_min;
		#src/jotun/gaming/actions/RequirementQuery.hx:100: characters 3-45
		$value = $this->rng() * $a_max + $a_min;
		#src/jotun/gaming/actions/RequirementQuery.hx:101: characters 3-34
		return $this->isvar($name, $rule, $value);
	}

	/**
	 * Match a String Value
	 * Rules:
	 * 			varname != value
	 * 			varname *= value
	 * 			varname ~= value
	 * 			varname =  value
	 * @param	name		variable name
	 * @param	rule		verification rule
	 * @param	value	target value
	 * @return
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param string $value
	 * 
	 * @return bool
	 */
	public function isstr ($name, $rule, $value) {
		#src/jotun/gaming/actions/RequirementQuery.hx:142: characters 3-49
		$a = $this->getDataProvider()->getStr($name);
		#src/jotun/gaming/actions/RequirementQuery.hx:143: lines 143-146
		if ($this->_isempty($value)) {
			#src/jotun/gaming/actions/RequirementQuery.hx:144: characters 4-16
			$value = $rule;
			#src/jotun/gaming/actions/RequirementQuery.hx:145: characters 4-15
			$rule = null;
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:147: characters 3-34
		return $this->_resolve($a, $rule, $value);
	}

	/**
	 * Check if switch is TRUE or FALSE
	 * @param	name
	 * @param	value
	 * @return
	 * 
	 * @param string $name
	 * @param bool $value
	 * 
	 * @return bool
	 */
	public function isswitch ($name, $value) {
		#src/jotun/gaming/actions/RequirementQuery.hx:157: characters 3-50
		$a = $this->getDataProvider()->getSwitch($name);
		#src/jotun/gaming/actions/RequirementQuery.hx:158: characters 3-56
		return ($this->_isempty($value) || Utils::boolean($value)) === $a;
	}

	/**
	 * Match a Variable Value
	 * Rules:
	 * 			varname <  value
	 * 			varname <= value
	 * 			varname >  value
	 * 			varname >= value
	 * 			varname != value
	 * 			varname &  value
	 * 			varname !& value
	 * 			varname =  value
	 * @param	name		variable name
	 * @param	rule		verification rule
	 * @param	value	target value
	 * @return
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param float $value
	 * 
	 * @return bool
	 */
	public function isvar ($name, $rule, $value) {
		#src/jotun/gaming/actions/RequirementQuery.hx:121: characters 3-48
		$a = $this->getDataProvider()->getVar($name);
		#src/jotun/gaming/actions/RequirementQuery.hx:122: lines 122-125
		if ($this->_isempty($value) && !$this->_isempty($rule)) {
			#src/jotun/gaming/actions/RequirementQuery.hx:123: characters 4-27
			$value = $this->_FLOAT($rule, 0);
			#src/jotun/gaming/actions/RequirementQuery.hx:124: characters 4-15
			$rule = null;
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:126: characters 3-45
		return $this->_resolve($a, $rule, $this->_FLOAT($value, 0));
	}

	/**
	 * @return float
	 */
	public function rng () {
		#src/jotun/gaming/actions/RequirementQuery.hx:36: characters 3-23
		return \mt_rand() / \mt_getrandmax();
	}
}

Boot::registerClass(RequirementQuery::class, 'jotun.gaming.actions.RequirementQuery');
