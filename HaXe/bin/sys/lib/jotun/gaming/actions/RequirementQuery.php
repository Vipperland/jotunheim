<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\gaming\actions;

use \php\_Boot\HxDynamicStr;
use \php\Boot;
use \jotun\tools\Utils;
use \jotun\utils\Dice;
use \jotun\objects\Query;

/**
 * ...
 * @author Rim Project
 */
class RequirementQuery extends Query {
	/**
	 * @var string
	 */
	static public $RULE_BIT = "&";
	/**
	 * @var string
	 */
	static public $RULE_BIT_NOT = "!&";
	/**
	 * @var string
	 */
	static public $RULE_CONTAIN = "*=";
	/**
	 * @var string
	 */
	static public $RULE_DIFFERENT = "!=";
	/**
	 * @var string
	 */
	static public $RULE_EQUAL = "=";
	/**
	 * @var string
	 */
	static public $RULE_GREAT = ">";
	/**
	 * @var string
	 */
	static public $RULE_GREAT_OR = ">=";
	/**
	 * @var string
	 */
	static public $RULE_INSIDE = "~=";
	/**
	 * @var string
	 */
	static public $RULE_LESS = "<";
	/**
	 * @var string
	 */
	static public $RULE_LESS_OR = "<=";
	/**
	 * @var string
	 */
	static public $RULE_RANDOM_DIFFENT = "#!";
	/**
	 * @var string
	 */
	static public $RULE_RANDOM_EQUAL = "#=";
	/**
	 * @var string
	 */
	static public $RULE_RANDOM_GREAT_OR = "#>";
	/**
	 * @var string
	 */
	static public $RULE_RANDOM_LESS_OR = "#<";

	/**
	 * @var SpellCasting
	 */
	public $ioContext;

	/**
	 * @return void
	 */
	public function __construct () {
		#src/jotun/gaming/actions/RequirementQuery.hx:99: characters 3-10
		parent::__construct();
	}

	/**
	 * @param mixed $value
	 * @param float $alt
	 * 
	 * @return float
	 */
	public function _FLOAT ($value, $alt) {
		#src/jotun/gaming/actions/RequirementQuery.hx:46: characters 3-113
		$o = (is_string($value) ? \Std::parseFloat($value) : ((is_float($value) || is_int($value)) ? $value : null));
		#src/jotun/gaming/actions/RequirementQuery.hx:47: characters 10-29
		if ($o !== null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:47: characters 22-23
			return $o;
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:47: characters 26-29
			return $alt;
		}
	}

	/**
	 * @param mixed $value
	 * @param int $alt
	 * 
	 * @return int
	 */
	public function _INT ($value, $alt) {
		#src/jotun/gaming/actions/RequirementQuery.hx:41: characters 3-112
		$o = (is_string($value) ? \Std::parseInt($value) : (Boot::isOfType($value, Boot::getClass('Int')) ? $value : null));
		#src/jotun/gaming/actions/RequirementQuery.hx:42: characters 10-29
		if ($o !== null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:42: characters 22-23
			return $o;
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:42: characters 26-29
			return $alt;
		}
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	public function _isempty ($value) {
		#src/jotun/gaming/actions/RequirementQuery.hx:37: characters 10-38
		if ($value !== null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:37: characters 27-38
			return $value === "";
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:37: characters 10-38
			return true;
		}
	}

	/**
	 * @param mixed $a
	 * @param string $r
	 * @param mixed $v
	 * 
	 * @return bool
	 */
	public function _resolve ($a, $r, $v) {
		#src/jotun/gaming/actions/RequirementQuery.hx:59: lines 59-61
		if ($r === null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:60: characters 4-12
			$r = ">=";
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:62: lines 62-93
		if ($r === "*=" || $r === "contain") {
			#src/jotun/gaming/actions/RequirementQuery.hx:80: characters 26-44
			return !Boot::equal(HxDynamicStr::wrap($a)->indexOf($v), -1);
		} else if ($r === "!=" || $r === "diff") {
			#src/jotun/gaming/actions/RequirementQuery.hx:66: characters 23-29
			return !Boot::equal($a, $v);
		} else if ($r === "=" || $r === "equal") {
			#src/jotun/gaming/actions/RequirementQuery.hx:64: characters 23-29
			return Boot::equal($a, $v);
		} else if ($r === ">" || $r === "great") {
			#src/jotun/gaming/actions/RequirementQuery.hx:72: characters 22-27
			return $a > $v;
		} else if ($r === ">=" || $r === "great-or") {
			#src/jotun/gaming/actions/RequirementQuery.hx:74: characters 27-33
			return $a >= $v;
		} else if ($r === "inside" || $r === "~=") {
			#src/jotun/gaming/actions/RequirementQuery.hx:82: characters 25-43
			return !Boot::equal(HxDynamicStr::wrap($v)->indexOf($a), -1);
		} else if ($r === "<" || $r === "less") {
			#src/jotun/gaming/actions/RequirementQuery.hx:68: characters 22-27
			return $a < $v;
		} else if ($r === "<=" || $r === "less-or") {
			#src/jotun/gaming/actions/RequirementQuery.hx:70: characters 26-32
			return $a <= $v;
		} else if ($r === "!&" || $r === "not") {
			#src/jotun/gaming/actions/RequirementQuery.hx:78: characters 21-34
			return Boot::equal((~$a & $v), $v);
		} else if ($r === "#=" || $r === "rand") {
			#src/jotun/gaming/actions/RequirementQuery.hx:84: characters 23-53
			return Boot::equal((int)(($this->rng() * $a)), $v);
		} else if ($r === "#!" || $r === "rand-diff") {
			#src/jotun/gaming/actions/RequirementQuery.hx:86: characters 28-58
			return !Boot::equal((int)(($this->rng() * $a)), $v);
		} else if ($r === "#>" || $r === "rand-great-or") {
			#src/jotun/gaming/actions/RequirementQuery.hx:88: characters 32-48
			return ($this->rng() * $a) >= $v;
		} else if ($r === "#<" || $r === "rand-less-or") {
			#src/jotun/gaming/actions/RequirementQuery.hx:90: characters 31-47
			return ($this->rng() * $a) <= $v;
		} else if ($r === "&" || $r === "test") {
			#src/jotun/gaming/actions/RequirementQuery.hx:76: characters 22-34
			return Boot::equal(($a & $v), $v);
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:92: characters 14-20
			return Boot::equal($a, $v);
		}
	}

	/**
	 * @param string $rule
	 * @param string $alt
	 * 
	 * @return string
	 */
	public function _rule ($rule, $alt) {
		#src/jotun/gaming/actions/RequirementQuery.hx:55: characters 10-35
		if ($rule !== null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:55: characters 25-29
			return $rule;
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:55: characters 32-35
			return $alt;
		}
	}

	/**
	 * @return IDataProvider
	 */
	public function getDataProvider () {
		#src/jotun/gaming/actions/RequirementQuery.hx:33: characters 3-35
		return $this->ioContext->currentProvider;
	}

	/**
	 * @return bool
	 */
	public function hasrequestcontext () {
		#src/jotun/gaming/actions/RequirementQuery.hx:190: characters 3-43
		return $this->ioContext->requestProvider !== null;
	}

	/**
	 *
	 * @param	hits
	 * @param	...ids
	 * @return
	 * 
	 * @param int $hits
	 * @param array $ids
	 * 
	 * @return bool
	 */
	public function isactionchain ($hits, ...$ids) {
		#src/jotun/gaming/actions/RequirementQuery.hx:236: characters 3-23
		$matches = 0;
		#src/jotun/gaming/actions/RequirementQuery.hx:237: lines 237-239
		if (($hits <= 0) || ($hits > \count($ids))) {
			#src/jotun/gaming/actions/RequirementQuery.hx:238: characters 4-21
			$hits = \count($ids);
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:240: lines 240-245
		return !Dice::Values($this->ioContext->history, function ($a) use (&$ids, &$hits, &$matches) {
			#src/jotun/gaming/actions/RequirementQuery.hx:241: lines 241-243
			if ($a->id === $ids[$matches]) {
				#src/jotun/gaming/actions/RequirementQuery.hx:242: characters 5-14
				$matches += 1;
			}
			#src/jotun/gaming/actions/RequirementQuery.hx:244: characters 4-26
			return $matches >= $hits;
		})->completed;
	}

	/**
	 * Check if
	 * @param	...ids
	 * @return
	 * 
	 * @param array $ids
	 * 
	 * @return bool
	 */
	public function isactionid (...$ids) {
		#src/jotun/gaming/actions/RequirementQuery.hx:220: lines 220-227
		$_gthis = $this;
		#src/jotun/gaming/actions/RequirementQuery.hx:221: lines 221-223
		if (($this->ioContext->action !== null) && ($this->ioContext->action->target !== null) && ($this->ioContext->action->target->id !== null)) {
			#src/jotun/gaming/actions/RequirementQuery.hx:222: characters 4-16
			return false;
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:224: lines 224-226
		return !Dice::Values($ids, function ($v) use (&$_gthis) {
			#src/jotun/gaming/actions/RequirementQuery.hx:225: characters 4-42
			return $v === $_gthis->ioContext->action->target->id;
		})->completed;
	}

	/**
	 *
	 * @param	...ids
	 * @return
	 * 
	 * @param array $ids
	 * 
	 * @return bool
	 */
	public function isafteranyaction (...$ids) {
		#src/jotun/gaming/actions/RequirementQuery.hx:253: lines 253-261
		$_gthis = $this;
		#src/jotun/gaming/actions/RequirementQuery.hx:254: characters 3-23
		$matches = 0;
		#src/jotun/gaming/actions/RequirementQuery.hx:255: lines 255-259
		return !Dice::Values($ids, function ($id) use (&$_gthis) {
			#src/jotun/gaming/actions/RequirementQuery.hx:256: lines 256-258
			return !Dice::Values($_gthis->ioContext->history, function ($a) use (&$id) {
				#src/jotun/gaming/actions/RequirementQuery.hx:257: characters 12-53
				if (($id !== null) && (mb_strlen($id) > 0)) {
					#src/jotun/gaming/actions/RequirementQuery.hx:257: characters 43-53
					return $a->id === $id;
				} else {
					#src/jotun/gaming/actions/RequirementQuery.hx:257: characters 12-53
					return false;
				}
			})->completed;
		})->completed;
	}

	/**
	 *
	 * @return
	 * 
	 * @return bool
	 */
	public function isdebug () {
		#src/jotun/gaming/actions/RequirementQuery.hx:268: characters 3-25
		return $this->ioContext->debug;
	}

	/**
	 * @return bool
	 */
	public function iseven () {
		#src/jotun/gaming/actions/RequirementQuery.hx:128: characters 3-41
		return (int)((\mt_rand() / \mt_getrandmax() * 2)) === 1;
	}

	/**
	 * Check if event origin is of type
	 * @param	...rest
	 * @return
	 * 
	 * @param array $types
	 * 
	 * @return bool
	 */
	public function iseventtype (...$types) {
		#src/jotun/gaming/actions/RequirementQuery.hx:209: lines 209-213
		$_gthis = $this;
		#src/jotun/gaming/actions/RequirementQuery.hx:210: lines 210-212
		return !Dice::Values($types, function ($v) use (&$_gthis) {
			#src/jotun/gaming/actions/RequirementQuery.hx:211: characters 4-37
			return $v === Boot::dynamicField($_gthis->ioContext->origin, 'type');
		})->completed;
	}

	/**
	 * @return bool
	 */
	public function ismaincontext () {
		#src/jotun/gaming/actions/RequirementQuery.hx:198: characters 3-61
		return $this->ioContext->dataProvider === $this->ioContext->currentProvider;
	}

	/**
	 * @return bool
	 */
	public function isodd () {
		#src/jotun/gaming/actions/RequirementQuery.hx:124: characters 3-41
		return (int)((\mt_rand() / \mt_getrandmax() * 2)) === 0;
	}

	/**
	 * @return bool
	 */
	public function isrequestcontext () {
		#src/jotun/gaming/actions/RequirementQuery.hx:194: characters 10-87
		if ($this->hasrequestcontext()) {
			#src/jotun/gaming/actions/RequirementQuery.hx:194: characters 33-87
			return $this->ioContext->requestProvider === $this->ioContext->currentProvider;
		} else {
			#src/jotun/gaming/actions/RequirementQuery.hx:194: characters 10-87
			return false;
		}
	}

	/**
	 * Do a getvar() but use a value of random number generator
	 * @param	name
	 * @param	rule
	 * @param	min
	 * @param	max
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param float $min
	 * @param float $max
	 * @param bool $float
	 * 
	 * @return bool
	 */
	public function isrng ($name, $rule, $min, $max = null, $float = null) {
		#src/jotun/gaming/actions/RequirementQuery.hx:112: lines 112-115
		if ($max === null) {
			#src/jotun/gaming/actions/RequirementQuery.hx:113: characters 4-13
			$max = $min;
			#src/jotun/gaming/actions/RequirementQuery.hx:114: characters 4-11
			$min = 0;
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:116: characters 3-37
		$f = Utils::boolean($float);
		#src/jotun/gaming/actions/RequirementQuery.hx:117: characters 3-36
		$a_min = $this->_FLOAT($min, 0);
		#src/jotun/gaming/actions/RequirementQuery.hx:118: characters 3-58
		$a_max = $this->_FLOAT($max, 0) + (($f ? 0 : 1)) - $a_min;
		#src/jotun/gaming/actions/RequirementQuery.hx:119: characters 3-45
		$value = $this->rng() * $a_max + $a_min;
		#src/jotun/gaming/actions/RequirementQuery.hx:120: characters 3-34
		return $this->isvar($name, $rule, $value);
	}

	/**
	 * Match a String Value
	 * Rules:
	 * 			varname != value
	 * 			varname *= value
	 * 			varname ~= value
	 * 			varname =  value
	 * @param	name		variable name
	 * @param	rule		verification rule
	 * @param	value	target value
	 * @return
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param string $value
	 * 
	 * @return bool
	 */
	public function isstr ($name, $rule, $value) {
		#src/jotun/gaming/actions/RequirementQuery.hx:169: characters 3-49
		$a = $this->getDataProvider()->getStr($name);
		#src/jotun/gaming/actions/RequirementQuery.hx:170: lines 170-173
		if ($this->_isempty($value)) {
			#src/jotun/gaming/actions/RequirementQuery.hx:171: characters 4-16
			$value = $rule;
			#src/jotun/gaming/actions/RequirementQuery.hx:172: characters 4-15
			$rule = null;
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:174: characters 3-34
		return $this->_resolve($a, $rule, $value);
	}

	/**
	 * Check if switch is TRUE or FALSE
	 * @param	name
	 * @param	value
	 * @return
	 * 
	 * @param string $name
	 * @param bool $value
	 * 
	 * @return bool
	 */
	public function isswitch ($name, $value) {
		#src/jotun/gaming/actions/RequirementQuery.hx:184: characters 3-50
		$a = $this->getDataProvider()->getSwitch($name);
		#src/jotun/gaming/actions/RequirementQuery.hx:185: characters 3-56
		return ($this->_isempty($value) || Utils::boolean($value)) === $a;
	}

	/**
	 * Match a Variable Value
	 * Rules:
	 * 			varname <  value
	 * 			varname <= value
	 * 			varname >  value
	 * 			varname >= value
	 * 			varname != value
	 * 			varname &  value
	 * 			varname !& value
	 * 			varname =  value
	 * @param	name		variable name
	 * @param	rule		verification rule
	 * @param	value	target value
	 * @return
	 * 
	 * @param string $name
	 * @param string $rule
	 * @param float $value
	 * 
	 * @return bool
	 */
	public function isvar ($name, $rule, $value) {
		#src/jotun/gaming/actions/RequirementQuery.hx:148: characters 3-48
		$a = $this->getDataProvider()->getVar($name);
		#src/jotun/gaming/actions/RequirementQuery.hx:149: lines 149-152
		if ($this->_isempty($value) && !$this->_isempty($rule)) {
			#src/jotun/gaming/actions/RequirementQuery.hx:150: characters 4-27
			$value = $this->_FLOAT($rule, 0);
			#src/jotun/gaming/actions/RequirementQuery.hx:151: characters 4-15
			$rule = null;
		}
		#src/jotun/gaming/actions/RequirementQuery.hx:153: characters 3-45
		return $this->_resolve($a, $rule, $this->_FLOAT($value, 0));
	}

	/**
	 * @return float
	 */
	public function rng () {
		#src/jotun/gaming/actions/RequirementQuery.hx:51: characters 3-23
		return \mt_rand() / \mt_getrandmax();
	}
}

Boot::registerClass(RequirementQuery::class, 'jotun.gaming.actions.RequirementQuery');
