<?php
/**
 * Generated by Haxe 4.3.4
 */

namespace jotun\gaming\actions;

use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\utils\Dice;

/**
 * @author Rafael Moreira
 */
class BasicDataProvider implements IDataProvider {
	/**
	 * @var mixed
	 */
	static public $_instances;

	/**
	 * @var mixed
	 */
	public $_data;

	/**
	 * @param string $name
	 * 
	 * @return void
	 */
	public static function drop ($name) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:26: characters 3-26
		\Reflect::deleteField(BasicDataProvider::$_instances, $name);
	}

	/**
	 * @param string $name
	 * 
	 * @return IDataProvider
	 */
	public static function get ($name) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:14: lines 14-16
		if (!\Reflect::hasField(BasicDataProvider::$_instances, $name)) {
			#src/jotun/gaming/actions/BasicDataProvider.hx:15: characters 4-57
			$this1 = BasicDataProvider::$_instances;
			$value = new BasicDataProvider(new HxAnon());
			\Reflect::setField($this1, $name, $value);
		}
		#src/jotun/gaming/actions/BasicDataProvider.hx:17: characters 10-30
		return \Reflect::field(BasicDataProvider::$_instances, $name);
	}

	/**
	 * @param string $name
	 * @param IDataProvider $data
	 * 
	 * @return IDataProvider
	 */
	public static function set ($name, $data) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:21: characters 3-29
		\Reflect::setField(BasicDataProvider::$_instances, $name, $data);
		#src/jotun/gaming/actions/BasicDataProvider.hx:22: characters 3-14
		return $data;
	}

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($data) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:32: characters 3-15
		$this->_data = $data;
	}

	/**
	 * @param string $name
	 * 
	 * @return float
	 */
	public function getFloat ($name) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:54: characters 3-38
		return \Std::parseFloat($this->getVar($name));
	}

	/**
	 * @param string $name
	 * 
	 * @return int
	 */
	public function getInt ($name) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:50: characters 10-50
		if ($this->hasVar($name)) {
			#src/jotun/gaming/actions/BasicDataProvider.hx:50: characters 25-46
			return (int)($this->getVar($name));
		} else {
			#src/jotun/gaming/actions/BasicDataProvider.hx:50: characters 49-50
			return 0;
		}
	}

	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	public function getStr ($name) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:46: characters 10-54
		if ($this->hasVar($name)) {
			#src/jotun/gaming/actions/BasicDataProvider.hx:46: characters 25-49
			return \Std::string($this->getVar($name));
		} else {
			#src/jotun/gaming/actions/BasicDataProvider.hx:46: characters 52-54
			return "";
		}
	}

	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	public function getSwitch ($name) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:58: characters 3-26
		return $this->getInt($name) > 0;
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function getVar ($name) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:42: characters 10-25
		return \Reflect::field($this->_data, $name);
	}

	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	public function hasVar ($name) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:38: characters 10-28
		return \Reflect::hasField($this->_data, $name);
	}

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function merge ($data) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:77: lines 77-81
		$_gthis = $this;
		#src/jotun/gaming/actions/BasicDataProvider.hx:78: lines 78-80
		Dice::All($data, function ($p, $v) use (&$_gthis) {
			#src/jotun/gaming/actions/BasicDataProvider.hx:79: characters 4-19
			$value = $v;
			\Reflect::setField($_gthis->_data, $p, $value);
		});
	}

	/**
	 * @param string $name
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function setStr ($name, $value) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:66: characters 3-37
		$this1 = $this->_data;
		$value1 = \Std::string($value);
		\Reflect::setField($this1, $name, $value1);
	}

	/**
	 * @param string $name
	 * @param bool $value
	 * 
	 * @return void
	 */
	public function setSwitch ($name, $value) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:70: lines 70-74
		if ($value === null) {
			#src/jotun/gaming/actions/BasicDataProvider.hx:71: characters 4-22
			\Reflect::deleteField($this->_data, $name);
		} else {
			#src/jotun/gaming/actions/BasicDataProvider.hx:73: characters 4-34
			$value1 = ($value ? 1 : 0);
			\Reflect::setField($this->_data, $name, $value1);
		}
	}

	/**
	 * @param string $name
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function setVar ($name, $value) {
		#src/jotun/gaming/actions/BasicDataProvider.hx:62: characters 3-25
		$value1 = $value;
		\Reflect::setField($this->_data, $name, $value1);
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$_instances = new HxAnon();
	}
}

Boot::registerClass(BasicDataProvider::class, 'jotun.gaming.actions.BasicDataProvider');
BasicDataProvider::__hx__init();
