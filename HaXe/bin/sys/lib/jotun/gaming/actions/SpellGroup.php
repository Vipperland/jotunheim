<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\gaming\actions;

use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\utils\Dice;

/**
 * ...
 * @author Rim Project
 */
class SpellGroup {
	/**
	 * @var SpellCasting
	 */
	public $_context;
	/**
	 * @var int
	 */
	public $_cursor_pos;
	/**
	 * @var Action[]|\Array_hx
	 */
	public $_data;
	/**
	 * @var bool
	 */
	public $_is_waiting;
	/**
	 * @var \Closure
	 */
	public $_load;
	/**
	 * @var \Closure
	 */
	public $_save;
	/**
	 * @var string
	 */
	public $_type;

	/**
	 * @param SpellGroup $evt
	 * @param SpellCasting $context
	 * 
	 * @return void
	 */
	public static function _log ($evt, $context) {
		#src/jotun/gaming/actions/SpellGroup.hx:185: characters 3-32
		$a = $evt->_data->length;
		#src/jotun/gaming/actions/SpellGroup.hx:186: characters 3-142
		$context->addLog(0, ((($context->chain > 0 ? "└ " : ""))??'null') . "≈ EVENT " . ((($a === 0 ? "" : "CHAIN "))??'null') . ($evt->_type??'null') . ((($a === 0 ? " [!] Empty" : " @" . ($a??'null')))??'null'));
		#src/jotun/gaming/actions/SpellGroup.hx:187: lines 187-189
		if (($context->chain > 0) && ($context->parent->action !== null) && ($context->parent->action->query !== null)) {
			#src/jotun/gaming/actions/SpellGroup.hx:188: characters 4-73
			$context->addLog(1, "├ ACTION \"" . ($context->parent->action->query??'null') . "\"");
		}
	}

	/**
	 * Create a patch with events data
	 * @param	data			Object of names array of event chain
	 * @param	validate		Validate event name, control if events are valid or not
	 * @param	priority		Events to be patched first
	 * @return Array of fully patched events, actions and requirements
	 * 
	 * @param mixed $data
	 * @param \Closure $validate
	 * @param string[]|\Array_hx $priority
	 * 
	 * @return mixed
	 */
	public static function patch ($data, $validate = null, $priority = null) {
		#src/jotun/gaming/actions/SpellGroup.hx:31: characters 3-47
		$patched = new HxAnon();
		#src/jotun/gaming/actions/SpellGroup.hx:32: lines 32-56
		if ($data !== null) {
			#src/jotun/gaming/actions/SpellGroup.hx:33: lines 33-45
			if ($priority !== null) {
				#src/jotun/gaming/actions/SpellGroup.hx:34: lines 34-44
				Dice::Values($priority, function ($v) use (&$data, &$patched) {
					#src/jotun/gaming/actions/SpellGroup.hx:35: lines 35-42
					if (\Reflect::hasField($data, $v)) {
						#src/jotun/gaming/actions/SpellGroup.hx:36: characters 7-35
						$e = \Reflect::field($data, $v);
						#src/jotun/gaming/actions/SpellGroup.hx:37: lines 37-41
						if (!($e instanceof SpellGroup)) {
							#src/jotun/gaming/actions/SpellGroup.hx:38: characters 8-44
							$value = new SpellGroup($v, $e);
							\Reflect::setField($patched, $v, $value);
						} else {
							#src/jotun/gaming/actions/SpellGroup.hx:40: characters 8-25
							$value = $e;
							\Reflect::setField($patched, $v, $value);
						}
					}
					#src/jotun/gaming/actions/SpellGroup.hx:43: characters 6-34
					\Reflect::deleteField($data, $v);
				});
			}
			#src/jotun/gaming/actions/SpellGroup.hx:46: lines 46-55
			Dice::All($data, function ($p, $v) use (&$validate, &$patched) {
				#src/jotun/gaming/actions/SpellGroup.hx:47: characters 9-48
				if ($validate !== null) {
					#src/jotun/gaming/actions/SpellGroup.hx:47: characters 33-47
					$p = $validate($p, $v);
				}
				#src/jotun/gaming/actions/SpellGroup.hx:48: lines 48-54
				if (($p !== null) && ($p !== "")) {
					#src/jotun/gaming/actions/SpellGroup.hx:49: lines 49-53
					if (!($v instanceof SpellGroup)) {
						#src/jotun/gaming/actions/SpellGroup.hx:50: characters 7-43
						$value = new SpellGroup($p, $v);
						\Reflect::setField($patched, $p, $value);
					} else {
						#src/jotun/gaming/actions/SpellGroup.hx:52: characters 7-24
						$value = $v;
						\Reflect::setField($patched, $p, $value);
					}
				}
			});
		}
		#src/jotun/gaming/actions/SpellGroup.hx:57: characters 3-17
		return $patched;
	}

	/**
	 * @param string $type
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return void
	 */
	public function __construct ($type, $data) {
		#src/jotun/gaming/actions/SpellGroup.hx:72: characters 3-15
		$this->_type = $type;
		#src/jotun/gaming/actions/SpellGroup.hx:73: characters 3-13
		$this->_data = new \Array_hx();
		#src/jotun/gaming/actions/SpellGroup.hx:74: characters 3-17
		$this->_init($data, 0);
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * @param int $index
	 * 
	 * @return void
	 */
	public function _init ($data, $index = null) {
		#src/jotun/gaming/actions/SpellGroup.hx:77: lines 77-107
		$_gthis = $this;
		#src/jotun/gaming/actions/SpellGroup.hx:78: lines 78-80
		if ($data->length === 0) {
			#src/jotun/gaming/actions/SpellGroup.hx:79: characters 4-10
			return;
		}
		#src/jotun/gaming/actions/SpellGroup.hx:81: characters 3-37
		$toConcat = null;
		#src/jotun/gaming/actions/SpellGroup.hx:82: characters 6-26
		$b = $this->_data->length;
		$aNeg = $b < 0;
		$bNeg = $index < 0;
		#src/jotun/gaming/actions/SpellGroup.hx:82: lines 82-84
		if (($aNeg !== $bNeg ? $aNeg : $b > $index)) {
			#src/jotun/gaming/actions/SpellGroup.hx:83: characters 4-37
			$toConcat = $this->_data->splice(0, $index);
		}
		#src/jotun/gaming/actions/SpellGroup.hx:85: characters 3-22
		$i = $index;
		#src/jotun/gaming/actions/SpellGroup.hx:86: characters 3-22
		$r = new HxAnon();
		#src/jotun/gaming/actions/SpellGroup.hx:87: lines 87-102
		Dice::All($data, function ($p, $v) use (&$i, &$r, &$_gthis) {
			#src/jotun/gaming/actions/SpellGroup.hx:88: lines 88-90
			if (is_string($v)) {
				#src/jotun/gaming/actions/SpellGroup.hx:89: characters 5-33
				$v = SpellCodex::loadAction($v);
			}
			#src/jotun/gaming/actions/SpellGroup.hx:91: lines 91-101
			if (($v !== null) && ((Boot::dynamicField($v, 'id') === null) || !\Reflect::hasField($r, Boot::dynamicField($v, 'id')))) {
				#src/jotun/gaming/actions/SpellGroup.hx:92: lines 92-96
				if (($v instanceof Action)) {
					#src/jotun/gaming/actions/SpellGroup.hx:93: characters 6-18
					$_gthis->_data->offsetSet($i, $v);
				} else {
					#src/jotun/gaming/actions/SpellGroup.hx:95: characters 6-53
					$_gthis->_data->offsetSet($i, new Action(($_gthis->_type??'null') . "[" . ($p??'null') . "]", $v));
				}
				#src/jotun/gaming/actions/SpellGroup.hx:97: lines 97-99
				if (Boot::dynamicField($v, 'id') !== null) {
					#src/jotun/gaming/actions/SpellGroup.hx:98: characters 6-34
					\Reflect::setField($r, Boot::dynamicField($v, 'id'), 1);
				}
				#src/jotun/gaming/actions/SpellGroup.hx:100: characters 5-8
				$i += 1;
			}
		});
		#src/jotun/gaming/actions/SpellGroup.hx:103: lines 103-106
		if ($toConcat !== null) {
			#src/jotun/gaming/actions/SpellGroup.hx:104: characters 4-34
			$this->_data = $this->_data->concat($toConcat);
			#src/jotun/gaming/actions/SpellGroup.hx:105: characters 4-19
			$toConcat = null;
		}
	}

	/**
	 * @return void
	 */
	public function _innerCasting () {
		#src/jotun/gaming/actions/SpellGroup.hx:151: lines 151-174
		$_gthis = $this;
		#src/jotun/gaming/actions/SpellGroup.hx:152: characters 3-23
		$a = null;
		#src/jotun/gaming/actions/SpellGroup.hx:153: lines 153-163
		Dice::Count($this->_cursor_pos, $this->_data->length, function ($current, $max, $completed) use (&$_gthis, &$a) {
			#src/jotun/gaming/actions/SpellGroup.hx:154: characters 4-17
			++$_gthis->_cursor_pos;
			#src/jotun/gaming/actions/SpellGroup.hx:155: characters 4-32
			$_gthis->_context->registerEvent($_gthis);
			#src/jotun/gaming/actions/SpellGroup.hx:156: characters 4-22
			$a = ($_gthis->_data->arr[$current] ?? null);
			#src/jotun/gaming/actions/SpellGroup.hx:157: lines 157-162
			if ($a->willBreakOn($a->invoke($_gthis->_context, $current))) {
				#src/jotun/gaming/actions/SpellGroup.hx:158: characters 5-24
				$_gthis->_is_waiting = false;
				#src/jotun/gaming/actions/SpellGroup.hx:159: characters 5-16
				return true;
			} else {
				#src/jotun/gaming/actions/SpellGroup.hx:161: characters 5-23
				return $_gthis->_is_waiting;
			}
		});
		#src/jotun/gaming/actions/SpellGroup.hx:164: lines 164-173
		if ($this->_is_waiting === false) {
			#src/jotun/gaming/actions/SpellGroup.hx:165: characters 4-20
			--$this->_context->ident;
			#src/jotun/gaming/actions/SpellGroup.hx:166: lines 166-171
			if ($this->_context->ident === 0) {
				#src/jotun/gaming/actions/SpellGroup.hx:167: lines 167-170
				if ($this->_context->debug) {
					#src/jotun/gaming/actions/SpellGroup.hx:168: characters 6-26
					SpellGroup::_log($this, $this->_context);
					#src/jotun/gaming/actions/SpellGroup.hx:169: characters 6-28
					$_this = $this->_context->log;
					$_this->arr = \array_reverse($_this->arr);
				}
			}
			#src/jotun/gaming/actions/SpellGroup.hx:172: characters 4-19
			$this->_context = null;
		}
	}

	/**
	 * @param SpellCasting $context
	 * 
	 * @return void
	 */
	public function execute ($context) {
		#src/jotun/gaming/actions/SpellGroup.hx:177: characters 3-22
		$this->_is_waiting = false;
		#src/jotun/gaming/actions/SpellGroup.hx:178: characters 3-18
		$this->_cursor_pos = 0;
		#src/jotun/gaming/actions/SpellGroup.hx:179: characters 3-21
		$this->_context = $context;
		#src/jotun/gaming/actions/SpellGroup.hx:180: characters 3-18
		++$context->ident;
		#src/jotun/gaming/actions/SpellGroup.hx:181: characters 3-18
		$this->_innerCasting();
	}

	/**
	 * @param mixed $action
	 * 
	 * @return int
	 */
	public function getIndexOf ($action) {
		#src/jotun/gaming/actions/SpellGroup.hx:204: lines 204-206
		if (is_string($action)) {
			#src/jotun/gaming/actions/SpellGroup.hx:205: characters 4-42
			$action = SpellCodex::loadAction($action);
		}
		#src/jotun/gaming/actions/SpellGroup.hx:207: lines 207-209
		$roll = Dice::Values($this->_data, function ($value) use (&$action) {
			#src/jotun/gaming/actions/SpellGroup.hx:208: characters 4-26
			return $action === $value;
		});
		#src/jotun/gaming/actions/SpellGroup.hx:210: characters 10-52
		if ($roll->completed) {
			#src/jotun/gaming/actions/SpellGroup.hx:210: characters 27-39
			return $this->_data->length;
		} else {
			#src/jotun/gaming/actions/SpellGroup.hx:210: characters 42-52
			return $roll->param;
		}
	}

	/**
	 * @return string
	 */
	public function getType () {
		#src/jotun/gaming/actions/SpellGroup.hx:110: characters 3-15
		return $this->_type;
	}

	/**
	 * @param Action $action
	 * @param int $index
	 * 
	 * @return void
	 */
	public function learn ($action, $index = null) {
		#src/jotun/gaming/actions/SpellGroup.hx:197: lines 197-199
		if (($index === null) || ($index < 0) || ($index > $this->_data->length)) {
			#src/jotun/gaming/actions/SpellGroup.hx:198: characters 4-24
			$index = $this->_data->length;
		}
		#src/jotun/gaming/actions/SpellGroup.hx:200: characters 3-25
		$this->_init(\Array_hx::wrap([$action]), $index);
	}

	/**
	 * @param Action $action
	 * @param mixed $search
	 * 
	 * @return void
	 */
	public function learnAfter ($action, $search) {
		#src/jotun/gaming/actions/SpellGroup.hx:214: characters 3-40
		$this->learn($action, $this->getIndexOf($search) + 1);
	}

	/**
	 * @param Action $action
	 * @param mixed $search
	 * 
	 * @return void
	 */
	public function learnBefore ($action, $search) {
		#src/jotun/gaming/actions/SpellGroup.hx:218: characters 3-40
		$this->learn($action, $this->getIndexOf($search) - 1);
	}

	/**
	 * @return int
	 */
	public function length () {
		#src/jotun/gaming/actions/SpellGroup.hx:193: characters 3-22
		return $this->_data->length;
	}

	/**
	 * @param string $q
	 * 
	 * @return bool
	 */
	public function matchType ($q) {
		#src/jotun/gaming/actions/SpellGroup.hx:114: characters 3-20
		return $this->_type === $q;
	}
}

Boot::registerClass(SpellGroup::class, 'jotun.gaming.actions.SpellGroup');
