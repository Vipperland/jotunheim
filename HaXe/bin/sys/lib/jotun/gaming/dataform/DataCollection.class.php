<?php

// Generated by Haxe 3.4.7
class jotun_gaming_dataform_DataCollection {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->_list = _hx_anonymous(array());
	}}
	public $_list;
	public function add($o) {
		$ion = $o->getION();
		$tmp = null;
		if($ion !== null) {
			$tmp = strlen($ion) > 0;
		} else {
			$tmp = false;
		}
		if($tmp) {
			$o1 = $this->_list;
			if(!_hx_has_field($o1, $ion)) {
				$o2 = $this->_list;
				$o2->{$ion} = _hx_anonymous(array());
			}
			if(_hx_field($o, "id") !== null) {
				$ls = Reflect::field($this->_list, $ion);
				{
					$field = $o->id;
					$ls->{$field} = $o;
				}
			} else {
				$o = null;
			}
		} else {
			$o = null;
		}
		return $o !== null;
	}
	public function parse($data) {
		$_gthis = $this;
		$len = 0;
		$i = _hx_explode("\x0D", $data);
		$l = null;
		jotun_utils_Dice::Values($i, array(new _hx_lambda(array(&$_gthis, &$l, &$len), "jotun_gaming_dataform_DataCollection_0"), 'execute'), null);
		return $len;
	}
	public function stringify($name = null) {
		$r = "";
		jotun_utils_Dice::Values($this->getList($name), array(new _hx_lambda(array(&$r), "jotun_gaming_dataform_DataCollection_1"), 'execute'), null);
		return $r;
	}
	public function getList($name = null) {
		if($name !== null) {
			return Reflect::field($this->_list, $name);
		} else {
			return $this->_list;
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function _dictio() { $args = func_get_args(); return call_user_func_array(self::$_dictio, $args); }
	static $_dictio;
	static function register($o, $name, $props) {
		$o1 = jotun_gaming_dataform_DataCollection::$_dictio;
		$o1->{$name} = _hx_anonymous(array("c" => $o, "n" => $name, "p" => $props));
	}
	static function construct($name, $r) {
		$o = null;
		$o1 = jotun_gaming_dataform_DataCollection::$_dictio;
		if(_hx_has_field($o1, $name)) {
			$d__ = Reflect::field(jotun_gaming_dataform_DataCollection::$_dictio, $name);
			$C__ = _hx_field($d__, "c");
			$o = new C__(d__.n,d__.p);
		}
		if($o !== null) {
			if($r->length === 3) {
				$o->id = $r[1];
				$o->merge($r[2]);
			} else {
				if($r->length === 2) {
					$o->merge($r[1]);
				}
			}
		}
		return $o;
	}
	function __toString() { return 'jotun.gaming.dataform.DataCollection'; }
}
jotun_gaming_dataform_DataCollection::$_dictio = _hx_anonymous(array());
function jotun_gaming_dataform_DataCollection_0(&$_gthis, &$l, &$len, $v) {
	{
		$r = _hx_explode(" ", $v);
		if($r->length > 0) {
			$v = $r[0];
			$cmd = _hx_substring($v, 0, 1);
			$o = null;
			if($cmd === "@") {
				if($l !== null) {
					$v = _hx_substring($v, 1, strlen($v));
					$o = jotun_gaming_dataform_DataCollection::construct($v, $r);
					if($l->insert($v, $o)) {
						$len = $len + 1;
					}
				}
			} else {
				$o = jotun_gaming_dataform_DataCollection::construct($v, $r);
				if($_gthis->add($o)) {
					$l = $o;
					$len = $len + 1;
				} else {
					$l = null;
				}
			}
		}
	}
}
function jotun_gaming_dataform_DataCollection_1(&$r, $v) {
	{
		jotun_utils_Dice::Values($v, array(new _hx_lambda(array(&$r), "jotun_gaming_dataform_DataCollection_2"), 'execute'), null);
	}
}
function jotun_gaming_dataform_DataCollection_2(&$r, $v1) {
	{
		$r1 = null;
		if(strlen($r) > 0) {
			$r1 = "\x0D";
		} else {
			$r1 = "";
		}
		$r2 = _hx_string_or_null($r1) . _hx_string_or_null($v1->stringify());
		$r = _hx_string_or_null($r) . _hx_string_or_null($r2);
	}
}
