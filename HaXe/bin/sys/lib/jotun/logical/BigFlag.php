<?php
/**
 * Generated by Haxe 4.3.4
 */

namespace jotun\logical;

use \php\Boot;
use \jotun\utils\Dice;

/**
 * ...
 * @author Rafael Moreira
 */
class BigFlag {
	/**
	 * @var int
	 */
	public $_length;
	/**
	 * @var Flag[]|\Array_hx
	 */
	public $_parts;

	/**
	 * @param string $value
	 * 
	 * @return BigFlag
	 */
	public static function fromString ($value) {
		#src/jotun/logical/BigFlag.hx:13: characters 3-53
		return (new BigFlag(mb_strlen($value)))->flush($value, 0);
	}

	/**
	 * @param int $length
	 * 
	 * @return void
	 */
	public function __construct ($length) {
		#src/jotun/logical/BigFlag.hx:43: characters 3-14
		$this->_parts = new \Array_hx();
		#src/jotun/logical/BigFlag.hx:44: characters 3-17
		$this->_build($length);
	}

	/**
	 * @param int $bit
	 * 
	 * @return int
	 */
	public function _bit ($bit) {
		#src/jotun/logical/BigFlag.hx:31: lines 31-33
		while ($bit > 31) {
			#src/jotun/logical/BigFlag.hx:32: characters 4-13
			$bit -= 32;
		}
		#src/jotun/logical/BigFlag.hx:34: characters 3-13
		return $bit;
	}

	/**
	 * @param int $length
	 * 
	 * @return void
	 */
	public function _build ($length) {
		#src/jotun/logical/BigFlag.hx:21: characters 3-19
		$this->_length = $length;
		#src/jotun/logical/BigFlag.hx:22: characters 3-29
		$i = $this->_parts->length;
		#src/jotun/logical/BigFlag.hx:23: characters 3-39
		$t = (int)(\ceil($this->_length / 32));
		#src/jotun/logical/BigFlag.hx:24: lines 24-27
		while ($i < $t) {
			#src/jotun/logical/BigFlag.hx:25: characters 4-27
			$this->_parts->offsetSet($i, new Flag(0));
			#src/jotun/logical/BigFlag.hx:26: characters 4-7
			++$i;
		}
	}

	/**
	 * @param int $i
	 * 
	 * @return Flag
	 */
	public function _get ($i) {
		#src/jotun/logical/BigFlag.hx:38: characters 3-22
		$i = (int)(($i / 32));
		#src/jotun/logical/BigFlag.hx:39: characters 3-19
		return ($this->_parts->arr[$i] ?? null);
	}

	/**
	 * @param int $bit
	 * 
	 * @return BigFlag
	 */
	public function drop ($bit) {
		#src/jotun/logical/BigFlag.hx:62: characters 3-28
		$this->_get($bit)->drop($this->_bit($bit));
		#src/jotun/logical/BigFlag.hx:63: characters 3-14
		return $this;
	}

	/**
	 * @param int $length
	 * 
	 * @return BigFlag
	 */
	public function expand ($length) {
		#src/jotun/logical/BigFlag.hx:80: characters 3-17
		$this->_build($length);
		#src/jotun/logical/BigFlag.hx:81: characters 3-14
		return $this;
	}

	/**
	 * @param string $value
	 * @param int $offset
	 * 
	 * @return BigFlag
	 */
	public function flush ($value, $offset = 0) {
		#src/jotun/logical/BigFlag.hx:84: lines 84-95
		if ($offset === null) {
			$offset = 0;
		}
		#src/jotun/logical/BigFlag.hx:85: characters 3-28
		$f = $this->_bit($offset);
		#src/jotun/logical/BigFlag.hx:86: characters 3-28
		$o = mb_strlen($value);
		#src/jotun/logical/BigFlag.hx:87: lines 87-93
		while ($o-- > 0) {
			#src/jotun/logical/BigFlag.hx:88: characters 4-36
			$p = (int)(($o + $offset));
			#src/jotun/logical/BigFlag.hx:89: characters 4-45
			$this->_get($p)->set($f, \mb_substr($value, $o, 1) === "1");
			#src/jotun/logical/BigFlag.hx:90: lines 90-92
			if (++$f > 31) {
				#src/jotun/logical/BigFlag.hx:91: characters 5-12
				$f -= 32;
			}
		}
		#src/jotun/logical/BigFlag.hx:94: characters 3-14
		return $this;
	}

	/**
	 * @param int $index
	 * 
	 * @return Flag
	 */
	public function part ($index) {
		#src/jotun/logical/BigFlag.hx:76: characters 3-23
		return ($this->_parts->arr[$index] ?? null);
	}

	/**
	 * @param int $bit
	 * 
	 * @return BigFlag
	 */
	public function put ($bit) {
		#src/jotun/logical/BigFlag.hx:57: characters 3-27
		$this->_get($bit)->put($this->_bit($bit));
		#src/jotun/logical/BigFlag.hx:58: characters 3-14
		return $this;
	}

	/**
	 * @param int $bit
	 * @param bool $value
	 * 
	 * @return BigFlag
	 */
	public function set ($bit, $value) {
		#src/jotun/logical/BigFlag.hx:48: lines 48-52
		if ($value) {
			#src/jotun/logical/BigFlag.hx:49: characters 4-28
			$this->_get($bit)->put($this->_bit($bit));
		} else {
			#src/jotun/logical/BigFlag.hx:51: characters 4-29
			$this->_get($bit)->drop($this->_bit($bit));
		}
		#src/jotun/logical/BigFlag.hx:53: characters 3-14
		return $this;
	}

	/**
	 * @param int $bit
	 * 
	 * @return bool
	 */
	public function test ($bit) {
		#src/jotun/logical/BigFlag.hx:72: characters 3-35
		return $this->_get($bit)->test($this->_bit($bit));
	}

	/**
	 * @param int $glen
	 * 
	 * @return string
	 */
	public function toCard ($glen = 8) {
		#src/jotun/logical/BigFlag.hx:105: lines 105-111
		if ($glen === null) {
			$glen = 8;
		}
		#src/jotun/logical/BigFlag.hx:106: characters 3-28
		$r = new \Array_hx();
		#src/jotun/logical/BigFlag.hx:107: lines 107-109
		Dice::Values($this->_parts, function ($v) use (&$glen, &$r) {
			#src/jotun/logical/BigFlag.hx:108: characters 4-32
			$x = $v->toString(32, $glen);
			$r->arr[$r->length++] = $x;
		});
		#src/jotun/logical/BigFlag.hx:110: characters 3-24
		return $r->join("\x0D\x0A");
	}

	/**
	 * @param int $glen
	 * 
	 * @return string
	 */
	public function toString ($glen = 8) {
		#src/jotun/logical/BigFlag.hx:97: lines 97-103
		if ($glen === null) {
			$glen = 8;
		}
		#src/jotun/logical/BigFlag.hx:98: characters 3-28
		$r = new \Array_hx();
		#src/jotun/logical/BigFlag.hx:99: lines 99-101
		Dice::Values($this->_parts, function ($v) use (&$glen, &$r) {
			#src/jotun/logical/BigFlag.hx:100: characters 4-32
			$x = $v->toString(32, $glen);
			$r->arr[$r->length++] = $x;
		});
		#src/jotun/logical/BigFlag.hx:102: characters 3-21
		return $r->join(" ");
	}

	/**
	 * @param int $bit
	 * 
	 * @return BigFlag
	 */
	public function toggle ($bit) {
		#src/jotun/logical/BigFlag.hx:67: characters 3-30
		$this->_get($bit)->toggle($this->_bit($bit));
		#src/jotun/logical/BigFlag.hx:68: characters 3-14
		return $this;
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(BigFlag::class, 'jotun.logical.BigFlag');
