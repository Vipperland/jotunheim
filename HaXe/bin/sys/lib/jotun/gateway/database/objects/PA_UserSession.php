<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\gateway\database\objects;

use \jotun\serial\Packager;
use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\gateway\utils\Omnitools;
use \jotun\php\db\Clause;
use \jotun\gateway\domain\Output;
use \jotun\Jotun;
use \jotun\tools\Utils;

/**
 * ...
 * @author
 */
class PA_UserSession extends PA_CoreService {
	/**
	 * @var string
	 */
	const OAUTH_HEAD_IN = "PING=>";
	/**
	 * @var string
	 */
	const OAUTH_HEAD_OUT = "PONG<=";

	/**
	 * @var PA_User
	 */
	public $__user;
	/**
	 * @var float
	 */
	public $_ctd;
	/**
	 * @var string
	 */
	public $_device;
	/**
	 * @var string
	 */
	public $_ip;
	/**
	 * @var string
	 */
	public $_token;
	/**
	 * @var string
	 */
	public $_uid;
	/**
	 * @var float
	 */
	public $_upd;
	/**
	 * @var PA_User
	 */
	public $user;

	/**
	 * @return void
	 */
	public function __construct () {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:49: characters 3-10
		parent::__construct();
	}

	/**
	 * @return PA_User
	 */
	public function _loadUser () {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:42: lines 42-44
		if ($this->__user === null) {
			#server/jotun/gateway/database/objects/PA_UserSession.hx:43: characters 4-57
			$this->setUser($this->get__database()->get_user()->findOne("*", Clause::ID($this->_uid)));
		}
		#server/jotun/gateway/database/objects/PA_UserSession.hx:45: characters 3-16
		return $this->__user;
	}

	/**
	 * @return void
	 */
	public function drop () {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:106: characters 3-67
		$this->get__database()->get_user_session()->deleteOne(Clause::EQUAL("_token", $this->_token));
	}

	/**
	 * @return void
	 */
	public function dropAll () {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:110: lines 110-112
		if ($this->isValid()) {
			#server/jotun/gateway/database/objects/PA_UserSession.hx:111: characters 4-64
			$this->get__database()->get_user_session()->deleteOne(Clause::EQUAL("_uid", $this->_uid));
		}
	}

	/**
	 * @return void
	 */
	public function exposeToken () {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:120: characters 3-52
		$token = "PONG<=";
		#server/jotun/gateway/database/objects/PA_UserSession.hx:121: lines 121-126
		if ($this->isValid()) {
			#server/jotun/gateway/database/objects/PA_UserSession.hx:122: characters 4-19
			$token = ($token??'null') . ($this->_token??'null');
		} else {
			#server/jotun/gateway/database/objects/PA_UserSession.hx:124: characters 4-22
			$token = ($token??'null') . "EXPIRED";
			#server/jotun/gateway/database/objects/PA_UserSession.hx:125: characters 4-10
			$this->drop();
		}
		#server/jotun/gateway/database/objects/PA_UserSession.hx:127: characters 3-56
		Output::get_ME()->registerOAuth(Packager::encodeBase64($token));
	}

	/**
	 * @param bool $force
	 * 
	 * @return void
	 */
	public function exposeUserInfo ($force = null) {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:131: lines 131-133
		if (($this->__user === null) && $force) {
			#server/jotun/gateway/database/objects/PA_UserSession.hx:132: characters 4-15
			$this->_loadUser();
		}
		#server/jotun/gateway/database/objects/PA_UserSession.hx:134: lines 134-142
		if ($this->__user !== null) {
			#server/jotun/gateway/database/objects/PA_UserSession.hx:135: lines 135-141
			Output::get_ME()->object("user")->info = new HxAnon([
				"id" => $this->__user->id,
				"username" => $this->__user->username,
				"flags" => $this->__user->_flags,
				"ctd" => $this->__user->_ctd,
				"upd" => $this->__user->_upd,
			]);
		}
	}

	/**
	 * @return string
	 */
	public function getOAuthCode () {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:116: characters 3-33
		return "PONG<=" . ($this->_token??'null');
	}

	/**
	 * @return PA_User
	 */
	public function get_user () {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:38: characters 3-21
		return $this->_loadUser();
	}

	/**
	 * @return bool
	 */
	public function isValid () {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:95: characters 3-52
		return (Omnitools::timeFromNow(168) - $this->_upd) > 0;
	}

	/**
	 * @param string $oauth
	 * 
	 * @return bool
	 */
	public function loadFromToken ($oauth) {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:78: characters 3-99
		$current = $this->get__database()->get_user_session()->findOne("*", Clause::EQUAL("_token", $oauth));
		#server/jotun/gateway/database/objects/PA_UserSession.hx:79: lines 79-86
		if ($current !== null) {
			#server/jotun/gateway/database/objects/PA_UserSession.hx:80: characters 4-23
			$this->_uid = $current->_uid;
			#server/jotun/gateway/database/objects/PA_UserSession.hx:81: characters 4-27
			$this->_token = $current->_token;
			#server/jotun/gateway/database/objects/PA_UserSession.hx:82: characters 4-21
			$this->_ip = $current->_ip;
			#server/jotun/gateway/database/objects/PA_UserSession.hx:83: characters 4-29
			$this->_device = $current->_device;
			#server/jotun/gateway/database/objects/PA_UserSession.hx:84: characters 4-23
			$this->_ctd = $current->_ctd;
			#server/jotun/gateway/database/objects/PA_UserSession.hx:85: characters 4-23
			$this->_upd = $current->_upd;
		}
		#server/jotun/gateway/database/objects/PA_UserSession.hx:87: characters 3-25
		return $current !== null;
	}

	/**
	 * @return void
	 */
	public function refresh () {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:99: lines 99-102
		if (($this->_uid !== null) && ($this->_token !== null)) {
			#server/jotun/gateway/database/objects/PA_UserSession.hx:100: characters 4-30
			$this->_upd = Omnitools::timeNow();
			#server/jotun/gateway/database/objects/PA_UserSession.hx:101: characters 4-81
			$this->get__database()->get_user_session()->updateOne(new HxAnon(["_upd" => $this->_upd]), Clause::EQUAL("_token", $this->_token));
		}
	}

	/**
	 * @return void
	 */
	public function revoke () {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:146: characters 3-91
		Output::get_ME()->registerOAuth(Packager::encodeBase64("PONG<=" . "REVOKE"));
	}

	/**
	 * @param string $id
	 * @param string $device
	 * 
	 * @return bool
	 */
	public function save ($id, $device) {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:53: lines 53-74
		if (($this->_token === null) && ($this->_uid === null)) {
			#server/jotun/gateway/database/objects/PA_UserSession.hx:54: characters 4-13
			$this->_uid = $id;
			#server/jotun/gateway/database/objects/PA_UserSession.hx:55: characters 4-39
			$this->_token = Omnitools::genRandomIDx65();
			#server/jotun/gateway/database/objects/PA_UserSession.hx:56: characters 4-29
			$this->_ip = Jotun::$domain->client;
			#server/jotun/gateway/database/objects/PA_UserSession.hx:57: characters 4-43
			$this->_device = Utils::getValidOne($device, "");
			#server/jotun/gateway/database/objects/PA_UserSession.hx:58: characters 4-30
			$this->_ctd = Omnitools::timeNow();
			#server/jotun/gateway/database/objects/PA_UserSession.hx:59: characters 4-15
			$this->_upd = $this->_ctd;
			#server/jotun/gateway/database/objects/PA_UserSession.hx:60: lines 60-71
			if ($this->get__database()->get_user_session()->add(new HxAnon([
				"_uid" => $id,
				"_token" => $this->_token,
				"_ip" => $this->_ip,
				"_device" => $this->_device,
				"_ctd" => $this->_ctd,
				"_upd" => $this->_upd,
			]))->success) {
				#server/jotun/gateway/database/objects/PA_UserSession.hx:68: characters 5-16
				return true;
			} else {
				#server/jotun/gateway/database/objects/PA_UserSession.hx:70: characters 5-53
				return $this->_error(2000);
			}
		} else {
			#server/jotun/gateway/database/objects/PA_UserSession.hx:73: characters 4-56
			return $this->_error(2010);
		}
	}

	/**
	 * @param PA_User $user
	 * 
	 * @return void
	 */
	public function setUser ($user) {
		#server/jotun/gateway/database/objects/PA_UserSession.hx:91: characters 3-16
		$this->__user = $user;
	}
}

Boot::registerClass(PA_UserSession::class, 'jotun.gateway.database.objects.PA_UserSession');
Boot::registerGetters('jotun\\gateway\\database\\objects\\PA_UserSession', [
	'user' => true
]);
