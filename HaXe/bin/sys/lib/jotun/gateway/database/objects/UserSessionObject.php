<?php
/**
 * Generated by Haxe 4.3.4
 */

namespace jotun\gateway\database\objects;

use \jotun\serial\Packager;
use \php\_Boot\HxAnon;
use \jotun\gateway\domain\OutputCore;
use \jotun\utils\Omnitools;
use \php\Boot;
use \jotun\php\db\Clause;
use \jotun\logical\Flag;
use \jotun\Jotun;
use \jotun\tools\Utils;
use \jotun\gateway\database\SessionDataAccess;
use \jotun\gateway\domain\zones\pass\IPassCarrier;

/**
 * ...
 * @author
 */
class UserSessionObject extends ZoneCoreObject implements IPassCarrier {
	/**
	 * @var string
	 */
	const OAUTH_HEAD_IN = "(y)=>";
	/**
	 * @var string
	 */
	const OAUTH_HEAD_OUT = "(y)<=";

	/**
	 * @var float
	 */
	public $_ctd;
	/**
	 * @var string
	 */
	public $_device;
	/**
	 * @var string
	 */
	public $_ip;
	/**
	 * @var int
	 */
	public $_read;
	/**
	 * @var string
	 */
	public $_token;
	/**
	 * @var string
	 */
	public $_uid;
	/**
	 * @var float
	 */
	public $_upd;
	/**
	 * @var int
	 */
	public $_write;
	/**
	 * @var IPassCarrier
	 */
	public $carrier;

	/**
	 * @return void
	 */
	public function __construct () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:53: characters 3-10
		parent::__construct();
	}

	/**
	 * @return IPassCarrier
	 */
	public function _loadCarrier () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:49: characters 3-14
		return null;
	}

	/**
	 * @param int $read
	 * 
	 * @return bool
	 */
	public function canRead ($read) {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:170: characters 3-33
		return Flag::FTest($this->_read, $read);
	}

	/**
	 * @param int $write
	 * 
	 * @return bool
	 */
	public function canWrite ($write) {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:174: characters 3-35
		return Flag::FTest($this->_write, $write);
	}

	/**
	 * @return void
	 */
	public function drop () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:117: lines 117-121
		$_gthis = $this;
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:118: lines 118-120
		$this->RunSQL(function () use (&$_gthis) {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:119: characters 4-89
			(Boot::typedCast(Boot::getClass(SessionDataAccess::class), $_gthis->get__database()))->get_session()->deleteOne(Clause::EQUAL("_token", $_gthis->_token));
		});
	}

	/**
	 * @return void
	 */
	public function dropAll () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:123: lines 123-129
		$_gthis = $this;
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:124: lines 124-128
		if ($this->isValid()) {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:125: lines 125-127
			$this->RunSQL(function () use (&$_gthis) {
				#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:126: characters 5-83
				(Boot::typedCast(Boot::getClass(SessionDataAccess::class), $_gthis->get__database()))->get_session()->delete(Clause::EQUAL("_uid", $_gthis->_uid));
			});
		}
	}

	/**
	 *
	 * @param	force
	 * 
	 * @param bool $force
	 * 
	 * @return void
	 */
	public function exposeCarrier ($force = null) {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:151: lines 151-153
		if (($this->get_carrier() === null) && $force) {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:152: characters 4-18
			$this->_loadCarrier();
		}
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:154: lines 154-156
		if ($this->get_carrier() !== null) {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:155: characters 4-71
			OutputCore::getInstance()->object("carrier")->info = $this->get_carrier()->getInfo();
		}
	}

	/**
	 * @return void
	 */
	public function exposeToken () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:136: characters 3-55
		$token = "(y)<=";
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:137: lines 137-142
		if ($this->isValid()) {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:138: characters 4-19
			$token = ($token??'null') . ($this->_token??'null');
		} else {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:140: characters 4-22
			$token = ($token??'null') . "EXPIRED";
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:141: characters 4-10
			$this->drop();
		}
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:143: characters 3-71
		OutputCore::getInstance()->registerOAuth(Packager::encodeBase64($token));
	}

	/**
	 * @return mixed
	 */
	public function getInfo () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:178: characters 3-14
		return null;
	}

	/**
	 * @return string
	 */
	public function getToken () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:132: characters 3-33
		return "(y)<=" . ($this->_token??'null');
	}

	/**
	 * @return IPassCarrier
	 */
	public function get_carrier () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:44: characters 3-24
		return $this->_loadCarrier();
	}

	/**
	 * @return bool
	 */
	public function isValid () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:105: characters 3-52
		return (Omnitools::timeFromNow(168) - $this->_upd) > 0;
	}

	/**
	 * @param string $oauth
	 * 
	 * @return bool
	 */
	public function load ($oauth) {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:87: lines 87-102
		$_gthis = $this;
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:88: lines 88-90
		$current = $this->RunSQL(function () use (&$_gthis, &$oauth) {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:89: characters 4-98
			return (Boot::typedCast(Boot::getClass(SessionDataAccess::class), $_gthis->get__database()))->get_session()->findOne("*", Clause::EQUAL("_token", $oauth));
		});
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:91: lines 91-100
		if ($current !== null) {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:92: characters 4-23
			$this->_uid = $current->_uid;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:93: characters 4-27
			$this->_token = $current->_token;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:94: characters 4-21
			$this->_ip = $current->_ip;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:95: characters 4-29
			$this->_device = $current->_device;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:96: characters 4-25
			$this->_read = $current->_read;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:97: characters 4-27
			$this->_write = $current->_write;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:98: characters 4-23
			$this->_ctd = $current->_ctd;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:99: characters 4-23
			$this->_upd = $current->_upd;
		}
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:101: characters 3-25
		return $current !== null;
	}

	/**
	 * @return void
	 */
	public function refresh () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:108: lines 108-115
		$_gthis = $this;
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:109: lines 109-114
		if (($this->_uid !== null) && ($this->_token !== null)) {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:110: characters 4-30
			$this->_upd = Omnitools::timeNow();
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:111: lines 111-113
			$this->RunSQL(function () use (&$_gthis) {
				#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:112: characters 5-103
				(Boot::typedCast(Boot::getClass(SessionDataAccess::class), $_gthis->get__database()))->get_session()->updateOne(new HxAnon(["_upd" => $_gthis->_upd]), Clause::EQUAL("_token", $_gthis->_token));
			});
		}
	}

	/**
	 * Remove auhtorization from header
	 * 
	 * @return void
	 */
	public function revoke () {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:163: characters 3-109
		OutputCore::getInstance()->registerOAuth(Packager::encodeBase64("(y)<=" . "REVOKE"));
	}

	/**
	 * @param string $id
	 * @param string $device
	 * @param int $read
	 * @param int $write
	 * 
	 * @return bool
	 */
	public function save ($id, $device, $read, $write) {
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:56: lines 56-85
		$_gthis = $this;
		#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:57: lines 57-84
		if (($this->_token === null) && ($this->_uid === null)) {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:58: characters 4-13
			$this->_uid = $id;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:59: characters 4-39
			$this->_token = Omnitools::genRandomIDx65();
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:60: characters 4-29
			$this->_ip = Jotun::$domain->client;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:61: characters 4-43
			$this->_device = Utils::getValidOne($device, "");
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:62: characters 4-16
			$this->_read = $read;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:63: characters 4-18
			$this->_write = $write;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:64: characters 4-30
			$this->_ctd = Omnitools::timeNow();
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:65: characters 4-15
			$this->_upd = $this->_ctd;
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:66: lines 66-81
			if (Boot::dynamicField($this->RunSQL(function () use (&$id, &$_gthis) {
				#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:67: lines 67-76
				return (Boot::typedCast(Boot::getClass(SessionDataAccess::class), $_gthis->get__database()))->get_session()->add(new HxAnon([
					"_uid" => $id,
					"_token" => $_gthis->_token,
					"_ip" => $_gthis->_ip,
					"_device" => $_gthis->_device,
					"_read" => $_gthis->_read,
					"_write" => $_gthis->_write,
					"_ctd" => $_gthis->_ctd,
					"_upd" => $_gthis->_upd,
				]));
			}), 'success')) {
				#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:78: characters 5-16
				return true;
			} else {
				#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:80: characters 5-52
				return $this->_error(1030);
			}
		} else {
			#src+extras/basic+gateway/jotun/gateway/database/objects/UserSessionObject.hx:83: characters 4-55
			return $this->_error(1040);
		}
	}
}

Boot::registerClass(UserSessionObject::class, 'jotun.gateway.database.objects.UserSessionObject');
Boot::registerGetters('jotun\\gateway\\database\\objects\\UserSessionObject', [
	'carrier' => true
]);
