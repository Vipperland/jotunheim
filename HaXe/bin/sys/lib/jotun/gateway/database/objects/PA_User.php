<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\gateway\database\objects;

use \jotun\serial\Packager;
use \php\_Boot\HxAnon;
use \jotun\gateway\utils\Omnitools;
use \php\Boot;
use \jotun\php\db\Clause;
use \jotun\logical\Flag;
use \jotun\tools\Utils;
use \jotun\gateway\utils\Validator;

/**
 * ...
 * @author
 */
class PA_User extends PA_CoreService {
	/**
	 * @var float
	 */
	public $_ctd;
	/**
	 * @var string
	 */
	public $_email;
	/**
	 * @var int
	 */
	public $_flags;
	/**
	 * @var int
	 */
	public $_read;
	/**
	 * @var float
	 */
	public $_upd;
	/**
	 * @var int
	 */
	public $_write;
	/**
	 * @var string
	 */
	public $id;
	/**
	 * @var string
	 */
	public $username;

	/**
	 * @return void
	 */
	public function __construct () {
		#server/jotun/gateway/database/objects/PA_User.hx:34: characters 3-10
		parent::__construct();
	}

	/**
	 * If user has read access to
	 * @param	flag
	 * @return
	 * 
	 * @param int $flag
	 * 
	 * @return bool
	 */
	public function canRead ($flag) {
		#server/jotun/gateway/database/objects/PA_User.hx:147: characters 3-33
		return Flag::FTest($this->_read, $flag);
	}

	/**
	 * If user has write access to
	 * @param	flag
	 * @return
	 * 
	 * @param int $flag
	 * 
	 * @return bool
	 */
	public function canWrite ($flag) {
		#server/jotun/gateway/database/objects/PA_User.hx:156: characters 3-34
		return Flag::FTest($this->_write, $flag);
	}

	/**
	 * Check if email is available
	 * @return
	 * 
	 * @return bool
	 */
	public function checkIfEmailAvailable () {
		#server/jotun/gateway/database/objects/PA_User.hx:130: characters 10-86
		if ($this->_email !== null) {
			#server/jotun/gateway/database/objects/PA_User.hx:130: characters 28-86
			return $this->get__database()->get_user()->length(Clause::EQUAL("_email", $this->_email)) === 0;
		} else {
			#server/jotun/gateway/database/objects/PA_User.hx:130: characters 10-86
			return false;
		}
	}

	/**
	 * Check if username is available
	 * @return
	 * 
	 * @return bool
	 */
	public function checkIfUsernameValid () {
		#server/jotun/gateway/database/objects/PA_User.hx:138: characters 10-50
		if ($this->username !== null) {
			#server/jotun/gateway/database/objects/PA_User.hx:138: characters 30-50
			return mb_strlen($this->username) >= 2;
		} else {
			#server/jotun/gateway/database/objects/PA_User.hx:138: characters 10-50
			return false;
		}
	}

	/**
	 * Load properties from input
	 * 
	 * @return void
	 */
	public function loadFromInput () {
		#server/jotun/gateway/database/objects/PA_User.hx:113: lines 113-116
		if ($this->id === null) {
			#server/jotun/gateway/database/objects/PA_User.hx:114: characters 4-37
			$this->username = Boot::dynamicField($this->get__input()->object, 'username');
			#server/jotun/gateway/database/objects/PA_User.hx:115: characters 4-30
			$this->_ctd = Omnitools::timeNow();
		}
		#server/jotun/gateway/database/objects/PA_User.hx:118: characters 3-31
		$this->_email = Boot::dynamicField($this->get__input()->object, 'email');
		#server/jotun/gateway/database/objects/PA_User.hx:119: characters 3-67
		$this->_flags = Utils::getValidOne(\Std::parseInt(Boot::dynamicField($this->get__input()->object, 'flags')), 0);
		#server/jotun/gateway/database/objects/PA_User.hx:120: characters 3-65
		$this->_read = Utils::getValidOne(\Std::parseInt(Boot::dynamicField($this->get__input()->object, 'read')), 0);
		#server/jotun/gateway/database/objects/PA_User.hx:121: characters 3-67
		$this->_write = Utils::getValidOne(\Std::parseInt(Boot::dynamicField($this->get__input()->object, 'write')), 0);
	}

	/**
	 * Create user if not exists
	 * @return
	 * 
	 * @return bool
	 */
	public function save () {
		#server/jotun/gateway/database/objects/PA_User.hx:42: characters 3-27
		$error_count = 0;
		#server/jotun/gateway/database/objects/PA_User.hx:44: lines 44-104
		if ($this->id === null) {
			#server/jotun/gateway/database/objects/PA_User.hx:46: lines 46-52
			if (!Validator::email($this->_email)) {
				#server/jotun/gateway/database/objects/PA_User.hx:47: characters 5-37
				$this->_error(100);
				#server/jotun/gateway/database/objects/PA_User.hx:48: characters 5-18
				++$error_count;
			} else if (!$this->checkIfEmailAvailable()) {
				#server/jotun/gateway/database/objects/PA_User.hx:50: characters 5-44
				$this->_error(101);
				#server/jotun/gateway/database/objects/PA_User.hx:51: characters 5-18
				++$error_count;
			}
			#server/jotun/gateway/database/objects/PA_User.hx:54: lines 54-57
			if (!Validator::name($this->username)) {
				#server/jotun/gateway/database/objects/PA_User.hx:55: characters 5-40
				$this->_error(110);
				#server/jotun/gateway/database/objects/PA_User.hx:56: characters 5-18
				++$error_count;
			}
			#server/jotun/gateway/database/objects/PA_User.hx:59: lines 59-62
			if (!Validator::password(Boot::dynamicField($this->get__input()->object, 'pwd'))) {
				#server/jotun/gateway/database/objects/PA_User.hx:60: characters 5-40
				$this->_error(120);
				#server/jotun/gateway/database/objects/PA_User.hx:61: characters 5-18
				++$error_count;
			}
			#server/jotun/gateway/database/objects/PA_User.hx:64: lines 64-90
			if ($error_count === 0) {
				#server/jotun/gateway/database/objects/PA_User.hx:65: characters 5-66
				$pwd = Packager::md5Encode(Boot::dynamicField($this->get__input()->object, 'pwd'), true);
				#server/jotun/gateway/database/objects/PA_User.hx:66: characters 5-36
				$this->id = Omnitools::genRandomIDx65();
				#server/jotun/gateway/database/objects/PA_User.hx:67: characters 5-31
				$this->_ctd = Omnitools::timeNow();
				#server/jotun/gateway/database/objects/PA_User.hx:68: lines 68-89
				if ($this->get__database()->get_user_password()->add(new HxAnon([
					"_uid" => $this->id,
					"_key" => $pwd,
					"_upd" => $this->_ctd,
				]))->success) {
					#server/jotun/gateway/database/objects/PA_User.hx:73: lines 73-86
					if ($this->get__database()->get_user()->add(new HxAnon([
						"id" => $this->id,
						"_email" => $this->_email,
						"username" => $this->username,
						"_flags" => $this->_flags,
						"_read" => $this->_read,
						"_write" => $this->_write,
						"_ctd" => $this->_ctd,
						"_upd" => $this->_ctd,
					]))->success) {
						#server/jotun/gateway/database/objects/PA_User.hx:83: characters 7-18
						return true;
					} else {
						#server/jotun/gateway/database/objects/PA_User.hx:85: characters 7-52
						return $this->_error(1000);
					}
				} else {
					#server/jotun/gateway/database/objects/PA_User.hx:88: characters 6-48
					return $this->_error(120);
				}
			}
		} else {
			#server/jotun/gateway/database/objects/PA_User.hx:93: characters 4-30
			$this->_upd = Omnitools::timeNow();
			#server/jotun/gateway/database/objects/PA_User.hx:94: lines 94-102
			if ($this->get__database()->get_user()->updateOne(new HxAnon([
				"_email" => $this->_email,
				"_flags" => $this->_flags,
				"_upd" => $this->_upd,
			]), Clause::ID($this->id))->success) {
				#server/jotun/gateway/database/objects/PA_User.hx:99: characters 5-16
				return true;
			} else {
				#server/jotun/gateway/database/objects/PA_User.hx:101: characters 5-48
				return $this->_error(1020);
			}
		}
		#server/jotun/gateway/database/objects/PA_User.hx:105: characters 3-15
		return false;
	}
}

Boot::registerClass(PA_User::class, 'jotun.gateway.database.objects.PA_User');
