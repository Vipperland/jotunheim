<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\gateway\domain\zones;

use \php\_Boot\HxDynamicStr;
use \jotun\gateway\domain\zones\pass\ZonePass;
use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\utils\Dice;
use \jotun\gateway\domain\DomainServices;
use \php\_Boot\HxString;

/**
 * ...
 * @author
 */
class ZoneServices extends DomainServices {
	/**
	 * @var mixed
	 */
	public $_defaultMap;
	/**
	 * @var string
	 */
	public $_name;
	/**
	 * @var ZoneServices
	 */
	public $_parent;
	/**
	 * @var ZonePass
	 */
	public $_pass;
	/**
	 * @var int
	 */
	public $_readFlag;
	/**
	 * @var mixed
	 */
	public $_value;
	/**
	 * @var int
	 */
	public $_writeFlag;
	/**
	 * @var ZoneServices
	 */
	public $_zone;
	/**
	 * @var string
	 */
	public $name;
	/**
	 * @var ZoneServices
	 */
	public $parent;
	/**
	 * @var mixed
	 */
	public $value;
	/**
	 * @var ZoneServices
	 */
	public $zone;

	/**
	 * @param ZonePass $pass
	 * 
	 * @return void
	 */
	public function __construct ($pass = null) {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:19: lines 19-21
		$this->_defaultMap = new HxAnon(["*" => Boot::getClass(NotFoundZone::class)]);
		#server/jotun/gateway/domain/zones/ZoneServices.hx:53: characters 11-66
		$_this = HxString::split(\Type::getClassName(\Type::getClass($this)), ".");
		if ($_this->length > 0) {
			$_this->length--;
		}
		#server/jotun/gateway/domain/zones/ZoneServices.hx:53: characters 3-66
		$this->_name = \array_pop($_this->arr);
		#server/jotun/gateway/domain/zones/ZoneServices.hx:54: characters 3-15
		$this->_pass = $pass;
		#server/jotun/gateway/domain/zones/ZoneServices.hx:55: characters 3-18
		$this->_buildZoneMap();
		#server/jotun/gateway/domain/zones/ZoneServices.hx:56: characters 3-10
		parent::__construct();
	}

	/**
	 * @return void
	 */
	public function _buildZoneMap () {
	}

	/**
	 * @param string $zoneName
	 * 
	 * @return void
	 */
	public function _buildup ($zoneName) {
	}

	/**
	 * @param string[]|\Array_hx $data
	 * 
	 * @return void
	 */
	public function _execute ($data) {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:106: lines 106-108
		if ($this->_defaultMap !== null) {
			#server/jotun/gateway/domain/zones/ZoneServices.hx:107: characters 4-39
			$this->error(403);
		}
	}

	/**
	 * @param string[]|\Array_hx $data
	 * 
	 * @return mixed
	 */
	public function _prefab ($data) {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:93: lines 93-101
		if ($data->length > 0) {
			#server/jotun/gateway/domain/zones/ZoneServices.hx:94: characters 4-30
			$name = ($data->arr[0] ?? null);
			#server/jotun/gateway/domain/zones/ZoneServices.hx:95: characters 4-35
			$map = $this->getZoneMap();
			#server/jotun/gateway/domain/zones/ZoneServices.hx:96: lines 96-100
			if (\Reflect::hasField($map, $name)) {
				#server/jotun/gateway/domain/zones/ZoneServices.hx:97: characters 5-36
				return \Reflect::field($map, $name);
			} else if (\Reflect::hasField($map, "*")) {
				#server/jotun/gateway/domain/zones/ZoneServices.hx:99: characters 5-35
				return \Reflect::field($map, "*");
			}
		}
		#server/jotun/gateway/domain/zones/ZoneServices.hx:102: characters 3-14
		return null;
	}

	/**
	 * @param ZoneServices $parent
	 * 
	 * @return void
	 */
	final public function _setParent ($parent) {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:78: characters 3-19
		$this->_parent = $parent;
	}

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	final public function _setZoneMap ($data) {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:71: lines 71-75
		$_gthis = $this;
		#server/jotun/gateway/domain/zones/ZoneServices.hx:72: lines 72-74
		Dice::All($data, function ($p, $v) use (&$_gthis) {
			#server/jotun/gateway/domain/zones/ZoneServices.hx:73: characters 4-39
			\Reflect::setField($_gthis->_defaultMap, $p, $v);
		});
	}

	/**
	 * @param ZoneServices $parent
	 * @param string[]|\Array_hx $data
	 * 
	 * @return ZoneServices
	 */
	final public function carry ($parent, $data) {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:112: characters 3-21
		$this->_setParent($parent);
		#server/jotun/gateway/domain/zones/ZoneServices.hx:113: characters 3-35
		$Def = $this->_prefab($data);
		#server/jotun/gateway/domain/zones/ZoneServices.hx:114: lines 114-139
		if ($this->hasValidPass()) {
			#server/jotun/gateway/domain/zones/ZoneServices.hx:115: lines 115-130
			if ($Def !== null) {
				#server/jotun/gateway/domain/zones/ZoneServices.hx:116: characters 27-39
				if ($data->length > 0) {
					$data->length--;
				}
				#server/jotun/gateway/domain/zones/ZoneServices.hx:116: characters 5-40
				$ZoneName = \array_shift($data->arr);
				#server/jotun/gateway/domain/zones/ZoneServices.hx:117: characters 5-34
				$this->_zone = new $Def->phpClassName();
				#server/jotun/gateway/domain/zones/ZoneServices.hx:118: characters 5-29
				$this->_zone->_buildup($ZoneName);
				#server/jotun/gateway/domain/zones/ZoneServices.hx:119: characters 5-59
				$this->get_output()->log(($this->toString()??'null') . "->carry('" . ($ZoneName??'null') . "')");
				#server/jotun/gateway/domain/zones/ZoneServices.hx:120: characters 5-28
				$this->_zone->carry($this, $data);
				#server/jotun/gateway/domain/zones/ZoneServices.hx:121: characters 5-17
				return $this->_zone;
			} else {
				#server/jotun/gateway/domain/zones/ZoneServices.hx:123: lines 123-127
				if ($data->length > 0) {
					#server/jotun/gateway/domain/zones/ZoneServices.hx:124: characters 6-56
					$this->get_output()->log(($this->toString()??'null') . "->execute(" . \Std::string($data) . ")");
				} else {
					#server/jotun/gateway/domain/zones/ZoneServices.hx:126: characters 6-44
					$this->get_output()->log(($this->toString()??'null') . "->execute()");
				}
				#server/jotun/gateway/domain/zones/ZoneServices.hx:128: characters 5-19
				$this->_execute($data);
				#server/jotun/gateway/domain/zones/ZoneServices.hx:129: characters 5-16
				return $this;
			}
		} else {
			#server/jotun/gateway/domain/zones/ZoneServices.hx:132: characters 4-114
			$this->get_output()->log(($this->toString()??'null') . "->" . ((($Def !== null ? "carry" : "execute"))??'null') . "(UNAUTORIZED " . ($this->_pass->toString()??'null') . ")");
			#server/jotun/gateway/domain/zones/ZoneServices.hx:133: lines 133-137
			if ($this->get_input()->isAuthenticated()) {
				#server/jotun/gateway/domain/zones/ZoneServices.hx:134: characters 5-43
				$this->error(401);
			} else {
				#server/jotun/gateway/domain/zones/ZoneServices.hx:136: characters 5-37
				$this->error(2);
			}
			#server/jotun/gateway/domain/zones/ZoneServices.hx:138: characters 4-15
			return null;
		}
	}

	/**
	 * @return mixed
	 */
	public function getZoneMap () {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:85: characters 3-21
		return $this->_defaultMap;
	}

	/**
	 * @return string
	 */
	public function get_name () {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:31: characters 3-15
		return $this->_name;
	}

	/**
	 * @return ZoneServices
	 */
	public function get_parent () {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:43: characters 3-17
		return $this->_parent;
	}

	/**
	 * @return mixed
	 */
	public function get_value () {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:49: characters 3-16
		return $this->_value;
	}

	/**
	 * @return ZoneServices
	 */
	public function get_zone () {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:37: characters 3-15
		return $this->_zone;
	}

	/**
	 * @return bool
	 */
	final public function hasValidPass () {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:68: characters 10-107
		if (!(($this->_pass === null) || ($this->get_input()->isAuthenticated() && $this->_pass->isCarrier()))) {
			#server/jotun/gateway/domain/zones/ZoneServices.hx:68: characters 77-107
			return $this->get_input()->hasAuthentication($this->_pass);
		} else {
			#server/jotun/gateway/domain/zones/ZoneServices.hx:68: characters 10-107
			return true;
		}
	}

	/**
	 * @return bool
	 */
	final public function isPassRequired () {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:64: characters 3-23
		return $this->_pass !== null;
	}

	/**
	 * @return void
	 */
	final public function setEndZone () {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:60: characters 3-21
		$this->_defaultMap = null;
	}

	/**
	 * @return string
	 */
	public function toString () {
		#server/jotun/gateway/domain/zones/ZoneServices.hx:143: characters 3-23
		$val = "";
		#server/jotun/gateway/domain/zones/ZoneServices.hx:144: lines 144-154
		if ($this->_value !== null) {
			#server/jotun/gateway/domain/zones/ZoneServices.hx:145: lines 145-153
			if (!($this->_value instanceof \Array_hx) && !is_string($this->_value) && !(is_float($this->_value) || is_int($this->_value)) && !is_bool($this->_value)) {
				#server/jotun/gateway/domain/zones/ZoneServices.hx:146: lines 146-150
				if (\Reflect::hasField($this->_value, "toString")) {
					#server/jotun/gateway/domain/zones/ZoneServices.hx:147: characters 6-29
					$val = HxDynamicStr::wrap($this->_value)->toString();
				} else {
					#server/jotun/gateway/domain/zones/ZoneServices.hx:149: characters 12-69
					$_this = HxString::split(\Type::getClassName(\Type::getClass($this->_value)), ".");
					if ($_this->length > 0) {
						$_this->length--;
					}
					$val = \array_pop($_this->arr);
				}
			} else {
				#server/jotun/gateway/domain/zones/ZoneServices.hx:152: characters 5-17
				$val = $this->_value;
			}
		}
		#server/jotun/gateway/domain/zones/ZoneServices.hx:155: characters 3-33
		return ($this->_name??'null') . "[" . ($val??'null') . "]";
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(ZoneServices::class, 'jotun.gateway.domain.zones.ZoneServices');
Boot::registerGetters('jotun\\gateway\\domain\\zones\\ZoneServices', [
	'value' => true,
	'parent' => true,
	'zone' => true,
	'name' => true
]);
