<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\gateway\domain;

use \php\_Boot\HxDynamicStr;
use \php\Boot;
use \jotun\Jotun;

/**
 * ...
 * @author
 */
class Output {
	/**
	 * @var Output
	 */
	static public $_instance;

	/**
	 * @var mixed
	 */
	public $_data;
	/**
	 * @var bool
	 */
	public $_log;

	/**
	 * @return Output
	 */
	public static function getInstance () {
		#src+extras/gateway/jotun/gateway/domain/Output.hx:15: characters 3-19
		return Output::$_instance;
	}

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($data) {
		#src+extras/gateway/jotun/gateway/domain/Output.hx:23: lines 23-25
		if (Output::$_instance !== null) {
			#src+extras/gateway/jotun/gateway/domain/Output.hx:24: characters 4-9
			throw new \ErrorException("gateway.Output is a Singleton");
		}
		#src+extras/gateway/jotun/gateway/domain/Output.hx:26: characters 3-19
		Output::$_instance = $this;
		#src+extras/gateway/jotun/gateway/domain/Output.hx:27: characters 3-15
		$this->_data = $data;
	}

	/**
	 * @return void
	 */
	public function enableLog () {
		#src+extras/gateway/jotun/gateway/domain/Output.hx:39: characters 3-14
		$this->_log = true;
	}

	/**
	 * @param int $code
	 * @param bool $check
	 * 
	 * @return void
	 */
	public function error ($code, $check = false) {
		#src+extras/gateway/jotun/gateway/domain/Output.hx:49: lines 49-51
		if ($check === null) {
			$check = false;
		}
		if (!$check || !$this->hasError($code)) {
			#src+extras/gateway/jotun/gateway/domain/Output.hx:50: characters 4-29
			$this->list("errors")->push($code);
		}
	}

	/**
	 * @return void
	 */
	public function flush () {
	}

	/**
	 * @param int $code
	 * 
	 * @return bool
	 */
	public function hasError ($code) {
		#src+extras/gateway/jotun/gateway/domain/Output.hx:55: characters 3-44
		return !Boot::equal(HxDynamicStr::wrap($this->list("errors"))->indexOf($code), -1);
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function list ($name) {
		#src+extras/gateway/jotun/gateway/domain/Output.hx:35: characters 3-14
		return null;
	}

	/**
	 * @param mixed $message
	 * @param string $list
	 * 
	 * @return void
	 */
	public function log ($message, $list = "trace") {
		#src+extras/gateway/jotun/gateway/domain/Output.hx:43: lines 43-45
		if ($list === null) {
			$list = "trace";
		}
		if ($this->_log) {
			#src+extras/gateway/jotun/gateway/domain/Output.hx:44: characters 4-33
			$this->list($list)->push($message);
		}
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function object ($name) {
		#src+extras/gateway/jotun/gateway/domain/Output.hx:31: characters 3-14
		return null;
	}

	/**
	 * @param string $token
	 * 
	 * @return void
	 */
	public function registerOAuth ($token) {
		#src+extras/gateway/jotun/gateway/domain/Output.hx:62: characters 3-31
		Jotun::$header->setOAuth($token);
	}
}

Boot::registerClass(Output::class, 'jotun.gateway.domain.Output');
