<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\gateway\domain;

use \php\_Boot\HxDynamicStr;
use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\gateway\utils\Omnitools;
use \jotun\Jotun;

/**
 * ...
 * @author
 */
class Output {
	/**
	 * @var Output
	 */
	static public $ME;

	/**
	 * @var mixed
	 */
	public $_data;
	/**
	 * @var bool
	 */
	public $_log;

	/**
	 * @return Output
	 */
	public static function get_ME () {
		#server/jotun/gateway/domain/Output.hx:15: lines 15-17
		if (Output::$ME === null) {
			#server/jotun/gateway/domain/Output.hx:16: characters 4-21
			Output::$ME = new Output();
		}
		#server/jotun/gateway/domain/Output.hx:18: characters 3-12
		return Output::$ME;
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#server/jotun/gateway/domain/Output.hx:26: characters 3-14
		$this->_data = new HxAnon();
	}

	/**
	 * @return void
	 */
	public function enableLog () {
		#server/jotun/gateway/domain/Output.hx:44: characters 3-14
		$this->_log = true;
		#server/jotun/gateway/domain/Output.hx:45: lines 45-50
		if (Input::get_ME()->hasAnyParam() || (Input::get_ME()->object !== null)) {
			#server/jotun/gateway/domain/Output.hx:47: characters 13-60
			$tmp = (Input::get_ME()->hasAnyParam() ? Input::get_ME()->params : null);
			#server/jotun/gateway/domain/Output.hx:46: lines 46-49
			$this->_data->input = new HxAnon([
				"params" => $tmp,
				"json" => Input::get_ME()->object,
			]);
		}
		#server/jotun/gateway/domain/Output.hx:51: characters 3-17
		$this->list("errors");
	}

	/**
	 * @param int $code
	 * 
	 * @return void
	 */
	public function error ($code) {
		#server/jotun/gateway/domain/Output.hx:61: characters 3-28
		$this->list("errors")->push($code);
	}

	/**
	 * @return void
	 */
	public function flush () {
		#server/jotun/gateway/domain/Output.hx:69: characters 3-35
		$this->_data->time = Omnitools::timeNow();
		#server/jotun/gateway/domain/Output.hx:70: lines 70-72
		if (Jotun::$gate->isLogEnabled()) {
			#server/jotun/gateway/domain/Output.hx:71: characters 4-35
			$this->_data->database = Jotun::$gate->get_log();
		}
		#server/jotun/gateway/domain/Output.hx:73: characters 3-30
		Jotun::$header->setJSON($this->_data);
	}

	/**
	 * @param int $code
	 * 
	 * @return bool
	 */
	public function hasError ($code) {
		#server/jotun/gateway/domain/Output.hx:65: characters 3-44
		return !Boot::equal(HxDynamicStr::wrap($this->list("errors"))->indexOf($code), -1);
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function list ($name) {
		#server/jotun/gateway/domain/Output.hx:37: lines 37-39
		if (!\Reflect::hasField($this->_data, $name)) {
			#server/jotun/gateway/domain/Output.hx:38: characters 4-37
			\Reflect::setField($this->_data, $name, new \Array_hx());
		}
		#server/jotun/gateway/domain/Output.hx:40: characters 3-36
		return \Reflect::field($this->_data, $name);
	}

	/**
	 * @param mixed $message
	 * 
	 * @return void
	 */
	public function log ($message) {
		#server/jotun/gateway/domain/Output.hx:55: lines 55-57
		if ($this->_log) {
			#server/jotun/gateway/domain/Output.hx:56: characters 4-31
			$this->list("trace")->push($message);
		}
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function object ($name) {
		#server/jotun/gateway/domain/Output.hx:30: lines 30-32
		if (!\Reflect::hasField($this->_data, $name)) {
			#server/jotun/gateway/domain/Output.hx:31: characters 4-37
			\Reflect::setField($this->_data, $name, new HxAnon());
		}
		#server/jotun/gateway/domain/Output.hx:33: characters 3-36
		return \Reflect::field($this->_data, $name);
	}

	/**
	 * @param string $token
	 * 
	 * @return void
	 */
	public function registerOAuth ($token) {
		#server/jotun/gateway/domain/Output.hx:77: characters 3-31
		Jotun::$header->setOAuth($token);
	}
}

Boot::registerClass(Output::class, 'jotun.gateway.domain.Output');
Boot::registerGetters('jotun\\gateway\\domain\\Output', [
	'ME' => true
]);
