<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\gateway\domain;

use \php\_Boot\HxDynamicStr;
use \php\Boot;
use \jotun\logical\Flag;
use \jotun\Jotun;
use \jotun\gateway\objects\InputCoreCarrier;

/**
 * ...
 * @author
 */
class OutputCore extends InputCoreCarrier {
	/**
	 * @var OutputCore
	 */
	static public $_instance;

	/**
	 * @var int
	 */
	public $_chunk_size;
	/**
	 * @var mixed
	 */
	public $_data;
	/**
	 * @var bool
	 */
	public $_encode_out;
	/**
	 * @var bool
	 */
	public $_log;
	/**
	 * @var int
	 */
	public $_status;
	/**
	 * @var bool
	 */
	public $_stopped;

	/**
	 * @return OutputCore
	 */
	public static function getInstance () {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:18: characters 3-19
		return OutputCore::$_instance;
	}

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($data) {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:34: lines 34-36
		if (OutputCore::$_instance !== null) {
			#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:35: characters 4-9
			throw new \ErrorException("gateway.Output is a Singleton");
		}
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:37: characters 3-16
		$this->_status = 200;
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:38: characters 3-19
		OutputCore::$_instance = $this;
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:39: characters 3-15
		$this->_data = $data;
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:40: characters 3-10
		parent::__construct();
	}

	/**
	 * @param int $code
	 * @param bool $check
	 * 
	 * @return void
	 */
	public function error ($code, $check = false) {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:69: lines 69-71
		if ($check === null) {
			$check = false;
		}
		if (!$this->_stopped && (!$check || !$this->hasError($code))) {
			#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:70: characters 4-31
			$this->list("errors")->insert($code);
		}
	}

	/**
	 * @return void
	 */
	public function flush () {
	}

	/**
	 * @return int
	 */
	final public function getStatus () {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:83: characters 3-17
		return $this->_status;
	}

	/**
	 * @param int $code
	 * 
	 * @return bool
	 */
	final public function hasError ($code) {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:75: characters 3-44
		return !Boot::equal(HxDynamicStr::wrap($this->list("errors"))->indexOf($code), -1);
	}

	/**
	 * @return bool
	 */
	final public function isLogEnabled () {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:98: characters 3-22
		return $this->_log === true;
	}

	/**
	 * @return bool
	 */
	final public function isStopped () {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:94: characters 3-26
		return $this->_stopped === true;
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function list ($name) {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:53: characters 3-14
		return null;
	}

	/**
	 * @param mixed $message
	 * @param string $list
	 * 
	 * @return void
	 */
	public function log ($message, $list = "trace") {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:63: lines 63-65
		if ($list === null) {
			$list = "trace";
		}
		if ($this->_log) {
			#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:64: characters 4-35
			$this->list($list)->insert($message);
		}
	}

	/**
	 * @param bool $output
	 * @param int $chunk
	 * 
	 * @return void
	 */
	final public function mode ($output, $chunk = 40) {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:43: lines 43-46
		if ($chunk === null) {
			$chunk = 40;
		}
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:44: characters 3-23
		$this->_encode_out = $output;
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:45: characters 3-22
		$this->_chunk_size = $chunk;
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function object ($name) {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:49: characters 3-14
		return null;
	}

	/**
	 * @param string $token
	 * 
	 * @return void
	 */
	public function registerOAuth ($token) {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:90: characters 3-31
		Jotun::$header->setOAuth($token);
	}

	/**
	 * @param int $value
	 * 
	 * @return void
	 */
	public function setOptions ($value) {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:57: lines 57-59
		if (Flag::FTest($value, 1)) {
			#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:58: characters 4-15
			$this->_log = true;
		}
	}

	/**
	 * @param int $code
	 * 
	 * @return void
	 */
	final public function setStatus ($code) {
		#src+extras/gateway/jotun/gateway/domain/OutputCore.hx:79: characters 3-17
		$this->_status = $code;
	}
}

Boot::registerClass(OutputCore::class, 'jotun.gateway.domain.OutputCore');
