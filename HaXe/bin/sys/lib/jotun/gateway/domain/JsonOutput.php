<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\gateway\domain;

use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\utils\Omnitools;
use \jotun\logical\Flag;
use \jotun\Jotun;
use \jotun\gateway\domain\_JsonOutput\ObjectManipulator;

/**
 * ...
 * @author Rafael Moreira
 */
class JsonOutput extends OutputCore {
	/**
	 * @var mixed
	 */
	public $_manipulators;

	/**
	 * @return void
	 */
	public function __construct () {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:17: characters 3-12
		parent::__construct(new HxAnon());
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:18: characters 3-21
		$this->_manipulators = new HxAnon();
	}

	/**
	 * @return void
	 */
	public function flush () {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:50: characters 3-25
		$this->_data->status = $this->_status;
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:51: characters 3-35
		$this->_data->time = Omnitools::timeNow();
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:52: characters 3-56
		Jotun::$header->setJSON($this->_data, $this->_encode_out, $this->_chunk_size);
	}

	/**
	 * @param string $name
	 * 
	 * @return ObjectManipulator
	 */
	public function list ($name) {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:41: lines 41-45
		if (!\Reflect::hasField($this->_data, $name)) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:42: characters 4-30
			$o = new \Array_hx();
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:43: characters 4-36
			\Reflect::setField($this->_data, $name, $o);
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:44: characters 4-73
			\Reflect::setField($this->_manipulators, $name, new ObjectManipulator($o, true));
		}
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:46: characters 3-44
		return \Reflect::field($this->_manipulators, $name);
	}

	/**
	 * @param string $name
	 * 
	 * @return ObjectManipulator
	 */
	public function object ($name) {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:32: lines 32-36
		if (!\Reflect::hasField($this->_data, $name)) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:33: characters 4-23
			$o = new HxAnon();
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:34: characters 4-36
			\Reflect::setField($this->_data, $name, $o);
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:35: characters 4-74
			\Reflect::setField($this->_manipulators, $name, new ObjectManipulator($o, false));
		}
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:37: characters 3-44
		return \Reflect::field($this->_manipulators, $name);
	}

	/**
	 * @param int $value
	 * 
	 * @return void
	 */
	public function setOptions ($value) {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:22: lines 22-27
		if (Flag::FTest($value, 2)) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:24: characters 13-90
			$tmp = (InputCore::getInstance()->hasAnyParam() ? InputCore::getInstance()->params : null);
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:23: lines 23-26
			$this->_data->input = new HxAnon([
				"params" => $tmp,
				"json" => InputCore::getInstance()->object,
			]);
		}
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:28: characters 3-26
		parent::setOptions($value);
	}
}

Boot::registerClass(JsonOutput::class, 'jotun.gateway.domain.JsonOutput');
