<?php
/**
 * Generated by Haxe 4.3.4
 */

namespace jotun\gateway\domain;

use \jotun\gateway\domain\zones\pass\ZonePass;
use \php\Boot;
use \jotun\Jotun;
use \jotun\utils\Dice;
use \haxe\Json;
use \jotun\gateway\domain\zones\pass\IPassCarrier;

/**
 * ...
 * @author
 */
class InputCore {
	/**
	 * @var InputCore
	 */
	static public $_instance;

	/**
	 * @var IPassCarrier
	 */
	public $carrier;
	/**
	 * @var mixed
	 */
	public $object;
	/**
	 * @var mixed
	 */
	public $params;

	/**
	 * @return InputCore
	 */
	public static function getInstance () {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:21: characters 3-19
		return InputCore::$_instance;
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:36: lines 36-38
		if (InputCore::$_instance !== null) {
			#src+extras/gateway/jotun/gateway/domain/InputCore.hx:37: characters 4-9
			throw new \ErrorException("gateway.Input is a Singleton");
		}
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:39: characters 3-19
		InputCore::$_instance = $this;
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:40: characters 3-31
		$this->params = Jotun::$domain->params;
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:41: characters 3-30
		$this->object = Jotun::$domain->input;
	}

	/**
	 * @return string
	 */
	final public function getInput () {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:51: characters 3-33
		return Jotun::$domain->getInput();
	}

	/**
	 * @return string
	 */
	final public function getInputJson () {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:55: characters 10-45
		return Json::phpJsonDecode(Jotun::$domain->getInput());
	}

	/**
	 * @return IPassCarrier
	 */
	public function get_carrier () {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:31: characters 3-22
		return $this->carrier;
	}

	/**
	 * @return bool
	 */
	final public function hasAnyParam () {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:45: lines 45-47
		return !Dice::Params($this->params, function ($p) {
			#src+extras/gateway/jotun/gateway/domain/InputCore.hx:46: characters 4-15
			return true;
		})->completed;
	}

	/**
	 * @param ZonePass $pass
	 * 
	 * @return bool
	 */
	final public function hasAuthentication ($pass) {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:63: characters 10-50
		if ($this->hasPass()) {
			#src+extras/gateway/jotun/gateway/domain/InputCore.hx:63: characters 23-50
			return $pass->validate($this->get_carrier());
		} else {
			#src+extras/gateway/jotun/gateway/domain/InputCore.hx:63: characters 10-50
			return false;
		}
	}

	/**
	 * @return bool
	 */
	final public function hasPass () {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:59: characters 3-30
		return $this->get_carrier() !== null;
	}

	/**
	 * @param string $q
	 * @param string $split
	 * 
	 * @return mixed[]|\Array_hx
	 */
	final public function paramAsArray ($q, $split = ",") {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:79: characters 3-45
		if ($split === null) {
			$split = ",";
		}
		return Jotun::$domain->paramAsArray($q, $split);
	}

	/**
	 * @param string $q
	 * 
	 * @return bool
	 */
	final public function paramAsBool ($q) {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:67: characters 3-37
		return Jotun::$domain->paramAsBool($q);
	}

	/**
	 * @param string $q
	 * 
	 * @return float
	 */
	final public function paramAsFloat ($q) {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:75: characters 3-38
		return Jotun::$domain->paramAsFloat($q);
	}

	/**
	 * @param string $q
	 * 
	 * @return int
	 */
	final public function paramAsInt ($q) {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:71: characters 3-36
		return Jotun::$domain->paramAsInt($q);
	}

	/**
	 * @param string $q
	 * 
	 * @return mixed
	 */
	final public function paramAsObject ($q) {
		#src+extras/gateway/jotun/gateway/domain/InputCore.hx:83: characters 3-39
		return Jotun::$domain->paramAsObject($q);
	}
}

Boot::registerClass(InputCore::class, 'jotun.gateway.domain.InputCore');
Boot::registerGetters('jotun\\gateway\\domain\\InputCore', [
	'carrier' => true
]);
