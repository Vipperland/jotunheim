<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\gateway\domain;

use \jotun\gateway\domain\zones\pass\ZonePass;
use \php\Boot;
use \jotun\Jotun;
use \jotun\utils\Dice;
use \jotun\gateway\domain\zones\pass\IPassCarrier;

/**
 * ...
 * @author
 */
class Input {
	/**
	 * @var Input
	 */
	static public $_instance;

	/**
	 * @var string
	 */
	public $_testToken;
	/**
	 * @var IPassCarrier
	 */
	public $carrier;
	/**
	 * @var mixed
	 */
	public $object;
	/**
	 * @var mixed
	 */
	public $params;

	/**
	 * @return Input
	 */
	public static function getInstance () {
		#src+extras/gateway/jotun/gateway/domain/Input.hx:20: characters 3-19
		return Input::$_instance;
	}

	/**
	 * @return void
	 */
	public function __construct () {
		#src+extras/gateway/jotun/gateway/domain/Input.hx:37: lines 37-39
		if (Input::$_instance !== null) {
			#src+extras/gateway/jotun/gateway/domain/Input.hx:38: characters 4-9
			throw new \ErrorException("gateway.Input is a Singleton");
		}
		#src+extras/gateway/jotun/gateway/domain/Input.hx:40: characters 3-19
		Input::$_instance = $this;
		#src+extras/gateway/jotun/gateway/domain/Input.hx:41: characters 3-31
		$this->params = Jotun::$domain->params;
		#src+extras/gateway/jotun/gateway/domain/Input.hx:42: characters 3-30
		$this->object = Jotun::$domain->input;
	}

	/**
	 * @return string
	 */
	final public function getInput () {
		#src+extras/gateway/jotun/gateway/domain/Input.hx:52: characters 3-33
		return Jotun::$domain->getInput();
	}

	/**
	 * @return string
	 */
	final public function getInputJson () {
		#src+extras/gateway/jotun/gateway/domain/Input.hx:56: characters 3-33
		return Jotun::$domain->getInput();
	}

	/**
	 * @return IPassCarrier
	 */
	public function get_carrier () {
		#src+extras/gateway/jotun/gateway/domain/Input.hx:32: characters 3-22
		return $this->carrier;
	}

	/**
	 * @return bool
	 */
	final public function hasAnyParam () {
		#src+extras/gateway/jotun/gateway/domain/Input.hx:46: lines 46-48
		return Dice::Params($this->params, function ($p) {
			#src+extras/gateway/jotun/gateway/domain/Input.hx:47: characters 4-15
			return true;
		})->param !== null;
	}

	/**
	 * @param ZonePass $pass
	 * 
	 * @return bool
	 */
	final public function hasAuthentication ($pass) {
		#src+extras/gateway/jotun/gateway/domain/Input.hx:64: characters 10-50
		if ($this->hasPass()) {
			#src+extras/gateway/jotun/gateway/domain/Input.hx:64: characters 23-50
			return $pass->validate($this->get_carrier());
		} else {
			#src+extras/gateway/jotun/gateway/domain/Input.hx:64: characters 10-50
			return false;
		}
	}

	/**
	 * @return bool
	 */
	final public function hasPass () {
		#src+extras/gateway/jotun/gateway/domain/Input.hx:60: characters 3-30
		return $this->get_carrier() !== null;
	}
}

Boot::registerClass(Input::class, 'jotun.gateway.domain.Input');
Boot::registerGetters('jotun\\gateway\\domain\\Input', [
	'carrier' => true
]);
