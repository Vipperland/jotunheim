<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\gateway\domain\_JsonOutput;

use \php\_Boot\HxDynamicStr;
use \php\Boot;
use \jotun\utils\Dice;

class ObjectManipulator {
	/**
	 * @var mixed
	 */
	public $data;
	/**
	 * @var bool
	 */
	public $indexable;

	/**
	 * @param mixed $data
	 * @param bool $indexable
	 * 
	 * @return void
	 */
	public function __construct ($data, $indexable) {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:74: characters 3-19
		$this->data = $data;
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:75: characters 3-29
		$this->indexable = $indexable;
	}

	/**
	 * @param mixed $obj
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	public function _test ($obj, $value) {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:114: lines 114-128
		$_gthis = $this;
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:115: lines 115-127
		return !Dice::Values($obj, function ($v) use (&$obj, &$_gthis, &$value) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:116: lines 116-126
			if ($v !== null) {
				#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:117: lines 117-123
				if ($_gthis->isIterable($v)) {
					#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:118: characters 6-23
					return Boot::equal($v, $value);
				} else if (\Reflect::hasField($_gthis->get_data(), "id")) {
					#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:120: characters 6-28
					return Boot::equal(Boot::dynamicField($obj, 'id'), $value);
				} else {
					#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:122: characters 6-28
					return $_gthis->_test($v, $value);
				}
			} else {
				#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:125: characters 5-17
				return false;
			}
		})->completed;
	}

	/**
	 * @param mixed $id
	 * @param bool $silent
	 * 
	 * @return mixed
	 */
	public function delete ($id, $silent = null) {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:90: lines 90-94
		if ($this->get_indexable()) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:91: characters 11-38
			$_this = Dice::Remove($this->get_data(), $id);
			if ($_this->length > 0) {
				$_this->length--;
			}
			return \array_pop($_this->arr);
		} else if (!$this->isIterable($id)) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:93: characters 4-33
			\Reflect::deleteField($this->get_data(), $id);
		}
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:95: characters 3-12
		return $id;
	}

	/**
	 * @param string $id
	 * 
	 * @return bool
	 */
	public function exists ($id) {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:131: characters 3-25
		return $this->_test($this->get_data(), $id);
	}

	/**
	 * @return mixed
	 */
	public function get_data () {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:66: characters 3-14
		return $this->data;
	}

	/**
	 * @return bool
	 */
	public function get_indexable () {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:60: characters 3-19
		return $this->indexable;
	}

	/**
	 * @param mixed $value
	 * 
	 * @return int
	 */
	public function indexOf ($value) {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:98: lines 98-112
		$_gthis = $this;
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:99: lines 99-111
		if ($this->get_indexable()) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:100: characters 4-30
			return HxDynamicStr::wrap($this->get_data())->indexOf($value);
		} else if ($this->isIterable($value)) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:102: lines 102-108
			if (Dice::Values($this->get_data(), function ($v) use (&$_gthis, &$value) {
				#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:103: lines 103-107
				if (\Reflect::hasField($_gthis->get_data(), "id")) {
					#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:104: characters 6-29
					return Boot::equal(Boot::dynamicField($_gthis->get_data(), 'id'), $value);
				} else {
					#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:106: characters 6-18
					return false;
				}
			})->completed) {
				#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:108: characters 19-21
				return -1;
			} else {
				#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:108: characters 24-25
				return 0;
			}
		} else {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:110: characters 4-13
			return -1;
		}
	}

	/**
	 * @param mixed $o
	 * 
	 * @return bool
	 */
	public function insert ($o) {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:79: lines 79-85
		if ($this->get_indexable()) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:80: characters 4-16
			$this->get_data()->push($o);
		} else if (\Reflect::hasField($o, "id")) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:82: characters 4-35
			\Reflect::setField($this->get_data(), Boot::dynamicField($o, 'id'), $o);
		} else {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:84: characters 4-16
			return false;
		}
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:86: characters 3-14
		return true;
	}

	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	public function isIterable ($value) {
		#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:70: characters 10-116
		if (($value !== null) && !is_string($value) && !(is_float($value) || is_int($value))) {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:70: characters 90-116
			return !is_bool($value);
		} else {
			#src+extras/gateway/jotun/gateway/domain/JsonOutput.hx:70: characters 10-116
			return false;
		}
	}
}

Boot::registerClass(ObjectManipulator::class, 'jotun.gateway.domain._JsonOutput.ObjectManipulator');
Boot::registerGetters('jotun\\gateway\\domain\\_JsonOutput\\ObjectManipulator', [
	'data' => true,
	'indexable' => true
]);
