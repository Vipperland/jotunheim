<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\php\file;

use \php\_Boot\HxAnon;
use \jotun\tools\Key;
use \php\Boot;
use \jotun\Jotun;
use \jotun\tools\Utils;
use \jotun\utils\Dice;
use \sys\io\File;
use \php\_Boot\HxString;
use \sys\FileSystem;

/**
 * ...
 * @author Rafael Moreira <rafael@gateofsirius.com>
 */
class Uploader {
	/**
	 * @var bool
	 */
	static public $_autoRename;
	/**
	 * @var mixed
	 */
	static public $_callbacks;
	/**
	 * @var \Closure
	 */
	static public $_log_method;
	/**
	 * @var string
	 */
	static public $_path = "/";
	/**
	 * @var mixed[]|\Array_hx
	 */
	static public $_sizes;
	/**
	 * @var FileCollection
	 */
	static public $files;

	/**
	 * @param Image $image
	 * 
	 * @return void
	 */
	public static function _delete ($image) {
		#src/jotun/php/file/Uploader.hx:200: characters 3-17
		$image->delete();
		#src/jotun/php/file/Uploader.hx:201: characters 3-18
		$image->dispose();
		#src/jotun/php/file/Uploader.hx:202: characters 3-35
		Uploader::_log("deleted", new HxAnon(["file" => $image]));
	}

	/**
	 * @param string $action
	 * @param mixed $message
	 * 
	 * @return void
	 */
	public static function _log ($action, $message) {
		#src/jotun/php/file/Uploader.hx:52: lines 52-54
		if (Uploader::$_log_method !== null) {
			#src/jotun/php/file/Uploader.hx:53: characters 4-32
			(Uploader::$_log_method)($action, $message);
		}
	}

	/**
	 * @param string $o
	 * @param string $p
	 * @param string $t
	 * 
	 * @return string
	 */
	public static function _rename ($o, $p, $t) {
		#src/jotun/php/file/Uploader.hx:206: characters 3-38
		$n = HxString::split($o, ".");
		#src/jotun/php/file/Uploader.hx:207: characters 18-25
		if ($n->length > 0) {
			$n->length--;
		}
		#src/jotun/php/file/Uploader.hx:207: characters 3-26
		$e = \array_pop($n->arr);
		#src/jotun/php/file/Uploader.hx:208: lines 208-210
		if ($p !== null) {
			#src/jotun/php/file/Uploader.hx:209: characters 4-19
			$n->offsetSet($n->length, $p);
		}
		#src/jotun/php/file/Uploader.hx:211: characters 3-28
		$n->arr[$n->length++] = ($t === null ? $e : $t);
		#src/jotun/php/file/Uploader.hx:212: characters 3-21
		return $n->join(".");
	}

	/**
	 * @return void
	 */
	public static function _verify () {
		#src/jotun/php/file/Uploader.hx:93: characters 3-30
		$partName = null;
		#src/jotun/php/file/Uploader.hx:94: characters 3-30
		$lastFile = null;
		#src/jotun/php/file/Uploader.hx:95: characters 3-36
		$fileStream = null;
		#src/jotun/php/file/Uploader.hx:98: lines 98-133
		Jotun::$domain->parseFiles(function ($part, $name) use (&$partName, &$fileStream, &$lastFile) {
			#src/jotun/php/file/Uploader.hx:101: lines 101-125
			if (Utils::isValid($name)) {
				#src/jotun/php/file/Uploader.hx:102: lines 102-122
				if (($name !== null) && ($lastFile !== $name)) {
					#src/jotun/php/file/Uploader.hx:103: characters 7-22
					$partName = $part;
					#src/jotun/php/file/Uploader.hx:104: characters 7-22
					$lastFile = $name;
					#src/jotun/php/file/Uploader.hx:106: lines 106-108
					if ($fileStream !== null) {
						#src/jotun/php/file/Uploader.hx:107: characters 8-26
						$fileStream->close();
					}
					#src/jotun/php/file/Uploader.hx:110: characters 24-45
					$_this = HxString::split($name, ".");
					if ($_this->length > 0) {
						$_this->length--;
					}
					#src/jotun/php/file/Uploader.hx:110: characters 7-46
					$ext = \array_pop($_this->arr);
					#src/jotun/php/file/Uploader.hx:111: characters 7-31
					$nName = null;
					#src/jotun/php/file/Uploader.hx:112: lines 112-116
					if ((Uploader::$_callbacks !== null) && \Reflect::hasField(Uploader::$_callbacks, $ext)) {
						#src/jotun/php/file/Uploader.hx:113: characters 8-47
						$nName = \Reflect::field(Uploader::$_callbacks, $ext)($part, $name);
					} else if (Uploader::$_autoRename) {
						#src/jotun/php/file/Uploader.hx:115: characters 30-40
						$nName1 = null;
						if (Jotun::$time === null) {
							$nName1 = "null";
						} else {
							$int = Jotun::$time;
							$nName1 = \Std::string(($int < 0 ? 4294967296.0 + $int : $int + 0.0));
						}
						#src/jotun/php/file/Uploader.hx:115: characters 30-71
						$nName = ($nName1??'null') . "_" . (Key::GEN(8)??'null') . "." . ($ext??'null');
					} else {
						#src/jotun/php/file/Uploader.hx:115: characters 74-78
						$nName = $name;
					}
					#src/jotun/php/file/Uploader.hx:118: characters 7-51
					$fileStream = File::write((Uploader::$_path??'null') . ($nName??'null'), true);
					#src/jotun/php/file/Uploader.hx:119: characters 7-58
					$file = new FileInfo($ext, $name, $nName);
					#src/jotun/php/file/Uploader.hx:120: characters 7-28
					Uploader::$files->add($part, $file);
					#src/jotun/php/file/Uploader.hx:121: characters 7-29
					Uploader::_log("uploaded", $file);
				}
			} else {
				#src/jotun/php/file/Uploader.hx:124: characters 6-23
				$fileStream = null;
			}
		}, function ($bytes, $pos, $len) use (&$fileStream) {
			#src/jotun/php/file/Uploader.hx:129: lines 129-131
			if ($fileStream !== null) {
				#src/jotun/php/file/Uploader.hx:130: characters 6-51
				$fileStream->writeBytes($bytes, 0, $bytes->length);
			}
		});
		#src/jotun/php/file/Uploader.hx:136: lines 136-138
		if ($fileStream !== null) {
			#src/jotun/php/file/Uploader.hx:137: characters 4-22
			$fileStream->close();
		}
		#src/jotun/php/file/Uploader.hx:141: lines 141-195
		if (Uploader::$_sizes !== null) {
			#src/jotun/php/file/Uploader.hx:142: characters 4-34
			$image = new Image();
			#src/jotun/php/file/Uploader.hx:143: lines 143-194
			Dice::Values(Uploader::$files->list, function ($v) use (&$image) {
				#src/jotun/php/file/Uploader.hx:144: lines 144-193
				if ($v->get_image()) {
					#src/jotun/php/file/Uploader.hx:145: characters 6-18
					$v->sizes = new \Array_hx();
					#src/jotun/php/file/Uploader.hx:146: characters 6-25
					$delete = false;
					#src/jotun/php/file/Uploader.hx:150: lines 150-188
					Dice::All(Uploader::$_sizes, function ($p, $resizeRule) use (&$delete, &$v, &$image) {
						#src/jotun/php/file/Uploader.hx:152: characters 7-39
						$o = (Uploader::$_path??'null') . ($v->output??'null');
						#src/jotun/php/file/Uploader.hx:154: characters 7-20
						$image->open($o);
						#src/jotun/php/file/Uploader.hx:156: characters 7-51
						$create = Boot::dynamicField($resizeRule, 'create') === true;
						#src/jotun/php/file/Uploader.hx:157: characters 7-137
						$resize = (Boot::dynamicField($resizeRule, 'width') !== null) && (Boot::dynamicField($resizeRule, 'height') !== null) && $image->isOutBounds(Boot::dynamicField($resizeRule, 'width'), Boot::dynamicField($resizeRule, 'height'));
						#src/jotun/php/file/Uploader.hx:158: characters 7-79
						$convert = (Boot::dynamicField($resizeRule, 'type') !== null) && ($v->type !== Boot::dynamicField($resizeRule, 'type'));
						#src/jotun/php/file/Uploader.hx:159: characters 7-53
						$rename = Boot::dynamicField($resizeRule, 'callback') !== null;
						#src/jotun/php/file/Uploader.hx:161: lines 161-163
						if (Boot::dynamicField($resizeRule, 'path') !== null) {
							#src/jotun/php/file/Uploader.hx:162: characters 8-38
							$o = \Std::string(Boot::dynamicField($resizeRule, 'path')) . ($v->output??'null');
						}
						#src/jotun/php/file/Uploader.hx:165: lines 165-169
						if ($rename) {
							#src/jotun/php/file/Uploader.hx:166: characters 8-34
							$o = $resizeRule->callback($o);
						} else {
							#src/jotun/php/file/Uploader.hx:168: characters 8-57
							$o = Uploader::_rename($o, Boot::dynamicField($resizeRule, 'sufix'), Boot::dynamicField($resizeRule, 'type'));
						}
						#src/jotun/php/file/Uploader.hx:171: lines 171-173
						if ($resize) {
							#src/jotun/php/file/Uploader.hx:172: characters 8-54
							$image->fit(Boot::dynamicField($resizeRule, 'width'), Boot::dynamicField($resizeRule, 'height'));
						}
						#src/jotun/php/file/Uploader.hx:175: lines 175-182
						if ($create || $rename || $resize || $convert) {
							#src/jotun/php/file/Uploader.hx:176: characters 8-58
							$image->save($o, Boot::dynamicField($resizeRule, 'type'), Boot::dynamicField($resizeRule, 'quality'));
							#src/jotun/php/file/Uploader.hx:177: lines 177-179
							if (Boot::dynamicField($resizeRule, 'id') === null) {
								#src/jotun/php/file/Uploader.hx:178: characters 9-57
								$resizeRule->id = ($image->width??'null') . "x" . ($image->height??'null');
							}
							#src/jotun/php/file/Uploader.hx:180: characters 8-102
							$_this = $v->sizes;
							$x = new HxAnon([
								"width" => $image->width,
								"image" => Boot::dynamicField($resizeRule, 'height'),
								"url" => $o,
								"id" => Boot::dynamicField($resizeRule, 'id'),
							]);
							$_this->arr[$_this->length++] = $x;
							#src/jotun/php/file/Uploader.hx:181: characters 8-121
							Uploader::_log("changed", new HxAnon([
								"file" => $v,
								"size" => $resizeRule,
								"created" => $create,
								"rename" => $rename,
								"resize" => $resize,
								"convert" => $convert,
							]));
						}
						#src/jotun/php/file/Uploader.hx:184: lines 184-186
						if (!$delete && Boot::dynamicField($resizeRule, 'delete')) {
							#src/jotun/php/file/Uploader.hx:185: characters 8-21
							$delete = true;
						}
					});
					#src/jotun/php/file/Uploader.hx:189: lines 189-192
					if ($delete && $image->isValid()) {
						#src/jotun/php/file/Uploader.hx:190: characters 7-35
						$image->open((Uploader::$_path??'null') . ($v->output??'null'));
						#src/jotun/php/file/Uploader.hx:191: characters 7-21
						Uploader::_delete($image);
					}
				}
			});
		}
	}

	/**
	 * @param string $q
	 * 
	 * @return void
	 */
	public static function createPath ($q) {
		#src/jotun/php/file/Uploader.hx:39: characters 3-21
		$p = "";
		#src/jotun/php/file/Uploader.hx:40: lines 40-48
		Dice::Values(HxString::split($q, "/"), function ($v) use (&$q, &$p) {
			#src/jotun/php/file/Uploader.hx:41: lines 41-47
			if (mb_strlen($v) > 0) {
				#src/jotun/php/file/Uploader.hx:42: characters 5-17
				$p = ($p??'null') . ($v??'null') . "/";
				#src/jotun/php/file/Uploader.hx:43: characters 10-30
				\clearstatcache(true, $p);
				#src/jotun/php/file/Uploader.hx:43: lines 43-46
				if (!\file_exists($p) || !FileSystem::isDirectory($p)) {
					#src/jotun/php/file/Uploader.hx:44: characters 6-77
					mkdir($p,0777);
					#src/jotun/php/file/Uploader.hx:45: characters 6-29
					Uploader::_log("path:created", $q);
				}
			}
		});
	}

	/**
	 * @param \Closure $method
	 * 
	 * @return void
	 */
	public static function onLog ($method) {
		#src/jotun/php/file/Uploader.hx:35: characters 3-23
		Uploader::$_log_method = $method;
	}

	/**
	 * @param string $path
	 * @param mixed[]|\Array_hx $rules
	 * @param bool $rename
	 * 
	 * @return FileCollection
	 */
	public static function save ($path, $rules = null, $rename = true) {
		#src/jotun/php/file/Uploader.hx:57: lines 57-89
		if ($rename === null) {
			$rename = true;
		}
		#src/jotun/php/file/Uploader.hx:59: characters 3-23
		Uploader::$_autoRename = $rename;
		#src/jotun/php/file/Uploader.hx:61: lines 61-64
		if (Uploader::$_path !== $path) {
			#src/jotun/php/file/Uploader.hx:62: characters 4-20
			Uploader::createPath($path);
			#src/jotun/php/file/Uploader.hx:63: characters 4-16
			Uploader::$_path = $path;
		}
		#src/jotun/php/file/Uploader.hx:66: lines 66-81
		if ($rules !== null) {
			#src/jotun/php/file/Uploader.hx:67: characters 4-20
			Uploader::$_callbacks = new HxAnon();
			#src/jotun/php/file/Uploader.hx:68: characters 4-15
			Uploader::$_sizes = new \Array_hx();
			#src/jotun/php/file/Uploader.hx:69: lines 69-79
			Dice::Values($rules, function ($q) {
				#src/jotun/php/file/Uploader.hx:70: lines 70-72
				if (Boot::dynamicField($q, 'path') !== null) {
					#src/jotun/php/file/Uploader.hx:71: characters 6-24
					Uploader::createPath(Boot::dynamicField($q, 'path'));
				}
				#src/jotun/php/file/Uploader.hx:73: lines 73-75
				if (Boot::dynamicField($q, 'resize')) {
					#src/jotun/php/file/Uploader.hx:74: characters 6-20
					$_this = Uploader::$_sizes;
					$_this->arr[$_this->length++] = $q;
				}
				#src/jotun/php/file/Uploader.hx:76: lines 76-78
				if ((Boot::dynamicField($q, 'filter') !== null) && (Boot::dynamicField($q, 'callback') !== null)) {
					#src/jotun/php/file/Uploader.hx:77: characters 6-42
					$value = Boot::dynamicField($q, 'callback');
					\Reflect::setField(Uploader::$_callbacks, Boot::dynamicField($q, 'filter'), $value);
				}
			});
			#src/jotun/php/file/Uploader.hx:80: characters 4-31
			Uploader::_log("upload:rules", $rules);
		}
		#src/jotun/php/file/Uploader.hx:83: characters 3-12
		Uploader::_verify();
		#src/jotun/php/file/Uploader.hx:85: characters 3-20
		Uploader::$_callbacks = null;
		#src/jotun/php/file/Uploader.hx:86: characters 3-16
		Uploader::$_sizes = null;
		#src/jotun/php/file/Uploader.hx:88: characters 3-15
		return Uploader::$files;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$files = new FileCollection();
	}
}

Boot::registerClass(Uploader::class, 'jotun.php.file.Uploader');
Uploader::__hx__init();
