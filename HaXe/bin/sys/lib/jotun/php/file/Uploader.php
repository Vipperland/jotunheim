<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\php\file;

use \jotun\tools\Key;
use \php\Boot;
use \jotun\Jotun;
use \jotun\tools\Utils;
use \jotun\utils\Dice;
use \sys\io\File;
use \php\_Boot\HxString;
use \sys\FileSystem;

/**
 * ...
 * @author Rafael Moreira <rafael@gateofsirius.com>
 */
class Uploader {
	/**
	 * @var bool
	 */
	static public $_autoRename;
	/**
	 * @var string[]|\Array_hx
	 */
	static public $_extensions;
	/**
	 * @var string
	 */
	static public $_path = "/";
	/**
	 * @var mixed[]|\Array_hx
	 */
	static public $_sizes;
	/**
	 * @var FileCollection
	 */
	static public $files;

	/**
	 * @param string $file
	 * 
	 * @return string
	 */
	public static function _getType ($file) {
		#src/jotun/php/file/Uploader.hx:68: characters 20-41
		$_this = HxString::split($file, ".");
		if ($_this->length > 0) {
			$_this->length--;
		}
		#src/jotun/php/file/Uploader.hx:68: characters 3-56
		$ext = \mb_strtolower(\array_pop($_this->arr));
		#src/jotun/php/file/Uploader.hx:69: lines 69-74
		if ($ext === "gif" || $ext === "jpeg" || $ext === "jpg" || $ext === "png") {
			#src/jotun/php/file/Uploader.hx:71: characters 5-19
			return "image";
		} else {
			#src/jotun/php/file/Uploader.hx:73: characters 5-22
			return "document";
		}
	}

	/**
	 * @param string $o
	 * @param string $p
	 * @param string $t
	 * 
	 * @return string
	 */
	public static function _rename ($o, $p, $t) {
		#src/jotun/php/file/Uploader.hx:175: characters 3-38
		$n = HxString::split($o, ".");
		#src/jotun/php/file/Uploader.hx:176: characters 18-25
		if ($n->length > 0) {
			$n->length--;
		}
		#src/jotun/php/file/Uploader.hx:176: characters 3-26
		$e = \array_pop($n->arr);
		#src/jotun/php/file/Uploader.hx:177: lines 177-179
		if ($p !== null) {
			#src/jotun/php/file/Uploader.hx:178: characters 4-19
			$n->offsetSet($n->length, $p);
		}
		#src/jotun/php/file/Uploader.hx:180: characters 3-28
		$n->arr[$n->length++] = ($t === null ? $e : $t);
		#src/jotun/php/file/Uploader.hx:181: characters 3-21
		return $n->join(".");
	}

	/**
	 * @return void
	 */
	public static function _verify () {
		#src/jotun/php/file/Uploader.hx:79: characters 3-30
		$partName = null;
		#src/jotun/php/file/Uploader.hx:80: characters 3-30
		$lastFile = null;
		#src/jotun/php/file/Uploader.hx:81: characters 3-36
		$fileStream = null;
		#src/jotun/php/file/Uploader.hx:84: lines 84-115
		Jotun::$domain->parseFiles(function ($part, $name) use (&$partName, &$fileStream, &$lastFile) {
			#src/jotun/php/file/Uploader.hx:87: lines 87-107
			if (Utils::isValid($name)) {
				#src/jotun/php/file/Uploader.hx:88: lines 88-104
				if (($name !== null) && ($lastFile !== $name)) {
					#src/jotun/php/file/Uploader.hx:89: characters 7-22
					$partName = $part;
					#src/jotun/php/file/Uploader.hx:90: characters 7-22
					$lastFile = $name;
					#src/jotun/php/file/Uploader.hx:92: lines 92-94
					if ($fileStream !== null) {
						#src/jotun/php/file/Uploader.hx:93: characters 8-26
						$fileStream->close();
					}
					#src/jotun/php/file/Uploader.hx:96: characters 7-40
					$type = Uploader::_getType($name);
					#src/jotun/php/file/Uploader.hx:97: lines 97-103
					if ($type !== null) {
						#src/jotun/php/file/Uploader.hx:99: characters 8-108
						$nName = null;
						#src/jotun/php/file/Uploader.hx:99: characters 27-107
						if (Uploader::$_autoRename) {
							#src/jotun/php/file/Uploader.hx:99: characters 41-51
							$nName1 = null;
							if (Jotun::$tick === null) {
								$nName1 = "null";
							} else {
								$int = Jotun::$tick;
								$nName1 = \Std::string(($int < 0 ? 4294967296.0 + $int : $int + 0.0));
							}
							#src/jotun/php/file/Uploader.hx:99: characters 41-76
							$nName2 = ($nName1??'null') . "_" . (Key::GEN(8)??'null') . ".";
							#src/jotun/php/file/Uploader.hx:99: characters 79-100
							$_this = HxString::split($name, ".");
							if ($_this->length > 0) {
								$_this->length--;
							}
							#src/jotun/php/file/Uploader.hx:99: characters 8-108
							$nName = ($nName2??'null') . (\array_pop($_this->arr)??'null');
						} else {
							$nName = $name;
						}
						#src/jotun/php/file/Uploader.hx:101: characters 8-52
						$fileStream = File::write((Uploader::$_path??'null') . ($nName??'null'), true);
						#src/jotun/php/file/Uploader.hx:102: characters 8-56
						Uploader::$files->add($part, new FileInfo($type, $name, $nName));
					}
				}
			} else {
				#src/jotun/php/file/Uploader.hx:106: characters 6-23
				$fileStream = null;
			}
		}, function ($bytes, $pos, $len) use (&$fileStream) {
			#src/jotun/php/file/Uploader.hx:111: lines 111-113
			if ($fileStream !== null) {
				#src/jotun/php/file/Uploader.hx:112: characters 6-51
				$fileStream->writeBytes($bytes, 0, $bytes->length);
			}
		});
		#src/jotun/php/file/Uploader.hx:118: lines 118-120
		if ($fileStream !== null) {
			#src/jotun/php/file/Uploader.hx:119: characters 4-22
			$fileStream->close();
		}
		#src/jotun/php/file/Uploader.hx:123: lines 123-170
		if (Uploader::$_sizes !== null) {
			#src/jotun/php/file/Uploader.hx:124: characters 4-35
			$image = new Image();
			#src/jotun/php/file/Uploader.hx:125: lines 125-169
			Dice::Values(Uploader::$files->list, function ($v) use (&$image) {
				#src/jotun/php/file/Uploader.hx:126: lines 126-168
				if ($v->type === "image") {
					#src/jotun/php/file/Uploader.hx:127: characters 6-18
					$v->sizes = new \Array_hx();
					#src/jotun/php/file/Uploader.hx:128: characters 6-25
					$delete = false;
					#src/jotun/php/file/Uploader.hx:129: lines 129-163
					Dice::All(Uploader::$_sizes, function ($p, $s) use (&$delete, &$v, &$image) {
						#src/jotun/php/file/Uploader.hx:130: characters 7-39
						$o = (Uploader::$_path??'null') . ($v->output??'null');
						#src/jotun/php/file/Uploader.hx:131: characters 7-20
						$image->open($o);
						#src/jotun/php/file/Uploader.hx:132: lines 132-153
						if (Boot::dynamicField($s, 'create') || ((Boot::dynamicField($s, 'type') !== null) && ($v->type !== (Uploader::$_extensions->arr[Boot::dynamicField($s, 'type')] ?? null)))) {
							#src/jotun/php/file/Uploader.hx:134: lines 134-136
							if (Boot::dynamicField($s, 'path') !== null) {
								#src/jotun/php/file/Uploader.hx:135: characters 9-30
								$o = \Std::string(Boot::dynamicField($s, 'path')) . ($v->output??'null');
							}
							#src/jotun/php/file/Uploader.hx:137: characters 8-36
							$image->fit(Boot::dynamicField($s, 'width'), Boot::dynamicField($s, 'height'));
							#src/jotun/php/file/Uploader.hx:138: characters 8-52
							$o = Uploader::_rename($o, Boot::dynamicField($s, 'sufix'), (Uploader::$_extensions->arr[Boot::dynamicField($s, 'type')] ?? null));
							#src/jotun/php/file/Uploader.hx:139: lines 139-141
							if (Boot::dynamicField($s, 'renameFunc') !== null) {
								#src/jotun/php/file/Uploader.hx:140: characters 9-28
								$o = $s->renameFunc($o);
							}
							#src/jotun/php/file/Uploader.hx:142: characters 8-29
							$image->save($o, Boot::dynamicField($s, 'type'));
							#src/jotun/php/file/Uploader.hx:143: characters 8-23
							$_this = $v->sizes;
							$_this->arr[$_this->length++] = $o;
						} else if ((Boot::dynamicField($s, 'width') !== null) && (Boot::dynamicField($s, 'height') !== null) && $image->isOutBounds(Boot::dynamicField($s, 'width'), Boot::dynamicField($s, 'height'))) {
							#src/jotun/php/file/Uploader.hx:146: characters 8-36
							$image->fit(Boot::dynamicField($s, 'width'), Boot::dynamicField($s, 'height'));
							#src/jotun/php/file/Uploader.hx:147: characters 8-52
							$o = Uploader::_rename($o, Boot::dynamicField($s, 'sufix'), (Uploader::$_extensions->arr[Boot::dynamicField($s, 'type')] ?? null));
							#src/jotun/php/file/Uploader.hx:148: lines 148-150
							if (Boot::dynamicField($s, 'renameFunc') !== null) {
								#src/jotun/php/file/Uploader.hx:149: characters 9-28
								$o = $s->renameFunc($o);
							}
							#src/jotun/php/file/Uploader.hx:151: characters 8-29
							$image->save($o, Boot::dynamicField($s, 'type'));
							#src/jotun/php/file/Uploader.hx:152: characters 8-23
							$_this = $v->sizes;
							$_this->arr[$_this->length++] = $o;
						}
						#src/jotun/php/file/Uploader.hx:154: lines 154-159
						if (Boot::dynamicField($s, 'rename')) {
							#src/jotun/php/file/Uploader.hx:155: lines 155-157
							if (Boot::dynamicField($s, 'renameFunc') !== null) {
								#src/jotun/php/file/Uploader.hx:156: characters 9-28
								$o = $s->renameFunc($o);
							}
							#src/jotun/php/file/Uploader.hx:158: characters 8-21
							$image->save($o);
						}
						#src/jotun/php/file/Uploader.hx:160: lines 160-162
						if (!$delete && Boot::dynamicField($s, 'delete')) {
							#src/jotun/php/file/Uploader.hx:161: characters 8-21
							$delete = true;
						}
					});
					#src/jotun/php/file/Uploader.hx:164: lines 164-167
					if ($delete) {
						#src/jotun/php/file/Uploader.hx:165: characters 7-22
						$v->output = null;
						#src/jotun/php/file/Uploader.hx:166: characters 7-21
						$image->delete();
					}
				}
			});
		}
	}

	/**
	 * @param string $q
	 * 
	 * @return void
	 */
	public static function createPath ($q) {
		#src/jotun/php/file/Uploader.hx:33: characters 3-21
		$p = "";
		#src/jotun/php/file/Uploader.hx:34: lines 34-41
		Dice::Values(HxString::split($q, "/"), function ($v) use (&$p) {
			#src/jotun/php/file/Uploader.hx:35: lines 35-40
			if (mb_strlen($v) > 0) {
				#src/jotun/php/file/Uploader.hx:36: characters 5-17
				$p = ($p??'null') . ($v??'null') . "/";
				#src/jotun/php/file/Uploader.hx:37: characters 10-30
				\clearstatcache(true, $p);
				#src/jotun/php/file/Uploader.hx:37: lines 37-39
				if (!\file_exists($p) || !FileSystem::isDirectory($p)) {
					#src/jotun/php/file/Uploader.hx:38: characters 6-77
					mkdir($p,0777);
				}
			}
		});
	}

	/**
	 * @param string $path
	 * @param mixed[]|\Array_hx $sizes
	 * @param bool $rename
	 * 
	 * @return FileCollection
	 */
	public static function save ($path, $sizes = null, $rename = true) {
		#src/jotun/php/file/Uploader.hx:44: lines 44-65
		if ($rename === null) {
			$rename = true;
		}
		#src/jotun/php/file/Uploader.hx:46: characters 3-23
		Uploader::$_autoRename = $rename;
		#src/jotun/php/file/Uploader.hx:48: lines 48-51
		if (Uploader::$_path !== $path) {
			#src/jotun/php/file/Uploader.hx:49: characters 4-20
			Uploader::createPath($path);
			#src/jotun/php/file/Uploader.hx:50: characters 4-16
			Uploader::$_path = $path;
		}
		#src/jotun/php/file/Uploader.hx:53: lines 53-60
		if ($sizes !== null) {
			#src/jotun/php/file/Uploader.hx:54: characters 4-18
			Uploader::$_sizes = $sizes;
			#src/jotun/php/file/Uploader.hx:55: lines 55-59
			Dice::Values(Uploader::$_sizes, function ($q) {
				#src/jotun/php/file/Uploader.hx:56: lines 56-58
				if (Boot::dynamicField($q, 'path') !== null) {
					#src/jotun/php/file/Uploader.hx:57: characters 6-24
					Uploader::createPath(Boot::dynamicField($q, 'path'));
				}
			});
		}
		#src/jotun/php/file/Uploader.hx:62: characters 3-12
		Uploader::_verify();
		#src/jotun/php/file/Uploader.hx:64: characters 3-15
		return Uploader::$files;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$files = new FileCollection();
		self::$_extensions = \Array_hx::wrap([
			"jpg",
			"gif",
			null,
			"png",
			null,
			null,
			"wbmp",
		]);
	}
}

Boot::registerClass(Uploader::class, 'jotun.php.file.Uploader');
Uploader::__hx__init();
