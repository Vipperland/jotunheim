<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\php\db\tools;

use \php\Boot;
use \haxe\Exception;
use \jotun\errors\ErrorDescriptior;
use \jotun\errors\Error;
use \jotun\php\db\pdo\Statement;

/**
 * ...
 * @author Rafael Moreira
 */
class Command extends CommandCore implements ICommand {
	/**
	 * @param Statement $statement
	 * @param string $query
	 * @param mixed[]|\Array_hx $parameters
	 * @param ErrorDescriptior[]|\Array_hx $errors
	 * @param \Closure $log
	 * 
	 * @return void
	 */
	public function __construct ($statement, $query, $parameters, $errors, $log) {
		#src/jotun/php/db/tools/Command.hx:15: lines 15-45
		parent::__construct($statement, $query, $parameters, $errors, $log);
	}

	/**
	 * @param \Closure $handler
	 * @param mixed $type
	 * @param mixed[]|\Array_hx $parameters
	 * 
	 * @return ICommand
	 */
	public function execute ($handler = null, $type = null, $parameters = null) {
		#src/jotun/php/db/tools/Command.hx:18: lines 18-41
		if ($this->statement !== null) {
			#src/jotun/php/db/tools/Command.hx:19: characters 4-29
			$p = null;
			#src/jotun/php/db/tools/Command.hx:20: lines 20-22
			if ($parameters !== null) {
				#src/jotun/php/db/tools/Command.hx:21: characters 5-35
				$p = $parameters->arr;
			}
			#src/jotun/php/db/tools/Command.hx:23: lines 23-35
			try {
				#src/jotun/php/db/tools/Command.hx:24: characters 5-35
				$this->success = $this->statement->execute($p);
				#src/jotun/php/db/tools/Command.hx:25: lines 25-27
				if (!$this->success) {
					#src/jotun/php/db/tools/Command.hx:26: characters 6-12
					$tmp = $this->get_errors();
					#src/jotun/php/db/tools/Command.hx:26: characters 13-26
					$tmp1 = $this->get_errors()->length;
					#src/jotun/php/db/tools/Command.hx:26: characters 40-61
					$tmp2 = $this->statement->errorCode();
					#src/jotun/php/db/tools/Command.hx:26: characters 6-102
					$tmp->offsetSet($tmp1, new Error($tmp2, \Array_hx::wrap($this->statement->errorInfo())));
				}
				#src/jotun/php/db/tools/Command.hx:28: characters 5-26
				$this->statement = null;
			} catch(\Throwable $_g) {
				#src/jotun/php/db/tools/Command.hx:29: characters 12-13
				$e = Exception::caught($_g)->unwrap();
				#src/jotun/php/db/tools/Command.hx:30: lines 30-34
				if (is_string($e)) {
					#src/jotun/php/db/tools/Command.hx:31: characters 6-45
					$this->get_errors()->offsetSet($this->get_errors()->length, new Error(0, $e));
				} else {
					#src/jotun/php/db/tools/Command.hx:33: characters 6-12
					$tmp = $this->get_errors();
					#src/jotun/php/db/tools/Command.hx:33: characters 13-26
					$tmp1 = $this->get_errors()->length;
					#src/jotun/php/db/tools/Command.hx:33: characters 40-51
					$tmp2 = $e->getCode();
					#src/jotun/php/db/tools/Command.hx:33: characters 6-68
					$tmp->offsetSet($tmp1, new Error($tmp2, $e->getMessage()));
				}
			}
			#src/jotun/php/db/tools/Command.hx:36: lines 36-38
			if ($this->_log !== null) {
				#src/jotun/php/db/tools/Command.hx:37: characters 5-50
				($this->_log)(((($this->success ? "[1]" : "[0]"))??'null') . " " . ($this->log()??'null'));
			}
		} else {
			#src/jotun/php/db/tools/Command.hx:40: characters 4-83
			$this->get_errors()->offsetSet($this->get_errors()->length, new Error(0, "A connection with database is required."));
		}
		#src/jotun/php/db/tools/Command.hx:42: characters 3-14
		return $this;
	}
}

Boot::registerClass(Command::class, 'jotun.php.db.tools.Command');
