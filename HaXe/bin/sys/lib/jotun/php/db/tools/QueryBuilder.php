<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\php\db\tools;

use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\utils\Filler;
use \jotun\logical\Flag;
use \jotun\php\db\Clause;
use \jotun\utils\Dice;
use \php\_Boot\HxClosure;
use \jotun\php\db\Gate;
use \jotun\php\db\objects\DataTable;

/**
 * ...
 * @author Rafael Moreira
 */
class QueryBuilder {
	/**
	 * @var Gate
	 */
	public $_gate;

	/**
	 *
	 *
	 * var q:Dynamic = Jotun.gate.table('users').findJoin(['users.id as UID','users.name as NAME','state.alt as STATE','city.name as CITY'], [
	 * Jotun.gate.builder.leftJoin('user_address', 'address', Clause.EQUAL('address.user_id', 1)),
	 * Jotun.gate.builder.leftJoin('location_state', 'state', Clause.CUSTOM('state.id=address.state_id')),
	 * Jotun.gate.builder.leftJoin('location_city', 'city', 'city.id=address.city_id'),
	 * ], Clause.CUSTOM('users.id<30'));
	 * @param	gate
	 * 
	 * @param Gate $gate
	 * 
	 * @return void
	 */
	public function __construct ($gate) {
		#src/jotun/php/db/tools/QueryBuilder.hx:29: characters 3-15
		$this->_gate = $gate;
	}

	/**
	 *
	 * @param	clause
	 * @param	parameters
	 * @param	order
	 * @param	limit
	 * @return
	 * 
	 * @param mixed $clause
	 * @param mixed[]|\Array_hx $parameters
	 * @param mixed $order
	 * @param string $limit
	 * 
	 * @return string
	 */
	public function _assembleBody ($clause = null, $parameters = null, $order = null, $limit = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:166: characters 3-21
		$q = "";
		#src/jotun/php/db/tools/QueryBuilder.hx:167: lines 167-168
		if ($clause !== null) {
			#src/jotun/php/db/tools/QueryBuilder.hx:168: characters 4-68
			$q = ($q??'null') . " WHERE " . ($this->_conditions($clause, $parameters, " || ", false)??'null');
		}
		#src/jotun/php/db/tools/QueryBuilder.hx:169: lines 169-170
		if ($order !== null) {
			#src/jotun/php/db/tools/QueryBuilder.hx:170: characters 4-37
			$q = ($q??'null') . " ORDER BY " . ($this->_order($order)??'null');
		}
		#src/jotun/php/db/tools/QueryBuilder.hx:171: lines 171-172
		if ($limit !== null) {
			#src/jotun/php/db/tools/QueryBuilder.hx:172: characters 4-26
			$q = ($q??'null') . " LIMIT " . ($limit??'null');
		}
		#src/jotun/php/db/tools/QueryBuilder.hx:173: characters 3-11
		return $q;
	}

	/**
	 *
	 * @param	obj
	 * @param	props
	 * @param	joiner
	 * @param	skip
	 * @return
	 * 
	 * @param mixed $obj
	 * @param mixed $props
	 * @param string $joiner
	 * @param bool $skip
	 * 
	 * @return string
	 */
	public function _conditions ($obj, $props, $joiner, $skip) {
		#src/jotun/php/db/tools/QueryBuilder.hx:101: lines 101-155
		$_gthis = $this;
		#src/jotun/php/db/tools/QueryBuilder.hx:103: characters 3-28
		$r = new \Array_hx();
		#src/jotun/php/db/tools/QueryBuilder.hx:104: characters 3-25
		$s = $joiner;
		#src/jotun/php/db/tools/QueryBuilder.hx:105: characters 3-21
		$b = true;
		#src/jotun/php/db/tools/QueryBuilder.hx:108: lines 108-146
		if (($obj instanceof Clause)) {
			#src/jotun/php/db/tools/QueryBuilder.hx:109: lines 109-114
			Dice::Values(Boot::dynamicField($obj, 'conditions'), function ($v) use (&$skip, &$r, &$_gthis, &$props, &$joiner) {
				#src/jotun/php/db/tools/QueryBuilder.hx:110: characters 5-44
				$v = $_gthis->_conditions($v, $props, $joiner, $skip);
				#src/jotun/php/db/tools/QueryBuilder.hx:111: lines 111-113
				if ($v !== null) {
					#src/jotun/php/db/tools/QueryBuilder.hx:112: characters 6-21
					$r->offsetSet($r->length, $v);
				}
			});
			#src/jotun/php/db/tools/QueryBuilder.hx:115: characters 4-20
			$s = $obj->joiner();
		} else if (($obj instanceof \Array_hx)) {
			#src/jotun/php/db/tools/QueryBuilder.hx:119: lines 119-124
			Dice::All($obj, function ($p, $v) use (&$skip, &$r, &$_gthis, &$props, &$joiner) {
				#src/jotun/php/db/tools/QueryBuilder.hx:120: characters 5-83
				$v = $_gthis->_conditions($v, $props, (($v instanceof Clause) ? $v->joiner() : $joiner), $skip);
				#src/jotun/php/db/tools/QueryBuilder.hx:121: lines 121-123
				if ($v !== null) {
					#src/jotun/php/db/tools/QueryBuilder.hx:122: characters 6-21
					$r->offsetSet($r->length, $v);
				}
			});
		} else if (is_string($obj)) {
			#src/jotun/php/db/tools/QueryBuilder.hx:127: characters 4-21
			$r->offsetSet($r->length, $obj);
		} else if ($obj !== null) {
			#src/jotun/php/db/tools/QueryBuilder.hx:131: lines 131-145
			if ((Boot::dynamicField($obj, 'value') instanceof \Array_hx)) {
				#src/jotun/php/db/tools/QueryBuilder.hx:132: characters 5-61
				$r->offsetSet($r->length, Filler::to(Boot::dynamicField($obj, 'condition'), new HxAnon(["p" => Boot::dynamicField($obj, 'param')])));
				#src/jotun/php/db/tools/QueryBuilder.hx:133: lines 133-135
				Dice::All(Boot::dynamicField($obj, 'value'), function ($p, $v) use (&$props) {
					#src/jotun/php/db/tools/QueryBuilder.hx:134: characters 6-29
					$props[Boot::dynamicField($props, 'length')] = $v;
				});
			} else if ($skip) {
				#src/jotun/php/db/tools/QueryBuilder.hx:138: characters 6-97
				$r->offsetSet($r->length, Filler::splitter(Filler::to(Boot::dynamicField($obj, 'condition'), new HxAnon(["p" => Boot::dynamicField($obj, 'param')])), "?", \Array_hx::wrap([Boot::dynamicField($obj, 'value')])));
			} else {
				#src/jotun/php/db/tools/QueryBuilder.hx:140: characters 6-62
				$r->offsetSet($r->length, Filler::to(Boot::dynamicField($obj, 'condition'), new HxAnon(["p" => Boot::dynamicField($obj, 'param')])));
				#src/jotun/php/db/tools/QueryBuilder.hx:141: lines 141-143
				if (!Boot::dynamicField($obj, 'skip')) {
					#src/jotun/php/db/tools/QueryBuilder.hx:142: characters 7-38
					$props[Boot::dynamicField($props, 'length')] = Boot::dynamicField($obj, 'value');
				}
			}
		}
		#src/jotun/php/db/tools/QueryBuilder.hx:148: lines 148-153
		if ($r->length > 0) {
			#src/jotun/php/db/tools/QueryBuilder.hx:149: characters 4-20
			$b = $r->length > 1;
			#src/jotun/php/db/tools/QueryBuilder.hx:150: characters 4-54
			return ((($b ? "(" : ""))??'null') . ($r->join($s)??'null') . ((($b ? ")" : ""))??'null');
		} else {
			#src/jotun/php/db/tools/QueryBuilder.hx:152: characters 4-15
			return null;
		}
	}

	/**
	 * @param mixed $parameters
	 * @param mixed[]|\Array_hx $dataset
	 * 
	 * @return string
	 */
	public function _insert ($parameters, $dataset) {
		#src/jotun/php/db/tools/QueryBuilder.hx:33: characters 3-28
		$r = new \Array_hx();
		#src/jotun/php/db/tools/QueryBuilder.hx:34: characters 3-28
		$q = new \Array_hx();
		#src/jotun/php/db/tools/QueryBuilder.hx:35: characters 3-18
		$i = 0;
		#src/jotun/php/db/tools/QueryBuilder.hx:36: lines 36-51
		Dice::All($parameters, function ($p, $v) use (&$dataset, &$i, &$r, &$q) {
			#src/jotun/php/db/tools/QueryBuilder.hx:37: lines 37-39
			if (($v instanceof \Closure) || ($v instanceof HxClosure)) {
				#src/jotun/php/db/tools/QueryBuilder.hx:38: characters 5-11
				return;
			}
			#src/jotun/php/db/tools/QueryBuilder.hx:40: lines 40-44
			if (($v instanceof Flag)) {
				#src/jotun/php/db/tools/QueryBuilder.hx:41: characters 5-29
				$v = (Boot::typedCast(Boot::getClass(Flag::class), $v))->value;
			} else if (($v instanceof \Array_hx)) {
				#src/jotun/php/db/tools/QueryBuilder.hx:43: characters 5-20
				$v = $v->join(",");
			}
			#src/jotun/php/db/tools/QueryBuilder.hx:45: lines 45-50
			if (($v === null) || is_string($v) || is_bool($v) || (is_float($v) || is_int($v)) || Boot::isOfType($v, Boot::getClass('Int'))) {
				#src/jotun/php/db/tools/QueryBuilder.hx:46: characters 5-13
				$r->offsetSet($i, $p);
				#src/jotun/php/db/tools/QueryBuilder.hx:47: characters 5-15
				$q->offsetSet($i, "?");
				#src/jotun/php/db/tools/QueryBuilder.hx:48: characters 5-8
				$i += 1;
				#src/jotun/php/db/tools/QueryBuilder.hx:49: characters 5-32
				$dataset->offsetSet($dataset->length, $v);
			}
		});
		#src/jotun/php/db/tools/QueryBuilder.hx:52: characters 3-62
		return "(" . ($r->join(",")??'null') . ") VALUES (" . ($q->join(",")??'null') . ")";
	}

	/**
	 *
	 * @param	obj
	 * @return
	 * 
	 * @param mixed $obj
	 * 
	 * @return string
	 */
	public function _order ($obj) {
		#src/jotun/php/db/tools/QueryBuilder.hx:86: characters 3-28
		$r = new \Array_hx();
		#src/jotun/php/db/tools/QueryBuilder.hx:87: lines 87-89
		Dice::All($obj, function ($p, $v) use (&$r) {
			#src/jotun/php/db/tools/QueryBuilder.hx:88: characters 4-48
			$r->offsetSet($r->length, ($p??'null') . ((($v !== null ? " " . \Std::string($v) : ""))??'null'));
		});
		#src/jotun/php/db/tools/QueryBuilder.hx:90: characters 3-21
		return $r->join(",");
	}

	/**
	 *
	 * @param	parameters
	 * @param	dataset
	 * @return
	 * 
	 * @param mixed $parameters
	 * @param mixed[]|\Array_hx $dataset
	 * 
	 * @return string
	 */
	public function _updateSet ($parameters, $dataset) {
		#src/jotun/php/db/tools/QueryBuilder.hx:62: characters 3-28
		$q = new \Array_hx();
		#src/jotun/php/db/tools/QueryBuilder.hx:63: lines 63-76
		Dice::All($parameters, function ($p, $v) use (&$dataset, &$q) {
			#src/jotun/php/db/tools/QueryBuilder.hx:64: lines 64-66
			if (($v instanceof \Closure) || ($v instanceof HxClosure)) {
				#src/jotun/php/db/tools/QueryBuilder.hx:65: characters 5-11
				return;
			}
			#src/jotun/php/db/tools/QueryBuilder.hx:67: lines 67-71
			if (($v instanceof Flag)) {
				#src/jotun/php/db/tools/QueryBuilder.hx:68: characters 5-29
				$v = (Boot::typedCast(Boot::getClass(Flag::class), $v))->value;
			} else if (($v instanceof \Array_hx)) {
				#src/jotun/php/db/tools/QueryBuilder.hx:70: characters 5-20
				$v = $v->join(",");
			}
			#src/jotun/php/db/tools/QueryBuilder.hx:72: lines 72-75
			if (($v === null) || is_string($v) || is_bool($v) || (is_float($v) || is_int($v)) || Boot::isOfType($v, Boot::getClass('Int'))) {
				#src/jotun/php/db/tools/QueryBuilder.hx:73: characters 5-27
				$q->offsetSet($q->length, ($p??'null') . "=?");
				#src/jotun/php/db/tools/QueryBuilder.hx:74: characters 5-32
				$dataset->offsetSet($dataset->length, $v);
			}
		});
		#src/jotun/php/db/tools/QueryBuilder.hx:77: characters 3-21
		return $q->join(",");
	}

	/**
	 *
	 * @param	table
	 * @param	parameters
	 * @return
	 * 
	 * @param string $table
	 * @param mixed $parameters
	 * 
	 * @return ICommand
	 */
	public function add ($table, $parameters = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:183: characters 3-35
		$dataset = new \Array_hx();
		#src/jotun/php/db/tools/QueryBuilder.hx:184: characters 3-124
		return $this->_gate->prepare("INSERT INTO " . ($table??'null') . ($this->_insert($parameters, $dataset)??'null') . ($this->_assembleBody(null, $dataset)??'null') . ";", $dataset);
	}

	/**
	 *
	 * @param	from
	 * @param	to
	 * @param	clause
	 * @param	filter
	 * @param	limit
	 * @return
	 * 
	 * @param string $from
	 * @param string $to
	 * @param mixed $clause
	 * @param \Closure $filter
	 * @param string $limit
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public function copy ($from, $to, $clause = null, $filter = null, $limit = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:245: lines 245-257
		$_gthis = $this;
		#src/jotun/php/db/tools/QueryBuilder.hx:246: characters 3-69
		$entries = $this->find("*", $from, $clause, null, $limit)->result;
		#src/jotun/php/db/tools/QueryBuilder.hx:247: characters 3-34
		$result = new \Array_hx();
		#src/jotun/php/db/tools/QueryBuilder.hx:248: lines 248-255
		Dice::Values($entries, function ($v) use (&$to, &$filter, &$_gthis, &$result) {
			#src/jotun/php/db/tools/QueryBuilder.hx:249: lines 249-251
			if ($filter !== null) {
				#src/jotun/php/db/tools/QueryBuilder.hx:250: characters 5-18
				$v = $filter($v);
			}
			#src/jotun/php/db/tools/QueryBuilder.hx:252: lines 252-254
			if ($_gthis->add($to, $v)->success) {
				#src/jotun/php/db/tools/QueryBuilder.hx:253: characters 5-30
				$result->offsetSet($result->length, $v);
			}
		});
		#src/jotun/php/db/tools/QueryBuilder.hx:256: characters 3-16
		return $result;
	}

	/**
	 *
	 * @param	table
	 * @param	clause
	 * @param	order
	 * @param	limit
	 * @return
	 * 
	 * @param string $table
	 * @param mixed $clause
	 * @param mixed $order
	 * @param string $limit
	 * 
	 * @return ICommand
	 */
	public function delete ($table, $clause = null, $order = null, $limit = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:232: characters 3-31
		$parameters = new \Array_hx();
		#src/jotun/php/db/tools/QueryBuilder.hx:233: characters 3-115
		return $this->_gate->prepare("DELETE FROM " . ($table??'null') . ($this->_assembleBody($clause, $parameters, $order, $limit)??'null') . ";", $parameters);
	}

	/**
	 *
	 * @param	table
	 * @param	reference
	 * @param	key
	 * @param	target
	 * @param	field
	 * @param	delete
	 * @param	update
	 * @return
	 * 
	 * @param string $table
	 * @param string $reference
	 * @param string $key
	 * @param string $target
	 * @param string $field
	 * @param string $delete
	 * @param string $update
	 * 
	 * @return ICommand
	 */
	public function fKey ($table, $reference, $key = null, $target = null, $field = null, $delete = "RESTRICT", $update = "RESTRICT") {
		#src/jotun/php/db/tools/QueryBuilder.hx:271: lines 271-275
		if ($delete === null) {
			$delete = "RESTRICT";
		}
		if ($update === null) {
			$update = "RESTRICT";
		}
		if ($key === null) {
			#src/jotun/php/db/tools/QueryBuilder.hx:272: characters 4-81
			return $this->_gate->query("ALTER TABLE " . ($table??'null') . " DROP FOREIGN KEY " . ($reference??'null'));
		} else {
			#src/jotun/php/db/tools/QueryBuilder.hx:274: characters 4-230
			return $this->_gate->query("ALTER TABLE " . ($table??'null') . " ADD CONSTRAINT " . ($reference??'null') . " FOREIGN KEY (" . ($key??'null') . ") REFERENCES " . ($target??'null') . "(" . ($field??'null') . ") ON DELETE " . (\mb_strtoupper($delete)??'null') . " ON UPDATE " . (\mb_strtoupper($update)??'null') . ";");
		}
	}

	/**
	 *
	 * @param	fields
	 * @param	table
	 * @param	clause
	 * @param	order
	 * @param	limit
	 * @return
	 * 
	 * @param mixed $fields
	 * @param mixed $table
	 * @param mixed $clause
	 * @param mixed $order
	 * @param string $limit
	 * 
	 * @return IExtCommand
	 */
	public function find ($fields, $table, $clause = null, $order = null, $limit = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:197: lines 197-199
		if (($fields instanceof \Array_hx)) {
			#src/jotun/php/db/tools/QueryBuilder.hx:198: characters 4-29
			$fields = $fields->join(",");
		}
		#src/jotun/php/db/tools/QueryBuilder.hx:200: characters 3-27
		$joinner = "";
		#src/jotun/php/db/tools/QueryBuilder.hx:201: lines 201-204
		if (($table instanceof \Array_hx)) {
			#src/jotun/php/db/tools/QueryBuilder.hx:202: characters 4-37
			$main = $table->shift();
			#src/jotun/php/db/tools/QueryBuilder.hx:203: characters 4-40
			$table = \Std::string($main) . " " . \Std::string($table->join(" "));
		}
		#src/jotun/php/db/tools/QueryBuilder.hx:205: characters 3-31
		$parameters = new \Array_hx();
		#src/jotun/php/db/tools/QueryBuilder.hx:206: characters 3-128
		return $this->_gate->query("SELECT " . \Std::string($fields) . " FROM " . \Std::string($table) . ($this->_assembleBody($clause, $parameters, $order, $limit)??'null') . ";", $parameters);
	}

	/**
	 *
	 * @param	table
	 * @param	clause
	 * @return
	 * 
	 * @param mixed $table
	 * @param mixed $clause
	 * 
	 * @return string
	 */
	public function fullOuterJoin ($table, $clause = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:364: characters 3-44
		return "FULL " . ($this->outerJoin($table, $clause)??'null');
	}

	/**
	 *
	 * @param	table
	 * @param	clause
	 * @return
	 * 
	 * @param mixed $table
	 * @param mixed $clause
	 * 
	 * @return string
	 */
	public function innerJoin ($table, $clause = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:314: characters 3-40
		return "INNER " . ($this->join($table, $clause)??'null');
	}

	/**
	 *
	 * @param	table
	 * @param	clause
	 * @return
	 * 
	 * @param mixed $table
	 * @param mixed $clause
	 * 
	 * @return string
	 */
	public function join ($table, $clause = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:304: characters 3-123
		return "JOIN " . (((($table instanceof DataTable) ? Boot::dynamicField($table, 'name') : $table))??'null') . " ON " . ($this->_conditions($clause, new \Array_hx(), " || ", true)??'null');
	}

	/**
	 *
	 * @param	table
	 * @param	clause
	 * @return
	 * 
	 * @param mixed $table
	 * @param mixed $clause
	 * 
	 * @return string
	 */
	public function leftJoin ($table, $clause = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:334: characters 3-39
		return "LEFT " . ($this->join($table, $clause)??'null');
	}

	/**
	 *
	 * @param	table
	 * @param	clause
	 * @return
	 * 
	 * @param mixed $table
	 * @param mixed $clause
	 * 
	 * @return string
	 */
	public function leftOuterJoin ($table, $clause = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:344: characters 3-44
		return "LEFT " . ($this->outerJoin($table, $clause)??'null');
	}

	/**
	 *
	 * @param	table
	 * @param	clause
	 * @return
	 * 
	 * @param mixed $table
	 * @param mixed $clause
	 * 
	 * @return string
	 */
	public function outerJoin ($table, $clause = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:324: characters 3-40
		return "OUTER " . ($this->join($table, $clause)??'null');
	}

	/**
	 *
	 * @param	table
	 * @param	to
	 * @return
	 * 
	 * @param string $table
	 * @param string $to
	 * 
	 * @return ICommand
	 */
	public function rename ($table, $to) {
		#src/jotun/php/db/tools/QueryBuilder.hx:294: characters 3-89
		return $this->_gate->prepare("RENAME TABLE :oldname TO :newname", new HxAnon([
			"oldname" => $table,
			"newname" => $to,
		]));
	}

	/**
	 *
	 * @param	table
	 * @param	clause
	 * @return
	 * 
	 * @param mixed $table
	 * @param mixed $clause
	 * 
	 * @return string
	 */
	public function rightOuterJoin ($table, $clause = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:354: characters 3-45
		return "RIGHT " . ($this->outerJoin($table, $clause)??'null');
	}

	/**
	 *
	 * @param	table
	 * @return
	 * 
	 * @param string $table
	 * 
	 * @return ICommand
	 */
	public function truncate ($table) {
		#src/jotun/php/db/tools/QueryBuilder.hx:284: characters 3-57
		return $this->_gate->prepare("TRUNCATE :table", new HxAnon(["table" => $table]));
	}

	/**
	 *
	 * @param	table
	 * @param	clause
	 * @param	parameters
	 * @param	order
	 * @param	limit
	 * @return
	 * 
	 * @param string $table
	 * @param mixed $clause
	 * @param mixed $parameters
	 * @param mixed $order
	 * @param string $limit
	 * 
	 * @return ICommand
	 */
	public function update ($table, $clause = null, $parameters = null, $order = null, $limit = null) {
		#src/jotun/php/db/tools/QueryBuilder.hx:219: characters 3-35
		$dataset = new \Array_hx();
		#src/jotun/php/db/tools/QueryBuilder.hx:220: characters 3-148
		return $this->_gate->prepare("UPDATE " . ($table??'null') . " SET " . ($this->_updateSet($parameters, $dataset)??'null') . ($this->_assembleBody($clause, $dataset, $order, $limit)??'null') . ";", $dataset);
	}
}

Boot::registerClass(QueryBuilder::class, 'jotun.php.db.tools.QueryBuilder');
