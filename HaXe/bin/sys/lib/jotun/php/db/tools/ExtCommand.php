<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\php\db\tools;

use \php\Boot;
use \haxe\Exception;
use \jotun\utils\Dice;
use \jotun\errors\ErrorDescriptior;
use \jotun\errors\Error;
use \jotun\php\db\pdo\Statement;
use \php\_Boot\HxString;

/**
 * ...
 * @author Rafael Moreira
 */
class ExtCommand extends CommandCore implements IExtCommand {
	/**
	 * @param Statement $statement
	 * @param string $query
	 * @param mixed[]|\Array_hx $parameters
	 * @param ErrorDescriptior[]|\Array_hx $errors
	 * @param \Closure $log
	 * 
	 * @return void
	 */
	public function __construct ($statement, $query, $parameters, $errors, $log) {
		#src/jotun/php/db/tools/ExtCommand.hx:17: lines 17-95
		parent::__construct($statement, $query, $parameters, $errors, $log);
	}

	/**
	 * @param \Closure $handler
	 * @param mixed $type
	 * @param mixed[]|\Array_hx $parameters
	 * @param mixed[]|\Array_hx $contructArgs
	 * 
	 * @return IExtCommand
	 */
	public function execute ($handler = null, $type = null, $parameters = null, $contructArgs = null) {
		#src/jotun/php/db/tools/ExtCommand.hx:20: lines 20-62
		if ($this->statement !== null) {
			#src/jotun/php/db/tools/ExtCommand.hx:21: characters 4-29
			$p = null;
			#src/jotun/php/db/tools/ExtCommand.hx:22: lines 22-26
			if ($parameters !== null) {
				#src/jotun/php/db/tools/ExtCommand.hx:23: characters 5-35
				$p = $parameters->arr;
			} else if ($this->_parameters !== null) {
				#src/jotun/php/db/tools/ExtCommand.hx:25: characters 5-36
				$p = $this->_parameters->arr;
			}
			#src/jotun/php/db/tools/ExtCommand.hx:27: lines 27-56
			try {
				#src/jotun/php/db/tools/ExtCommand.hx:28: lines 28-34
				if ($type !== null) {
					#src/jotun/php/db/tools/ExtCommand.hx:29: lines 29-31
					if (!(is_float($type) || is_int($type)) && !is_string($type)) {
						#src/jotun/php/db/tools/ExtCommand.hx:30: characters 7-59
						$type = HxString::split(\Type::getClassName($type), ".")->join("\\");
					}
				} else {
					#src/jotun/php/db/tools/ExtCommand.hx:33: characters 6-25
					$type = "\\stdClass";
				}
				#src/jotun/php/db/tools/ExtCommand.hx:35: characters 5-35
				$this->success = $this->statement->execute($p);
				#src/jotun/php/db/tools/ExtCommand.hx:36: lines 36-48
				if ($this->statement !== null) {
					#src/jotun/php/db/tools/ExtCommand.hx:37: characters 6-20
					$this->success = true;
					#src/jotun/php/db/tools/ExtCommand.hx:38: characters 6-22
					$obj = null;
					#src/jotun/php/db/tools/ExtCommand.hx:39: characters 6-17
					$this->result = new \Array_hx();
					#src/jotun/php/db/tools/ExtCommand.hx:40: lines 40-45
					while (true) {
						#src/jotun/php/db/tools/ExtCommand.hx:40: characters 13-48
						$obj = $this->statement->fetchObject($type);
						#src/jotun/php/db/tools/ExtCommand.hx:40: lines 40-45
						if (!$obj) {
							break;
						}
						#src/jotun/php/db/tools/ExtCommand.hx:41: characters 7-34
						$this->result->offsetSet($this->result->length, $obj);
						#src/jotun/php/db/tools/ExtCommand.hx:42: lines 42-44
						if ($handler !== null) {
							#src/jotun/php/db/tools/ExtCommand.hx:43: characters 8-20
							$handler($obj);
						}
					}
				} else {
					#src/jotun/php/db/tools/ExtCommand.hx:47: characters 6-12
					$tmp = $this->get_errors();
					#src/jotun/php/db/tools/ExtCommand.hx:47: characters 13-26
					$tmp1 = $this->get_errors()->length;
					#src/jotun/php/db/tools/ExtCommand.hx:47: characters 40-61
					$tmp2 = $this->statement->errorCode();
					#src/jotun/php/db/tools/ExtCommand.hx:47: characters 6-102
					$tmp->offsetSet($tmp1, new Error($tmp2, \Array_hx::wrap($this->statement->errorInfo())));
				}
				#src/jotun/php/db/tools/ExtCommand.hx:49: characters 5-26
				$this->statement = null;
			} catch(\Throwable $_g) {
				#src/jotun/php/db/tools/ExtCommand.hx:50: characters 12-13
				$e = Exception::caught($_g)->unwrap();
				#src/jotun/php/db/tools/ExtCommand.hx:51: lines 51-55
				if (is_string($e)) {
					#src/jotun/php/db/tools/ExtCommand.hx:52: characters 6-45
					$this->get_errors()->offsetSet($this->get_errors()->length, new Error(0, $e));
				} else {
					#src/jotun/php/db/tools/ExtCommand.hx:54: characters 6-12
					$tmp = $this->get_errors();
					#src/jotun/php/db/tools/ExtCommand.hx:54: characters 13-26
					$tmp1 = $this->get_errors()->length;
					#src/jotun/php/db/tools/ExtCommand.hx:54: characters 40-51
					$tmp2 = $e->getCode();
					#src/jotun/php/db/tools/ExtCommand.hx:54: characters 6-68
					$tmp->offsetSet($tmp1, new Error($tmp2, $e->getMessage()));
				}
			}
			#src/jotun/php/db/tools/ExtCommand.hx:57: lines 57-59
			if ($this->_log !== null) {
				#src/jotun/php/db/tools/ExtCommand.hx:58: characters 5-50
				($this->_log)(((($this->success ? "[1]" : "[0]"))??'null') . " " . ($this->log()??'null'));
			}
		} else {
			#src/jotun/php/db/tools/ExtCommand.hx:61: characters 4-83
			$this->get_errors()->offsetSet($this->get_errors()->length, new Error(0, "A connection with database is required."));
		}
		#src/jotun/php/db/tools/ExtCommand.hx:63: characters 3-14
		return $this;
	}

	/**
	 * @param \Closure $handler
	 * 
	 * @return IExtCommand
	 */
	public function fetch ($handler) {
		#src/jotun/php/db/tools/ExtCommand.hx:67: characters 3-31
		Dice::Values($this->result, $handler);
		#src/jotun/php/db/tools/ExtCommand.hx:68: characters 3-14
		return $this;
	}

	/**
	 * @param string $param
	 * @param mixed[]|\Array_hx $values
	 * @param int $limit
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public function find ($param, $values, $limit = 0) {
		#src/jotun/php/db/tools/ExtCommand.hx:71: lines 71-81
		if ($limit === null) {
			$limit = 0;
		}
		#src/jotun/php/db/tools/ExtCommand.hx:72: characters 3-34
		$filter = new \Array_hx();
		#src/jotun/php/db/tools/ExtCommand.hx:73: lines 73-79
		Dice::Values($this->result, function ($v) use (&$filter, &$param, &$values, &$limit) {
			#src/jotun/php/db/tools/ExtCommand.hx:74: lines 74-77
			if (Dice::Match(\Array_hx::wrap([\Reflect::field($v, $param)]), $values, 1) > 0) {
				#src/jotun/php/db/tools/ExtCommand.hx:75: characters 5-30
				$filter->offsetSet($filter->length, $v);
				#src/jotun/php/db/tools/ExtCommand.hx:76: characters 12-21
				$aNeg = $limit < 0;
				$bNeg = false;
				#src/jotun/php/db/tools/ExtCommand.hx:76: characters 12-37
				if (($aNeg !== $bNeg ? $aNeg : $limit > 0)) {
					#src/jotun/php/db/tools/ExtCommand.hx:76: characters 25-32
					$limit -= 1;
					#src/jotun/php/db/tools/ExtCommand.hx:76: characters 25-37
					return $limit === 0;
				} else {
					#src/jotun/php/db/tools/ExtCommand.hx:76: characters 12-37
					return false;
				}
			}
			#src/jotun/php/db/tools/ExtCommand.hx:78: characters 4-16
			return false;
		});
		#src/jotun/php/db/tools/ExtCommand.hx:80: characters 3-16
		return $filter;
	}

	/**
	 * @param string $prop
	 * 
	 * @return int
	 */
	public function length ($prop = "COUNT(*)") {
		#src/jotun/php/db/tools/ExtCommand.hx:83: lines 83-93
		if ($prop === null) {
			$prop = "COUNT(*)";
		}
		#src/jotun/php/db/tools/ExtCommand.hx:84: lines 84-91
		if (($this->result !== null) && ($this->result->length > 0)) {
			#src/jotun/php/db/tools/ExtCommand.hx:85: characters 4-31
			$r0 = ($this->result->arr[0] ?? null);
			#src/jotun/php/db/tools/ExtCommand.hx:86: lines 86-90
			if (\Reflect::hasField($r0, $prop)) {
				#src/jotun/php/db/tools/ExtCommand.hx:87: characters 5-49
				return \Std::parseInt(\Reflect::field($r0, $prop));
			} else {
				#src/jotun/php/db/tools/ExtCommand.hx:89: characters 5-25
				return $this->result->length;
			}
		}
		#src/jotun/php/db/tools/ExtCommand.hx:92: characters 3-11
		return 0;
	}
}

Boot::registerClass(ExtCommand::class, 'jotun.php.db.tools.ExtCommand');
