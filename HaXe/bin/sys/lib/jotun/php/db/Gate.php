<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\php\db;

use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\php\db\tools\ICommand;
use \haxe\Exception;
use \jotun\php\db\pdo\Connection;
use \jotun\tools\Utils;
use \jotun\utils\Dice;
use \jotun\errors\ErrorDescriptior;
use \jotun\php\db\tools\ExtCommand;
use \jotun\errors\Error;
use \jotun\php\db\tools\IExtCommand;
use \jotun\php\db\pdo\Database;
use \jotun\php\db\tools\QueryBuilder;
use \jotun\php\db\objects\DataTable;
use \jotun\php\db\tools\Command;

/**
 * ...
 * @author Rafael Moreira
 */
class Gate {
	/**
	 * @var Connection
	 */
	public $_db;
	/**
	 * @var ErrorDescriptior[]|\Array_hx
	 */
	public $_errors;
	/**
	 * @var \Closure[]|\Array_hx
	 */
	public $_onLog;
	/**
	 * @var mixed
	 */
	public $_tables;
	/**
	 * @var Token
	 */
	public $_token;
	/**
	 * @var QueryBuilder
	 * Fast bulk command
	 */
	public $builder;
	/**
	 * @var mixed
	 * Last created command
	 */
	public $command;
	/**
	 * @var ErrorDescriptior[]|\Array_hx
	 * Connection and Execution Errors
	 */
	public $errors;

	/**
	 * @return void
	 */
	public function __construct () {
		#src/jotun/php/db/Gate.hx:77: characters 3-15
		$this->_errors = new \Array_hx();
		#src/jotun/php/db/Gate.hx:78: characters 3-14
		$this->_onLog = new \Array_hx();
		#src/jotun/php/db/Gate.hx:79: characters 3-16
		$this->_tables = new HxAnon();
		#src/jotun/php/db/Gate.hx:80: characters 3-35
		$this->builder = new QueryBuilder($this);
	}

	/**
	 * @param string $message
	 * 
	 * @return void
	 */
	public function _log ($message) {
		#src/jotun/php/db/Gate.hx:226: lines 226-228
		Dice::Values($this->_onLog, function ($v) use (&$message) {
			#src/jotun/php/db/Gate.hx:227: characters 4-14
			$v($message);
		});
	}

	/**
	 * LAst inserted column value
	 * @param	field
	 * @param	mode
	 * @return
	 * 
	 * @param string $field
	 * @param string $mode
	 * 
	 * @return mixed
	 */
	public function getInsertedID ($field = null, $mode = null) {
		#src/jotun/php/db/Gate.hx:67: characters 3-80
		$r = ($field !== null ? $this->_db->lastInsertId($field) : $this->_db->lastInsertId());
		#src/jotun/php/db/Gate.hx:68: lines 68-73
		if ($mode === null) {
			#src/jotun/php/db/Gate.hx:72: characters 14-22
			return $r;
		} else {
			#src/jotun/php/db/Gate.hx:68: characters 10-14
			if ($mode === "bool") {
				#src/jotun/php/db/Gate.hx:71: characters 18-41
				return Utils::boolean($r);
			} else if ($mode === "float") {
				#src/jotun/php/db/Gate.hx:70: characters 19-43
				return \Std::parseFloat($r);
			} else if ($mode === "int") {
				#src/jotun/php/db/Gate.hx:69: characters 17-39
				return \Std::parseInt($r);
			} else {
				#src/jotun/php/db/Gate.hx:72: characters 14-22
				return $r;
			}
		}
	}

	/**
	 * Name of Selected database
	 * @return
	 * 
	 * @return string
	 */
	public function getName () {
		#src/jotun/php/db/Gate.hx:57: characters 3-19
		return $this->_token->db;
	}

	/**
	 * Get name of all tables in the selected database
	 * @return
	 * 
	 * @return string[]|\Array_hx
	 */
	public function getTableNames () {
		#src/jotun/php/db/Gate.hx:196: characters 3-28
		$r = new \Array_hx();
		#src/jotun/php/db/Gate.hx:197: lines 197-199
		Dice::Values($this->query("show tables")->execute()->result, function ($v) use (&$r) {
			#src/jotun/php/db/Gate.hx:198: characters 4-26
			Dice::Values($v, Boot::getInstanceClosure($r, 'push'));
		});
		#src/jotun/php/db/Gate.hx:200: characters 3-11
		return $r;
	}

	/**
	 * Get all DataTable objects from the selected database
	 * @return
	 * 
	 * @return mixed
	 */
	public function getTables () {
		#src/jotun/php/db/Gate.hx:207: lines 207-213
		$_gthis = $this;
		#src/jotun/php/db/Gate.hx:208: characters 3-22
		$r = new HxAnon();
		#src/jotun/php/db/Gate.hx:209: lines 209-211
		Dice::Values($this->getTableNames(), function ($v) use (&$r, &$_gthis) {
			#src/jotun/php/db/Gate.hx:210: characters 4-36
			\Reflect::setField($r, $v, $_gthis->table($v));
		});
		#src/jotun/php/db/Gate.hx:212: characters 3-11
		return $r;
	}

	/**
	 * @return ErrorDescriptior[]|\Array_hx
	 */
	public function get_errors () {
		#src/jotun/php/db/Gate.hx:50: characters 57-71
		return $this->_errors;
	}

	/**
	 * LAst inserted column value
	 * @param	field
	 * @param	mode
	 * @return
	 * 
	 * @param string $table
	 * 
	 * @return bool
	 */
	public function ifTableExists ($table) {
		#src/jotun/php/db/Gate.hx:222: characters 3-46
		return $this->getTableNames()->indexOf($table) !== -1;
	}

	/**
	 * If the connection is available
	 * @return
	 * 
	 * @return bool
	 */
	public function isOpen () {
		#src/jotun/php/db/Gate.hx:88: characters 10-43
		if ($this->_db !== null) {
			#src/jotun/php/db/Gate.hx:88: characters 25-43
			return $this->get_errors()->length === 0;
		} else {
			#src/jotun/php/db/Gate.hx:88: characters 10-43
			return false;
		}
	}

	/**
	 * register query execution
	 * @param	handler
	 * @return
	 * 
	 * @param \Closure $handler
	 * 
	 * @return Gate
	 */
	public function listen ($handler) {
		#src/jotun/php/db/Gate.hx:97: lines 97-99
		if ($this->_onLog->indexOf($handler) === -1) {
			#src/jotun/php/db/Gate.hx:98: characters 4-35
			$this->_onLog->offsetSet($this->_onLog->length, $handler);
		}
		#src/jotun/php/db/Gate.hx:100: characters 3-14
		return $this;
	}

	/**
	 * Open a connection
	 * @param	token
	 * @return
	 * 
	 * @param Token $token
	 * 
	 * @return Gate
	 */
	public function open ($token) {
		#src/jotun/php/db/Gate.hx:109: lines 109-119
		if (!$this->isOpen()) {
			#src/jotun/php/db/Gate.hx:110: characters 4-18
			$this->_token = $token;
			#src/jotun/php/db/Gate.hx:111: lines 111-117
			try {
				#src/jotun/php/db/Gate.hx:112: characters 5-78
				$this->_db = Database::connect($token->host, $token->user, $token->pass, $token->options);
				#src/jotun/php/db/Gate.hx:113: characters 5-106
				$this->_db->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
				#src/jotun/php/db/Gate.hx:114: characters 5-40
				$this->setPdoAttributes(false, true, true);
			} catch(\Throwable $_g) {
				#src/jotun/php/db/Gate.hx:115: characters 12-13
				$e = Exception::caught($_g)->unwrap();
				#src/jotun/php/db/Gate.hx:116: characters 5-11
				$tmp = $this->get_errors();
				#src/jotun/php/db/Gate.hx:116: characters 12-25
				$tmp1 = $this->get_errors()->length;
				#src/jotun/php/db/Gate.hx:116: characters 39-50
				$tmp2 = $e->getCode();
				#src/jotun/php/db/Gate.hx:116: characters 5-67
				$tmp->offsetSet($tmp1, new Error($tmp2, $e->getMessage()));
			}
			#src/jotun/php/db/Gate.hx:118: characters 4-18
			$this->command = null;
		}
		#src/jotun/php/db/Gate.hx:120: characters 3-14
		return $this;
	}

	/**
	 * The query to execute
	 * @param	query
	 * @param	parameters
	 * @param	object
	 * @param	options
	 * @return
	 * 
	 * @param string $query
	 * @param mixed $parameters
	 * @param mixed $options
	 * 
	 * @return ICommand
	 */
	public function prepare ($query, $parameters = null, $options = null) {
		#src/jotun/php/db/Gate.hx:132: characters 25-109
		$tmp = ($this->isOpen() ? $this->_db->prepare($query, Boot::deref((($options === null ? new \Array_hx() : $options)))->arr) : null);
		#src/jotun/php/db/Gate.hx:132: characters 3-144
		$this->command = new Command($tmp, $query, $parameters, $this->_errors, Boot::getInstanceClosure($this, '_log'));
		#src/jotun/php/db/Gate.hx:133: characters 3-17
		return $this->command;
	}

	/**
	 *
	 * @param	query
	 * @param	parameters
	 * @return
	 * 
	 * @param string $query
	 * @param mixed $parameters
	 * @param mixed $options
	 * 
	 * @return IExtCommand
	 */
	public function query ($query, $parameters = null, $options = null) {
		#src/jotun/php/db/Gate.hx:143: characters 28-112
		$tmp = ($this->isOpen() ? $this->_db->prepare($query, Boot::deref((($options === null ? new \Array_hx() : $options)))->arr) : null);
		#src/jotun/php/db/Gate.hx:143: characters 3-147
		$this->command = new ExtCommand($tmp, $query, $parameters, $this->_errors, Boot::getInstanceClosure($this, '_log'));
		#src/jotun/php/db/Gate.hx:144: characters 3-22
		return $this->command;
	}

	/**
	 * Show all fields of a table
	 * @param	table
	 * @return
	 * 
	 * @param mixed $table
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public function schema ($table = null) {
		#src/jotun/php/db/Gate.hx:153: lines 153-155
		if (!($table instanceof \Array_hx)) {
			#src/jotun/php/db/Gate.hx:154: characters 4-19
			$table = \Array_hx::wrap([$table]);
		}
		#src/jotun/php/db/Gate.hx:156: characters 3-34
		$tables = new \Array_hx();
		#src/jotun/php/db/Gate.hx:158: characters 4-43
		$clausule = Clause::EQUAL("TABLE_SCHEMA", $this->_token->db);
		#src/jotun/php/db/Gate.hx:157: lines 157-160
		$clausule1 = Clause::AND(\Array_hx::wrap([
			$clausule,
			Clause::OR($tables),
		]));
		#src/jotun/php/db/Gate.hx:161: lines 161-163
		Dice::Values($table, function ($v) use (&$tables) {
			#src/jotun/php/db/Gate.hx:162: characters 4-57
			$tables->offsetSet($tables->length, Clause::EQUAL("TABLE_NAME", $v));
		});
		#src/jotun/php/db/Gate.hx:164: characters 3-84
		return $this->builder->find("*", "INFORMATION_SCHEMA.COLUMNS", $clausule1)->execute()->result;
	}

	/**
	 * Enable/Disable INT to String conversions
	 * @param	value
	 * @return
	 * 
	 * @param bool $stringify
	 * @param bool $emulate
	 * @param bool $buffered
	 * 
	 * @return Gate
	 */
	public function setPdoAttributes ($stringify, $emulate, $buffered) {
		#src/jotun/php/db/Gate.hx:173: characters 3-80
		$this->_db->setAttribute(\PDO::ATTR_STRINGIFY_FETCHES, $stringify);
		#src/jotun/php/db/Gate.hx:174: characters 3-77
		$this->_db->setAttribute(\PDO::ATTR_EMULATE_PREPARES, $emulate);
		#src/jotun/php/db/Gate.hx:175: characters 3-86
		$this->_db->setAttribute(\PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, $buffered);
		#src/jotun/php/db/Gate.hx:176: characters 3-14
		return $this;
	}

	/**
	 * Shotcut to table statements and methods
	 * @param	table
	 * @return
	 * 
	 * @param string $table
	 * 
	 * @return DataTable
	 */
	public function table ($table) {
		#src/jotun/php/db/Gate.hx:185: lines 185-187
		if (!\Reflect::hasField($this->_tables, $table)) {
			#src/jotun/php/db/Gate.hx:186: characters 4-64
			\Reflect::setField($this->_tables, $table, new DataTable($table, $this));
		}
		#src/jotun/php/db/Gate.hx:188: characters 3-39
		return \Reflect::field($this->_tables, $table);
	}
}

Boot::registerClass(Gate::class, 'jotun.php.db.Gate');
Boot::registerGetters('jotun\\php\\db\\Gate', [
	'errors' => true
]);
