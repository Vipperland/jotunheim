<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\objects;

use \php\_Boot\HxDynamicStr;
use \php\_Boot\HxAnon;
use \php\Boot;
use \jotun\utils\Dice;
use \php\_Boot\HxString;

/**
 * ...
 * @author Rafael Moreira
 */
class Query extends Resolve implements IQuery {
	/**
	 * @var QueryBuffer
	 */
	public $_buffer;
	/**
	 * @var mixed
	 */
	public $_flush;
	/**
	 * @var bool
	 */
	public $editable;

	/**
	 * @param bool $editable
	 * 
	 * @return void
	 */
	public function __construct ($editable = null) {
		#src/jotun/objects/Query.hx:19: characters 3-35
		$this->editable = $editable === true;
		#src/jotun/objects/Query.hx:20: characters 3-15
		$this->_flush = new HxAnon();
		#src/jotun/objects/Query.hx:21: characters 3-10
		parent::__construct();
	}

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function _batchExec ($data) {
		#src/jotun/objects/Query.hx:56: characters 3-74
		Dice::Values((($data instanceof \Array_hx) ? $data : HxDynamicStr::wrap($data)->split("\x0A")), Boot::getInstanceClosure($this, '_exec'));
	}

	/**
	 * @param string $prop
	 * 
	 * @return void
	 */
	public function _changeContext ($prop) {
		#src/jotun/objects/Query.hx:71: lines 71-76
		if (!\Reflect::hasField($this->_buffer->data, $prop)) {
			#src/jotun/objects/Query.hx:72: characters 4-20
			$this->_buffer->now = new \Array_hx();
			#src/jotun/objects/Query.hx:73: characters 4-53
			\Reflect::setField($this->_buffer->data, $prop, $this->_buffer->now);
		} else {
			#src/jotun/objects/Query.hx:75: characters 4-51
			$this->_buffer->now = \Reflect::field($this->_buffer->data, $prop);
		}
	}

	/**
	 * @param string $q
	 * 
	 * @return void
	 */
	public function _exec ($q) {
		#src/jotun/objects/Query.hx:81: characters 3-16
		$q = $this->_strip($q);
		#src/jotun/objects/Query.hx:82: characters 10-23
		if (\mb_substr($q, 0, 1) === "@") {
			#src/jotun/objects/Query.hx:85: characters 12-26
			if (\mb_substr($q, 1, 1) === "!") {
				#src/jotun/objects/Query.hx:87: characters 7-25
				$this->_buffer->now = null;
			} else {
				#src/jotun/objects/Query.hx:90: characters 7-48
				$this->_changeContext(\mb_substr($q, 1, mb_strlen($q) - 1));
			}
		} else {
			#src/jotun/objects/Query.hx:96: characters 5-35
			$iofd = HxString::indexOf($q, ".");
			#src/jotun/objects/Query.hx:98: lines 98-116
			if ($iofd !== -1) {
				#src/jotun/objects/Query.hx:99: characters 6-36
				$iofs = HxString::indexOf($q, " ");
				#src/jotun/objects/Query.hx:100: lines 100-115
				if (($iofs === -1) || ($iofd < HxString::indexOf($q, " "))) {
					#src/jotun/objects/Query.hx:101: characters 7-45
					$subq = HxString::split($q, ".");
					#src/jotun/objects/Query.hx:102: characters 22-34
					if ($subq->length > 0) {
						$subq->length--;
					}
					#src/jotun/objects/Query.hx:102: characters 7-35
					$q1 = \array_shift($subq->arr);
					#src/jotun/objects/Query.hx:103: lines 103-112
					if (\Reflect::hasField($this, $q1)) {
						#src/jotun/objects/Query.hx:104: characters 8-47
						$obj = \Reflect::field($this, $q1);
						#src/jotun/objects/Query.hx:105: lines 105-111
						if (($obj instanceof Query)) {
							#src/jotun/objects/Query.hx:106: characters 9-48
							$obj->_innerProc($subq->join("."), $this->_buffer);
							#src/jotun/objects/Query.hx:107: lines 107-109
							if (!\Reflect::hasField($this->_flush, $q1)) {
								#src/jotun/objects/Query.hx:108: characters 10-28
								\Reflect::setField($this->_flush, $q1, $obj);
							}
							#src/jotun/objects/Query.hx:110: characters 9-15
							return;
						}
					}
					#src/jotun/objects/Query.hx:113: characters 7-29
					$_this = $this->_buffer->now;
					$_this->arr[$_this->length++] = null;
					#src/jotun/objects/Query.hx:114: characters 7-13
					return;
				}
			}
			#src/jotun/objects/Query.hx:118: characters 5-41
			$tk = HxString::split($q, " ");
			#src/jotun/objects/Query.hx:120: characters 25-35
			if ($tk->length > 0) {
				$tk->length--;
			}
			#src/jotun/objects/Query.hx:120: characters 5-36
			$method = \array_shift($tk->arr);
			#src/jotun/objects/Query.hx:121: characters 5-30
			$isMethod = true;
			#src/jotun/objects/Query.hx:122: characters 5-26
			$o = null;
			#src/jotun/objects/Query.hx:128: lines 128-131
			if (method_exists($this, $method)) {
				#src/jotun/objects/Query.hx:129: characters 7-38
				$o = \Reflect::field($this, $method);
				#src/jotun/objects/Query.hx:130: characters 7-22
				$isMethod = true;
			}
			#src/jotun/objects/Query.hx:133: lines 133-150
			if ($isMethod) {
				#src/jotun/objects/Query.hx:134: characters 6-25
				$_this = $this->_buffer->log;
				$_this->arr[$_this->length++] = $q;
				#src/jotun/objects/Query.hx:136: lines 136-144
				if ($isMethod) {
					#src/jotun/objects/Query.hx:137: characters 7-42
					$o = \Reflect::callMethod($this, $o, $tk);
					#src/jotun/objects/Query.hx:138: lines 138-142
					if (($o !== null) && is_string($o) && (HxDynamicStr::wrap($o)->substr(0, 1) === "~")) {
						#src/jotun/objects/Query.hx:139: characters 8-36
						$o = HxDynamicStr::wrap($o)->substring(1, Boot::dynamicField($o, 'length'));
						#src/jotun/objects/Query.hx:140: characters 8-21
						$this->_batchExec($o);
						#src/jotun/objects/Query.hx:141: characters 8-16
						$o = null;
					}
					#src/jotun/objects/Query.hx:143: characters 7-21
					$this->_buffer->add($o);
				}
			} else if ($this->editable) {
				#src/jotun/objects/Query.hx:146: characters 6-15
				$o = ($tk->arr[0] ?? null);
				#src/jotun/objects/Query.hx:147: characters 6-39
				\Reflect::setField($this, $method, $o);
			} else {
				#src/jotun/objects/Query.hx:149: characters 6-20
				$this->_buffer->add($o);
			}
		}
	}

	/**
	 * @param mixed $data
	 * @param QueryBuffer $buffer
	 * 
	 * @return void
	 */
	public function _innerProc ($data, $buffer) {
		#src/jotun/objects/Query.hx:51: characters 3-19
		$this->_buffer = $buffer;
		#src/jotun/objects/Query.hx:52: characters 3-19
		$this->_batchExec($data);
	}

	/**
	 * @param string $q
	 * 
	 * @return string
	 */
	public function _strip ($q) {
		#src/jotun/objects/Query.hx:60: lines 60-62
		while (HxString::indexOf($q, "\x09\x09") !== -1) {
			#src/jotun/objects/Query.hx:61: characters 4-33
			$q = HxString::split($q, "\x09\x09")->join(" ");
		}
		#src/jotun/objects/Query.hx:64: lines 64-66
		while (HxString::indexOf($q, "  ") !== -1) {
			#src/jotun/objects/Query.hx:65: characters 4-31
			$q = HxString::split($q, "  ")->join(" ");
		}
		#src/jotun/objects/Query.hx:67: characters 3-11
		return $q;
	}

	/**
	 * @return void
	 */
	public function flush () {
		#src/jotun/objects/Query.hx:28: lines 28-34
		$_gthis = $this;
		#src/jotun/objects/Query.hx:29: characters 3-18
		$this->_buffer->flush();
		#src/jotun/objects/Query.hx:30: lines 30-33
		Dice::All($this->_flush, function ($p, $v) use (&$_gthis) {
			#src/jotun/objects/Query.hx:31: characters 4-13
			$v->flush();
			#src/jotun/objects/Query.hx:32: characters 4-34
			\Reflect::deleteField($_gthis->_flush, $p);
		});
	}

	/**
	 * @return string[]|\Array_hx
	 */
	public function log () {
		#src/jotun/objects/Query.hx:25: characters 3-21
		return $this->_buffer->log;
	}

	/**
	 * methodName|property ...parameters|value
	 * parameters are separated by 'TAB'
	 * sample:
	 * 			myFunct		prop1	prop2
	 * 			myObj.myFunc	prop1	prop2
	 * @param	data
	 * 
	 * @param mixed $data
	 * @param mixed $result
	 * 
	 * @return mixed
	 */
	public function proc ($data, $result = null) {
		#src/jotun/objects/Query.hx:45: characters 3-36
		$this->_buffer = new QueryBuffer($result);
		#src/jotun/objects/Query.hx:46: characters 3-19
		$this->_batchExec($data);
		#src/jotun/objects/Query.hx:47: characters 3-22
		return $this->_buffer->data;
	}
}

Boot::registerClass(Query::class, 'jotun.objects.Query');
