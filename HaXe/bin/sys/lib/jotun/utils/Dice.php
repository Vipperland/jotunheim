<?php
/**
 * Generated by Haxe 4.3.4
 */

namespace jotun\utils;

use \php\_Boot\HxAnon;
use \php\Boot;
use \php\Lib;
use \jotun\tools\Utils;
use \php\_NativeArray\NativeArray_Impl_;
use \php\_Boot\HxClosure;
use \haxe\ds\ArraySort;

/**
 * ...
 * @author Rafael Moreira <vipperland@live.com,rafael@gateofsirius.com>
 */
class Dice {
	/**
	 * @var int
	 */
	public $cursor;
	/**
	 * @var mixed[]|\Array_hx
	 */
	public $data;

	/**
	 * For each object Value and parameter, call each(paramName,paramValue)
	 * @param	q		Target object
	 * @param	each		Parameter and Value handler, return true to stop propagation
	 * @param	complete	On propagation stop handler, call it with fail param and value
	 * @return	Last value
	 * 
	 * @param mixed $q
	 * @param mixed $each
	 * 
	 * @return IDiceRoll
	 */
	public static function All ($q, $each) {
		#src/jotun/utils/Dice.hx:31: characters 3-24
		$v = null;
		#src/jotun/utils/Dice.hx:32: characters 3-24
		$p = null;
		#src/jotun/utils/Dice.hx:33: characters 3-21
		$i = true;
		#src/jotun/utils/Dice.hx:34: characters 3-18
		$k = 0;
		#src/jotun/utils/Dice.hx:35: lines 35-59
		if ($q !== null) {
			#src/jotun/utils/Dice.hx:38: lines 38-40
			if (Boot::isOfType($q, Boot::getClass(NativeArray_Impl_::class)) || ($q instanceof \Array_hx)) {
				#src/jotun/utils/Dice.hx:39: characters 6-41
				$q = Lib::objectOfAssociativeArray($q);
			}
			#src/jotun/utils/Dice.hx:42: lines 42-58
			$_g = 0;
			$_g1 = \Reflect::fields($q);
			while ($_g < $_g1->length) {
				#src/jotun/utils/Dice.hx:42: characters 9-10
				$p1 = ($_g1->arr[$_g] ?? null);
				#src/jotun/utils/Dice.hx:42: lines 42-58
				++$_g;
				#src/jotun/utils/Dice.hx:43: characters 5-28
				$v = \Reflect::field($q, $p1);
				#src/jotun/utils/Dice.hx:46: lines 46-48
				if (($v instanceof \Closure) || ($v instanceof HxClosure)) {
					#src/jotun/utils/Dice.hx:47: characters 7-15
					continue;
				}
				#src/jotun/utils/Dice.hx:50: lines 50-57
				if ($each($p1, $v) === true) {
					#src/jotun/utils/Dice.hx:51: characters 6-15
					$i = false;
					#src/jotun/utils/Dice.hx:52: characters 6-11
					break;
				} else {
					#src/jotun/utils/Dice.hx:54: characters 6-9
					++$k;
					#src/jotun/utils/Dice.hx:55: characters 6-14
					$p1 = null;
					#src/jotun/utils/Dice.hx:56: characters 6-14
					$v = null;
				}
			}
		}
		#src/jotun/utils/Dice.hx:60: lines 60-66
		$r = new HxAnon([
			"param" => $p,
			"value" => $v,
			"completed" => $i,
			"object" => $q,
			"keys" => $k,
		]);
		#src/jotun/utils/Dice.hx:67: characters 3-11
		return $r;
	}

	/**
	 * @param mixed $objects
	 * @param mixed $into
	 * @param int $blendType
	 * 
	 * @return void
	 */
	public static function Blend ($objects, $into, $blendType = 0) {
		#src/jotun/utils/Dice.hx:394: lines 394-423
		if ($blendType === null) {
			$blendType = 0;
		}
		#src/jotun/utils/Dice.hx:395: lines 395-397
		if (!($objects instanceof \Array_hx)) {
			#src/jotun/utils/Dice.hx:396: characters 4-23
			$objects = \Array_hx::wrap([$objects]);
		}
		#src/jotun/utils/Dice.hx:398: lines 398-422
		Dice::Values($objects, function ($o) use (&$blendType, &$into) {
			#src/jotun/utils/Dice.hx:399: lines 399-421
			Dice::All($o, function ($p, $v) use (&$blendType, &$into) {
				#src/jotun/utils/Dice.hx:400: lines 400-420
				if ($blendType === 0) {
					#src/jotun/utils/Dice.hx:402: characters 7-35
					\Reflect::setField($into, $p, $v);
				} else if ($blendType === 1) {
					#src/jotun/utils/Dice.hx:405: lines 405-407
					if (!\Reflect::hasField($into, $p)) {
						#src/jotun/utils/Dice.hx:406: characters 8-36
						\Reflect::setField($into, $p, $v);
					}
				} else if ($blendType === 2) {
					#src/jotun/utils/Dice.hx:410: lines 410-418
					if (\Reflect::hasField($into, $p)) {
						#src/jotun/utils/Dice.hx:411: characters 8-22
						$i = 0;
						#src/jotun/utils/Dice.hx:412: lines 412-414
						while (\Reflect::hasField($into, \Std::string($p) . "_" . ($i??'null'))) {
							#src/jotun/utils/Dice.hx:413: characters 9-12
							++$i;
						}
						#src/jotun/utils/Dice.hx:415: characters 8-46
						\Reflect::setField($into, $p, \Std::string($p) . "_" . ($i??'null'));
					} else {
						#src/jotun/utils/Dice.hx:417: characters 8-36
						\Reflect::setField($into, $p, $v);
					}
				}
			});
		});
	}

	/**
	 * Execute the method in all object list (obj.method(...args))
	 * @param	q		Target object
	 * @param	method	Function name
	 * @param	args		Function arguments
	 * 
	 * @param mixed[]|\Array_hx $q
	 * @param string $method
	 * @param mixed[]|\Array_hx $args
	 * 
	 * @return IDiceRoll
	 */
	public static function Call ($q, $method, $args = null) {
		#src/jotun/utils/Dice.hx:163: characters 3-30
		if ($args === null) {
			#src/jotun/utils/Dice.hx:163: characters 21-30
			$args = new \Array_hx();
		}
		#src/jotun/utils/Dice.hx:164: lines 164-172
		return Dice::All($q, function ($p, $v) use (&$args, &$method) {
			#src/jotun/utils/Dice.hx:169: characters 6-59
			\Reflect::callMethod($v, \Reflect::field($v, $method), $args);
		});
	}

	/**
	 * For each object Value call each(value, previous)
	 * @param	q		Target object
	 * @param	each		Value handler, return true to stop propagation
	 * @param	complete	On propagation stop handler, call it with fail value
	 * 
	 * @param mixed $q
	 * @param \Closure $each
	 * 
	 * @return IDiceRoll
	 */
	public static function Comparer ($q, $each) {
		#src/jotun/utils/Dice.hx:97: characters 3-27
		$prev = null;
		#src/jotun/utils/Dice.hx:98: lines 98-104
		return Dice::All($q, function ($p, $v) use (&$each, &$prev) {
			#src/jotun/utils/Dice.hx:100: characters 5-27
			$r = $each($v, $prev);
			#src/jotun/utils/Dice.hx:101: characters 5-13
			$prev = $v;
			#src/jotun/utils/Dice.hx:102: characters 5-13
			return $r;
		});
	}

	/**
	 * Call a method f(a,b,a==b) while (a<b; ++a)
	 * @param	from
	 * @param	to
	 * @param	each
	 * @param	complete
	 * 
	 * @param mixed $from
	 * @param mixed $to
	 * @param mixed $each
	 * @param \Closure $complete
	 * @param int $increment
	 * 
	 * @return IDiceRoll
	 */
	public static function Count ($from, $to, $each, $complete = null, $increment = 1) {
		#src/jotun/utils/Dice.hx:182: lines 182-197
		if ($increment === null) {
			$increment = 1;
		}
		#src/jotun/utils/Dice.hx:183: characters 17-35
		$a = $from;
		$b = $to;
		#src/jotun/utils/Dice.hx:183: characters 3-36
		$a1 = (\is_nan($a) || \is_nan($b) ? \Math::$NaN : \min($a, $b));
		#src/jotun/utils/Dice.hx:184: characters 17-35
		$a = $from;
		$b = $to;
		#src/jotun/utils/Dice.hx:184: characters 3-36
		$b1 = (\is_nan($a) || \is_nan($b) ? \Math::$NaN : \max($a, $b));
		#src/jotun/utils/Dice.hx:185: characters 7-41
		$tmp = null;
		if ($increment !== null) {
			#src/jotun/utils/Dice.hx:185: characters 28-41
			$aNeg = false;
			$bNeg = $increment < 0;
			#src/jotun/utils/Dice.hx:185: characters 7-41
			$tmp = ($aNeg !== $bNeg ? $aNeg : 1 > $increment);
		} else {
			$tmp = true;
		}
		#src/jotun/utils/Dice.hx:185: characters 3-56
		if ($tmp) {
			#src/jotun/utils/Dice.hx:185: characters 43-56
			$increment = 1;
		}
		#src/jotun/utils/Dice.hx:186: lines 186-190
		while ($a1 < $b1) {
			#src/jotun/utils/Dice.hx:187: characters 13-19
			$a = $a1;
			#src/jotun/utils/Dice.hx:187: characters 30-44
			$int = $increment;
			$a1 = (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) + $a1;
			#src/jotun/utils/Dice.hx:187: lines 187-189
			if ($each($a, $b1, Boot::equal($a1, $b1)) === true) {
				#src/jotun/utils/Dice.hx:188: characters 5-10
				break;
			}
		}
		#src/jotun/utils/Dice.hx:191: characters 3-23
		$c = Boot::equal($a1, $b1);
		#src/jotun/utils/Dice.hx:192: characters 64-75
		$int = $increment;
		#src/jotun/utils/Dice.hx:192: characters 3-78
		$r = new HxAnon([
			"from" => $from,
			"to" => $b1,
			"completed" => $c,
			"value" => $a1 - (($int < 0 ? 4294967296.0 + $int : $int + 0.0)),
		]);
		#src/jotun/utils/Dice.hx:193: lines 193-195
		if ($complete !== null) {
			#src/jotun/utils/Dice.hx:194: characters 4-15
			$complete($r);
		}
		#src/jotun/utils/Dice.hx:196: characters 3-11
		return $r;
	}

	/**
	 * Extract properties from a object and return a new object with then
	 * @param	q		A valid object
	 * @param	fields	Named fields to extract
	 * @return
	 * 
	 * @param mixed $q
	 * @param string[]|\Array_hx $fields
	 * 
	 * @return mixed
	 */
	public static function Extract ($q, $fields) {
		#src/jotun/utils/Dice.hx:114: characters 3-22
		$r = new HxAnon();
		#src/jotun/utils/Dice.hx:115: characters 3-86
		Dice::Values($fields, function ($v) use (&$r, &$q) {
			#src/jotun/utils/Dice.hx:115: characters 38-81
			\Reflect::setField($r, $v, \Reflect::field($q, $v));
		});
		#src/jotun/utils/Dice.hx:116: characters 3-11
		return $r;
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * @param int $a
	 * @param int $b
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function List ($data, $a = 0, $b = null) {
		#src/jotun/utils/Dice.hx:353: lines 353-374
		if ($a === null) {
			$a = 0;
		}
		#src/jotun/utils/Dice.hx:354: characters 3-32
		$copy = new \Array_hx();
		#src/jotun/utils/Dice.hx:355: characters 3-30
		$len = $data->length;
		#src/jotun/utils/Dice.hx:356: characters 3-33
		if ($b === null) {
			#src/jotun/utils/Dice.hx:356: characters 18-33
			$b = $data->length;
		}
		#src/jotun/utils/Dice.hx:357: characters 6-11
		$aNeg = $b < 0;
		$bNeg = $a < 0;
		#src/jotun/utils/Dice.hx:357: lines 357-372
		if (($aNeg !== $bNeg ? $aNeg : $b > $a)) {
			#src/jotun/utils/Dice.hx:358: lines 358-364
			while (true) {
				#src/jotun/utils/Dice.hx:358: characters 11-16
				$aNeg = $b < 0;
				$bNeg = $a < 0;
				#src/jotun/utils/Dice.hx:358: lines 358-364
				if (!(($aNeg !== $bNeg ? $aNeg : $b > $a))) {
					break;
				}
				#src/jotun/utils/Dice.hx:359: characters 9-17
				$aNeg1 = $a < 0;
				$bNeg1 = $len < 0;
				#src/jotun/utils/Dice.hx:359: lines 359-361
				if (($aNeg1 !== $bNeg1 ? $aNeg1 : $a >= $len)) {
					#src/jotun/utils/Dice.hx:360: characters 6-11
					break;
				}
				#src/jotun/utils/Dice.hx:362: characters 5-32
				$copy->offsetSet($copy->length, ($data->arr[$a] ?? null));
				#src/jotun/utils/Dice.hx:363: characters 5-8
				++$a;
			}
		} else {
			#src/jotun/utils/Dice.hx:365: characters 12-17
			$aNeg = $a < 0;
			$bNeg = $b < 0;
			#src/jotun/utils/Dice.hx:365: lines 365-372
			if (($aNeg !== $bNeg ? $aNeg : $a > $b)) {
				#src/jotun/utils/Dice.hx:366: lines 366-371
				while (true) {
					#src/jotun/utils/Dice.hx:366: characters 11-16
					$aNeg = $a < 0;
					$bNeg = $b < 0;
					#src/jotun/utils/Dice.hx:366: lines 366-371
					if (!(($aNeg !== $bNeg ? $aNeg : $a > $b))) {
						break;
					}
					#src/jotun/utils/Dice.hx:367: characters 9-16
					$aNeg1 = $len < 0;
					$bNeg1 = $a < 0;
					#src/jotun/utils/Dice.hx:367: lines 367-369
					if (($aNeg1 !== $bNeg1 ? $aNeg1 : $len > $a)) {
						#src/jotun/utils/Dice.hx:368: characters 6-33
						$copy->offsetSet($copy->length, ($data->arr[$a] ?? null));
					}
					#src/jotun/utils/Dice.hx:370: characters 5-8
					--$a;
				}
			}
		}
		#src/jotun/utils/Dice.hx:373: characters 3-14
		return $copy;
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * @param string[]|\Array_hx $props
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function Map ($data, $props) {
		#src/jotun/utils/Dice.hx:377: characters 3-34
		$mapped = new \Array_hx();
		#src/jotun/utils/Dice.hx:378: lines 378-390
		Dice::Values($data, function ($v) use (&$mapped, &$props) {
			#src/jotun/utils/Dice.hx:379: characters 4-24
			$o = new HxAnon();
			#src/jotun/utils/Dice.hx:380: characters 4-23
			$f = false;
			#src/jotun/utils/Dice.hx:381: lines 381-389
			Dice::Values($props, function ($v2) use (&$o, &$f, &$mapped, &$v) {
				#src/jotun/utils/Dice.hx:382: lines 382-388
				if (\Reflect::hasField($v, $v2)) {
					#src/jotun/utils/Dice.hx:383: characters 6-51
					\Reflect::setField($o, $v2, \Reflect::field($v, $v2));
					#src/jotun/utils/Dice.hx:384: lines 384-387
					if ($f === false) {
						#src/jotun/utils/Dice.hx:385: characters 7-15
						$f = true;
						#src/jotun/utils/Dice.hx:386: characters 7-21
						$mapped->arr[$mapped->length++] = $o;
					}
				}
			});
		});
		#src/jotun/utils/Dice.hx:391: characters 3-16
		return $mapped;
	}

	/**
	 * Ammount of values that fit in a table
	 * @param	list
	 * @param	values
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $table
	 * @param mixed $values
	 * @param int $limit
	 * 
	 * @return int
	 */
	public static function Match ($table, $values, $limit = 1) {
		#src/jotun/utils/Dice.hx:221: lines 221-233
		if ($limit === null) {
			$limit = 1;
		}
		#src/jotun/utils/Dice.hx:222: lines 222-224
		if (!($values instanceof \Array_hx)) {
			#src/jotun/utils/Dice.hx:223: characters 4-21
			$values = \Array_hx::wrap([$values]);
		}
		#src/jotun/utils/Dice.hx:225: characters 3-17
		$r = 0;
		#src/jotun/utils/Dice.hx:226: lines 226-231
		Dice::Values($values, function ($v) use (&$table, &$r, &$limit) {
			#src/jotun/utils/Dice.hx:227: lines 227-229
			if (\Lambda::indexOf($table, $v) !== -1) {
				#src/jotun/utils/Dice.hx:228: characters 5-8
				$r += 1;
			}
			#src/jotun/utils/Dice.hx:230: characters 4-25
			return ($limit -= 1) === 0;
		});
		#src/jotun/utils/Dice.hx:232: characters 3-11
		return $r;
	}

	/**
	 * Concat all mixed data into one array
	 * @param	data
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function Mix ($data) {
		#src/jotun/utils/Dice.hx:292: characters 3-29
		$r = new \Array_hx();
		#src/jotun/utils/Dice.hx:293: characters 3-62
		Dice::Values($data, function ($v) use (&$r) {
			#src/jotun/utils/Dice.hx:293: characters 43-58
			$r = $r->concat($v);
		});
		#src/jotun/utils/Dice.hx:294: characters 3-11
		return $r;
	}

	/**
	 * Return the first valid value, if no one found, will return an alternative value
	 * @param	from
	 * @param	alt
	 * @return
	 * 
	 * @param mixed $from
	 * @param mixed $alt
	 * 
	 * @return IDiceRoll
	 */
	public static function One ($from, $alt = null) {
		#src/jotun/utils/Dice.hx:206: lines 206-211
		if (($from instanceof \Array_hx)) {
			#src/jotun/utils/Dice.hx:207: lines 207-210
			Dice::Values($from, function ($v) use (&$from) {
				#src/jotun/utils/Dice.hx:208: characters 5-13
				$from = $v;
				#src/jotun/utils/Dice.hx:209: characters 5-24
				return $from === null;
			});
		}
		#src/jotun/utils/Dice.hx:212: characters 23-55
		$tmp = (Utils::isValid($from) ? $from : $alt);
		#src/jotun/utils/Dice.hx:212: characters 3-70
		return new HxAnon([
			"value" => $tmp,
			"object" => $from,
		]);
	}

	/**
	 * For each object Param call each(param)
	 * @param	q		Target object
	 * @param	each		Parameter handler, return true to stop propagation
	 * @param	complete	On propagation stop handler, call it with fail parameter
	 * 
	 * @param mixed $q
	 * @param mixed $each
	 * 
	 * @return IDiceRoll
	 */
	public static function Params ($q, $each) {
		#src/jotun/utils/Dice.hx:78: characters 3-69
		return Dice::All($q, function ($p, $v) use (&$each) {
			#src/jotun/utils/Dice.hx:78: characters 50-64
			return $each($p);
		});
	}

	/**
	 *
	 * @param	table
	 * @param	values
	 * 
	 * @param mixed[]|\Array_hx $table
	 * @param mixed $values
	 * 
	 * @return void
	 */
	public static function Put ($table, $values) {
		#src/jotun/utils/Dice.hx:275: lines 275-277
		if (!($values instanceof \Array_hx)) {
			#src/jotun/utils/Dice.hx:276: characters 4-21
			$values = \Array_hx::wrap([$values]);
		}
		#src/jotun/utils/Dice.hx:278: lines 278-283
		Dice::Values($values, function ($v) use (&$table) {
			#src/jotun/utils/Dice.hx:279: characters 4-41
			$i = \Lambda::indexOf($table, $v);
			#src/jotun/utils/Dice.hx:280: lines 280-282
			if ($i === -1) {
				#src/jotun/utils/Dice.hx:281: characters 5-18
				$table->arr[$table->length++] = $v;
			}
		});
	}

	/**
	 * Return a random value from the array
	 * @param	data
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return mixed
	 */
	public static function Random ($data) {
		#src/jotun/utils/Dice.hx:303: characters 3-52
		return ($data->arr[(int)((\mt_rand() / \mt_getrandmax() * $data->length))] ?? null);
	}

	/**
	 *
	 * @param	table
	 * @param	values object(s) to remove or filter f(x)
	 * @param limit optional for filter function, max objects to remove
	 * @return List of removed targets
	 * 
	 * @param mixed[]|\Array_hx $table
	 * @param mixed $values
	 * @param int $limit
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function Remove ($table, $values, $limit = -1) {
		#src/jotun/utils/Dice.hx:242: lines 242-267
		if ($limit === null) {
			$limit = -1;
		}
		#src/jotun/utils/Dice.hx:243: characters 3-29
		$r = new \Array_hx();
		#src/jotun/utils/Dice.hx:244: lines 244-265
		if (($values instanceof \Closure) || ($values instanceof HxClosure)) {
			#src/jotun/utils/Dice.hx:245: lines 245-255
			Dice::Values($values, function ($v) use (&$table, &$r, &$values, &$limit) {
				#src/jotun/utils/Dice.hx:246: lines 246-253
				if ($values($v) === true) {
					#src/jotun/utils/Dice.hx:247: lines 247-252
					if ($table->remove($v)) {
						#src/jotun/utils/Dice.hx:248: characters 7-22
						$r->offsetSet($r->length, $v);
						#src/jotun/utils/Dice.hx:249: lines 249-251
						if ($limit > 0) {
							#src/jotun/utils/Dice.hx:250: characters 8-15
							$limit -= 1;
						}
					}
				}
				#src/jotun/utils/Dice.hx:254: characters 5-22
				return $limit === 0;
			});
		} else {
			#src/jotun/utils/Dice.hx:257: lines 257-259
			if (!($values instanceof \Array_hx)) {
				#src/jotun/utils/Dice.hx:258: characters 5-22
				$values = \Array_hx::wrap([$values]);
			}
			#src/jotun/utils/Dice.hx:260: lines 260-264
			Dice::Values($values, function ($v) use (&$table, &$r) {
				#src/jotun/utils/Dice.hx:261: lines 261-263
				if ($table->remove($v)) {
					#src/jotun/utils/Dice.hx:262: characters 6-21
					$r->offsetSet($r->length, $v);
				}
			});
		}
		#src/jotun/utils/Dice.hx:266: characters 3-11
		return $r;
	}

	/**
	 * Sort all data in a vector, case insensitive, special characteres of a string will be changed for better result (á=a,é=e,ñ=n,...etc)
	 * @param	data
	 * @param	key
	 * @param	numeric
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $data
	 * @param string $key
	 * @param bool $numeric
	 * @param bool $copy
	 * 
	 * @return mixed
	 */
	public static function Table ($data, $key = null, $numeric = false, $copy = false) {
		#src/jotun/utils/Dice.hx:313: lines 313-351
		if ($numeric === null) {
			$numeric = false;
		}
		if ($copy === null) {
			$copy = false;
		}
		#src/jotun/utils/Dice.hx:314: characters 3-64
		$r = ($copy === true ? (new \Array_hx())->concat($data) : $data);
		#src/jotun/utils/Dice.hx:315: lines 315-349
		if ($numeric) {
			#src/jotun/utils/Dice.hx:317: lines 317-327
			if ($key !== null) {
				#src/jotun/utils/Dice.hx:318: lines 318-320
				ArraySort::sort($r, function ($a, $b) use (&$key) {
					#src/jotun/utils/Dice.hx:319: characters 13-67
					if (\Reflect::field($a, $key) < \Reflect::field($b, $key)) {
						#src/jotun/utils/Dice.hx:319: characters 61-63
						return -1;
					} else {
						#src/jotun/utils/Dice.hx:319: characters 66-67
						return 1;
					}
				});
			} else {
				#src/jotun/utils/Dice.hx:324: lines 324-326
				ArraySort::sort($r, function ($a, $b) {
					#src/jotun/utils/Dice.hx:325: characters 13-27
					if ($a < $b) {
						#src/jotun/utils/Dice.hx:325: characters 21-23
						return -1;
					} else {
						#src/jotun/utils/Dice.hx:325: characters 26-27
						return 1;
					}
				});
			}
		} else {
			#src/jotun/utils/Dice.hx:330: characters 4-28
			$cache = new HxAnon();
			#src/jotun/utils/Dice.hx:331: lines 331-336
			$cached = function ($q) use (&$cache) {
				#src/jotun/utils/Dice.hx:332: lines 332-334
				if (!\Reflect::hasField($cache, $q)) {
					#src/jotun/utils/Dice.hx:333: characters 6-52
					\Reflect::setField($cache, $q, SearchTag::clear($q));
				}
				#src/jotun/utils/Dice.hx:335: characters 5-35
				return \Reflect::field($cache, $q);
			};
			#src/jotun/utils/Dice.hx:338: lines 338-348
			if ($key !== null) {
				#src/jotun/utils/Dice.hx:339: lines 339-341
				ArraySort::sort($r, function ($a, $b) use (&$cached, &$key) {
					#src/jotun/utils/Dice.hx:340: characters 6-90
					return \Reflect::compare($cached(\Reflect::field($a, $key)), $cached(\Reflect::field($b, $key)));
				});
			} else {
				#src/jotun/utils/Dice.hx:345: lines 345-347
				ArraySort::sort($r, function ($a, $b) use (&$cached) {
					#src/jotun/utils/Dice.hx:346: characters 6-49
					return \Reflect::compare($cached($a), $cached($b));
				});
			}
		}
		#src/jotun/utils/Dice.hx:350: characters 3-11
		return $r;
	}

	/**
	 * For each object Value call each(value)
	 * @param	q		Target object
	 * @param	each		Value handler, return true to stop propagation
	 * 
	 * @param mixed $q
	 * @param mixed $each
	 * 
	 * @return IDiceRoll
	 */
	public static function Values ($q, $each) {
		#src/jotun/utils/Dice.hx:87: characters 3-69
		return Dice::All($q, function ($p, $v) use (&$each) {
			#src/jotun/utils/Dice.hx:87: characters 50-64
			return $each($v);
		});
	}

	/**
	 * Call a mthod for each null value in array
	 * @param	q
	 * @param	length
	 * @param	handler
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $q
	 * @param int $from
	 * @param int $length
	 * @param \Closure $handler
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function nullFill ($q, $from, $length, $handler) {
		#src/jotun/utils/Dice.hx:146: characters 3-25
		$length = $from + $length;
		#src/jotun/utils/Dice.hx:147: lines 147-152
		while ($from < $length) {
			#src/jotun/utils/Dice.hx:148: lines 148-150
			if (($q->arr[$from] ?? null) === null) {
				#src/jotun/utils/Dice.hx:149: characters 5-28
				$q->offsetSet($from, $handler($from));
			}
			#src/jotun/utils/Dice.hx:151: characters 4-10
			++$from;
		}
		#src/jotun/utils/Dice.hx:153: characters 3-11
		return $q;
	}

	/**
	 * Remove NULL elements from Array
	 * @param	q
	 * @param stopOnNull
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $q
	 * @param bool $stopOnNull
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function nullSkip ($q, $stopOnNull = null) {
		#src/jotun/utils/Dice.hx:126: characters 3-29
		$r = new \Array_hx();
		#src/jotun/utils/Dice.hx:127: lines 127-134
		Dice::Values($q, function ($v) use (&$r, &$stopOnNull) {
			#src/jotun/utils/Dice.hx:128: lines 128-133
			if (($v !== null) && ($v !== "")) {
				#src/jotun/utils/Dice.hx:129: characters 5-14
				$r->arr[$r->length++] = $v;
				#src/jotun/utils/Dice.hx:130: characters 5-17
				return false;
			} else {
				#src/jotun/utils/Dice.hx:132: characters 5-22
				return $stopOnNull;
			}
		});
		#src/jotun/utils/Dice.hx:135: characters 3-11
		return $r;
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return void
	 */
	public function __construct ($data) {
		#src/jotun/utils/Dice.hx:456: characters 3-19
		$this->data = $data;
		#src/jotun/utils/Dice.hx:457: characters 3-10
		$this->reset();
	}

	/**
	 * @return mixed
	 */
	public function current () {
		#src/jotun/utils/Dice.hx:465: characters 3-22
		return ($this->data->arr[$this->cursor] ?? null);
	}

	/**
	 * @return bool
	 */
	public function next () {
		#src/jotun/utils/Dice.hx:461: characters 3-32
		return $this->cursor++ < $this->data->length;
	}

	/**
	 * @return void
	 */
	public function reset () {
		#src/jotun/utils/Dice.hx:469: characters 3-14
		$this->cursor = -1;
	}
}

Boot::registerClass(Dice::class, 'jotun.utils.Dice');
