<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\utils;

use \php\_Boot\HxAnon;
use \php\Boot;
use \php\Lib;
use \jotun\tools\Utils;
use \php\_NativeArray\NativeArray_Impl_;
use \php\_Boot\HxClosure;
use \haxe\ds\ArraySort;

/**
 * ...
 * @author Rafael Moreira <vipperland@live.com,rafael@gateofsirius.com>
 */
class Dice {
	/**
	 * @var int
	 */
	public $cursor;
	/**
	 * @var mixed[]|\Array_hx
	 */
	public $data;

	/**
	 * For each object Value and parameter, call each(paramName,paramValue)
	 * @param	q		Target object
	 * @param	each		Parameter and Value handler, return true to stop propagation
	 * @param	complete	On propagation stop handler, call it with fail param and value
	 * @return	Last value
	 * 
	 * @param mixed $q
	 * @param mixed $each
	 * 
	 * @return IDiceRoll
	 */
	public static function All ($q, $each) {
		#src/jotun/utils/Dice.hx:31: characters 3-24
		$v = null;
		#src/jotun/utils/Dice.hx:32: characters 3-24
		$p = null;
		#src/jotun/utils/Dice.hx:33: characters 3-21
		$i = true;
		#src/jotun/utils/Dice.hx:34: characters 3-18
		$k = 0;
		#src/jotun/utils/Dice.hx:35: lines 35-53
		if ($q !== null) {
			#src/jotun/utils/Dice.hx:38: lines 38-40
			if (Boot::isOfType($q, Boot::getClass(NativeArray_Impl_::class)) || ($q instanceof \Array_hx)) {
				#src/jotun/utils/Dice.hx:39: characters 6-41
				$q = Lib::objectOfAssociativeArray($q);
			}
			#src/jotun/utils/Dice.hx:42: lines 42-52
			$_g = 0;
			$_g1 = \Reflect::fields($q);
			while ($_g < $_g1->length) {
				#src/jotun/utils/Dice.hx:42: characters 9-10
				$p1 = ($_g1->arr[$_g] ?? null);
				#src/jotun/utils/Dice.hx:42: lines 42-52
				++$_g;
				#src/jotun/utils/Dice.hx:43: characters 5-28
				$v = \Reflect::field($q, $p1);
				#src/jotun/utils/Dice.hx:44: lines 44-51
				if ($each($p1, $v) === true) {
					#src/jotun/utils/Dice.hx:45: characters 6-15
					$i = false;
					#src/jotun/utils/Dice.hx:46: characters 6-11
					break;
				} else {
					#src/jotun/utils/Dice.hx:48: characters 6-9
					++$k;
					#src/jotun/utils/Dice.hx:49: characters 6-14
					$p1 = null;
					#src/jotun/utils/Dice.hx:50: characters 6-14
					$v = null;
				}
			}
		}
		#src/jotun/utils/Dice.hx:54: lines 54-60
		$r = new HxAnon([
			"param" => $p,
			"value" => $v,
			"completed" => $i,
			"object" => $q,
			"keys" => $k,
		]);
		#src/jotun/utils/Dice.hx:61: characters 3-11
		return $r;
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * @param string $separator
	 * @param string $and
	 * 
	 * @return string
	 */
	public static function And ($data, $separator = ", ", $and = " & ") {
		#src/jotun/utils/Dice.hx:333: lines 333-338
		if ($separator === null) {
			$separator = ", ";
		}
		if ($and === null) {
			$and = " & ";
		}
		if ($data->length > 1) {
			#src/jotun/utils/Dice.hx:334: characters 4-59
			$q = $data->splice(0, $data->length - 1);
			#src/jotun/utils/Dice.hx:335: characters 4-50
			return ($q->join($separator)??'null') . ($and??'null') . ($data->join("")??'null');
		} else {
			#src/jotun/utils/Dice.hx:337: characters 4-24
			return $data->join("");
		}
	}

	/**
	 * @param mixed $objects
	 * @param mixed $into
	 * @param int $blendType
	 * 
	 * @return mixed
	 */
	public static function Blend ($objects, $into, $blendType = 0) {
		#src/jotun/utils/Dice.hx:429: lines 429-459
		if ($blendType === null) {
			$blendType = 0;
		}
		#src/jotun/utils/Dice.hx:430: lines 430-432
		if (!($objects instanceof \Array_hx)) {
			#src/jotun/utils/Dice.hx:431: characters 4-23
			$objects = \Array_hx::wrap([$objects]);
		}
		#src/jotun/utils/Dice.hx:433: lines 433-457
		Dice::Values($objects, function ($o) use (&$blendType, &$into) {
			#src/jotun/utils/Dice.hx:434: lines 434-456
			Dice::All($o, function ($p, $v) use (&$blendType, &$into) {
				#src/jotun/utils/Dice.hx:435: lines 435-455
				if ($blendType === 0) {
					#src/jotun/utils/Dice.hx:437: characters 7-35
					\Reflect::setField($into, $p, $v);
				} else if ($blendType === 1) {
					#src/jotun/utils/Dice.hx:440: lines 440-442
					if (!\Reflect::hasField($into, $p)) {
						#src/jotun/utils/Dice.hx:441: characters 8-36
						\Reflect::setField($into, $p, $v);
					}
				} else if ($blendType === 2) {
					#src/jotun/utils/Dice.hx:445: lines 445-453
					if (\Reflect::hasField($into, $p)) {
						#src/jotun/utils/Dice.hx:446: characters 8-22
						$i = 0;
						#src/jotun/utils/Dice.hx:447: lines 447-449
						while (\Reflect::hasField($into, \Std::string($p) . "_" . ($i??'null'))) {
							#src/jotun/utils/Dice.hx:448: characters 9-12
							++$i;
						}
						#src/jotun/utils/Dice.hx:450: characters 8-46
						\Reflect::setField($into, $p, \Std::string($p) . "_" . ($i??'null'));
					} else {
						#src/jotun/utils/Dice.hx:452: characters 8-36
						\Reflect::setField($into, $p, $v);
					}
				}
			});
		});
		#src/jotun/utils/Dice.hx:458: characters 3-14
		return $into;
	}

	/**
	 * Execute the method in all object list (obj.method(...args))
	 * @param	q		Target object
	 * @param	method	Function name
	 * @param	args		Function arguments
	 * 
	 * @param mixed[]|\Array_hx $q
	 * @param string $method
	 * @param mixed[]|\Array_hx $args
	 * 
	 * @return IDiceRoll
	 */
	public static function Call ($q, $method, $args = null) {
		#src/jotun/utils/Dice.hx:170: characters 3-30
		if ($args === null) {
			#src/jotun/utils/Dice.hx:170: characters 21-30
			$args = new \Array_hx();
		}
		#src/jotun/utils/Dice.hx:171: lines 171-179
		return Dice::All($q, function ($p, $v) use (&$args, &$method) {
			#src/jotun/utils/Dice.hx:176: characters 6-59
			\Reflect::callMethod($v, \Reflect::field($v, $method), $args);
		});
	}

	/**
	 * For each object Value call each(value, previous)
	 * @param	q		Target object
	 * @param	each		Value handler, return true to stop propagation
	 * @param	complete	On propagation stop handler, call it with fail value
	 * 
	 * @param mixed $q
	 * @param \Closure $each
	 * 
	 * @return IDiceRoll
	 */
	public static function Comparer ($q, $each) {
		#src/jotun/utils/Dice.hx:104: characters 3-27
		$prev = null;
		#src/jotun/utils/Dice.hx:105: lines 105-111
		return Dice::All($q, function ($p, $v) use (&$each, &$prev) {
			#src/jotun/utils/Dice.hx:107: characters 5-27
			$r = $each($v, $prev);
			#src/jotun/utils/Dice.hx:108: characters 5-13
			$prev = $v;
			#src/jotun/utils/Dice.hx:109: characters 5-13
			return $r;
		});
	}

	/**
	 * Call a method f(a,b,a==b) while (a<b; ++a)
	 * @param	from
	 * @param	to
	 * @param	each
	 * @param	complete
	 * 
	 * @param mixed $from
	 * @param mixed $to
	 * @param mixed $each
	 * @param \Closure $complete
	 * @param int $increment
	 * 
	 * @return IDiceRoll
	 */
	public static function Count ($from, $to, $each, $complete = null, $increment = 1) {
		#src/jotun/utils/Dice.hx:189: lines 189-204
		if ($increment === null) {
			$increment = 1;
		}
		#src/jotun/utils/Dice.hx:190: characters 17-35
		$a = $from;
		$b = $to;
		#src/jotun/utils/Dice.hx:190: characters 3-36
		$a1 = (\is_nan($a) || \is_nan($b) ? \Math::$NaN : \min($a, $b));
		#src/jotun/utils/Dice.hx:191: characters 17-35
		$a = $from;
		$b = $to;
		#src/jotun/utils/Dice.hx:191: characters 3-36
		$b1 = (\is_nan($a) || \is_nan($b) ? \Math::$NaN : \max($a, $b));
		#src/jotun/utils/Dice.hx:192: characters 7-41
		$tmp = null;
		if ($increment !== null) {
			#src/jotun/utils/Dice.hx:192: characters 28-41
			$aNeg = false;
			$bNeg = $increment < 0;
			#src/jotun/utils/Dice.hx:192: characters 7-41
			$tmp = ($aNeg !== $bNeg ? $aNeg : 1 > $increment);
		} else {
			$tmp = true;
		}
		#src/jotun/utils/Dice.hx:192: characters 3-56
		if ($tmp) {
			#src/jotun/utils/Dice.hx:192: characters 43-56
			$increment = 1;
		}
		#src/jotun/utils/Dice.hx:193: lines 193-197
		while ($a1 < $b1) {
			#src/jotun/utils/Dice.hx:194: characters 13-19
			$a = $a1;
			#src/jotun/utils/Dice.hx:194: characters 30-44
			$int = $increment;
			$a1 = (($int < 0 ? 4294967296.0 + $int : $int + 0.0)) + $a1;
			#src/jotun/utils/Dice.hx:194: lines 194-196
			if ($each($a, $b1, Boot::equal($a1, $b1)) === true) {
				#src/jotun/utils/Dice.hx:195: characters 5-10
				break;
			}
		}
		#src/jotun/utils/Dice.hx:198: characters 3-23
		$c = Boot::equal($a1, $b1);
		#src/jotun/utils/Dice.hx:199: characters 64-75
		$int = $increment;
		#src/jotun/utils/Dice.hx:199: characters 3-78
		$r = new HxAnon([
			"from" => $from,
			"to" => $b1,
			"completed" => $c,
			"value" => $a1 - (($int < 0 ? 4294967296.0 + $int : $int + 0.0)),
		]);
		#src/jotun/utils/Dice.hx:200: lines 200-202
		if ($complete !== null) {
			#src/jotun/utils/Dice.hx:201: characters 4-15
			$complete($r);
		}
		#src/jotun/utils/Dice.hx:203: characters 3-11
		return $r;
	}

	/**
	 * Extract properties from a object and return a new object with then
	 * @param	q		A valid object
	 * @param	fields	Named fields to extract
	 * @return
	 * 
	 * @param mixed $q
	 * @param string[]|\Array_hx $fields
	 * 
	 * @return mixed
	 */
	public static function Extract ($q, $fields) {
		#src/jotun/utils/Dice.hx:121: characters 3-22
		$r = new HxAnon();
		#src/jotun/utils/Dice.hx:122: characters 3-86
		Dice::Values($fields, function ($v) use (&$r, &$q) {
			#src/jotun/utils/Dice.hx:122: characters 38-81
			\Reflect::setField($r, $v, \Reflect::field($q, $v));
		});
		#src/jotun/utils/Dice.hx:123: characters 3-11
		return $r;
	}

	/**
	 * @param mixed $of
	 * @param int $max
	 * 
	 * @return int
	 */
	public static function Length ($of, $max) {
		#src/jotun/utils/Dice.hx:462: lines 462-470
		if (($of instanceof \Array_hx)) {
			#src/jotun/utils/Dice.hx:463: characters 4-20
			return Boot::dynamicField($of, 'length');
		} else {
			#src/jotun/utils/Dice.hx:465: characters 4-18
			$i = 0;
			#src/jotun/utils/Dice.hx:466: lines 466-468
			Dice::Values($of, function ($v) use (&$i, &$max) {
				#src/jotun/utils/Dice.hx:467: characters 12-34
				if (($i += 1) !== $max) {
					#src/jotun/utils/Dice.hx:467: characters 26-34
					return $max === 0;
				} else {
					#src/jotun/utils/Dice.hx:467: characters 12-34
					return true;
				}
			});
			#src/jotun/utils/Dice.hx:469: characters 4-12
			return $i;
		}
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * @param int $a
	 * @param int $b
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function List ($data, $a = 0, $b = null) {
		#src/jotun/utils/Dice.hx:388: lines 388-409
		if ($a === null) {
			$a = 0;
		}
		#src/jotun/utils/Dice.hx:389: characters 3-32
		$copy = new \Array_hx();
		#src/jotun/utils/Dice.hx:390: characters 3-30
		$len = $data->length;
		#src/jotun/utils/Dice.hx:391: characters 3-33
		if ($b === null) {
			#src/jotun/utils/Dice.hx:391: characters 18-33
			$b = $data->length;
		}
		#src/jotun/utils/Dice.hx:392: characters 6-11
		$aNeg = $b < 0;
		$bNeg = $a < 0;
		#src/jotun/utils/Dice.hx:392: lines 392-407
		if (($aNeg !== $bNeg ? $aNeg : $b > $a)) {
			#src/jotun/utils/Dice.hx:393: lines 393-399
			while (true) {
				#src/jotun/utils/Dice.hx:393: characters 11-16
				$aNeg = $b < 0;
				$bNeg = $a < 0;
				#src/jotun/utils/Dice.hx:393: lines 393-399
				if (!(($aNeg !== $bNeg ? $aNeg : $b > $a))) {
					break;
				}
				#src/jotun/utils/Dice.hx:394: characters 9-17
				$aNeg1 = $a < 0;
				$bNeg1 = $len < 0;
				#src/jotun/utils/Dice.hx:394: lines 394-396
				if (($aNeg1 !== $bNeg1 ? $aNeg1 : $a >= $len)) {
					#src/jotun/utils/Dice.hx:395: characters 6-11
					break;
				}
				#src/jotun/utils/Dice.hx:397: characters 5-32
				$copy->offsetSet($copy->length, ($data->arr[$a] ?? null));
				#src/jotun/utils/Dice.hx:398: characters 5-8
				++$a;
			}
		} else {
			#src/jotun/utils/Dice.hx:400: characters 12-17
			$aNeg = $a < 0;
			$bNeg = $b < 0;
			#src/jotun/utils/Dice.hx:400: lines 400-407
			if (($aNeg !== $bNeg ? $aNeg : $a > $b)) {
				#src/jotun/utils/Dice.hx:401: lines 401-406
				while (true) {
					#src/jotun/utils/Dice.hx:401: characters 11-16
					$aNeg = $a < 0;
					$bNeg = $b < 0;
					#src/jotun/utils/Dice.hx:401: lines 401-406
					if (!(($aNeg !== $bNeg ? $aNeg : $a > $b))) {
						break;
					}
					#src/jotun/utils/Dice.hx:402: characters 9-16
					$aNeg1 = $len < 0;
					$bNeg1 = $a < 0;
					#src/jotun/utils/Dice.hx:402: lines 402-404
					if (($aNeg1 !== $bNeg1 ? $aNeg1 : $len > $a)) {
						#src/jotun/utils/Dice.hx:403: characters 6-33
						$copy->offsetSet($copy->length, ($data->arr[$a] ?? null));
					}
					#src/jotun/utils/Dice.hx:405: characters 5-8
					--$a;
				}
			}
		}
		#src/jotun/utils/Dice.hx:408: characters 3-14
		return $copy;
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * @param string[]|\Array_hx $props
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function Map ($data, $props) {
		#src/jotun/utils/Dice.hx:412: characters 3-34
		$mapped = new \Array_hx();
		#src/jotun/utils/Dice.hx:413: lines 413-425
		Dice::Values($data, function ($v) use (&$mapped, &$props) {
			#src/jotun/utils/Dice.hx:414: characters 4-24
			$o = new HxAnon();
			#src/jotun/utils/Dice.hx:415: characters 4-23
			$f = false;
			#src/jotun/utils/Dice.hx:416: lines 416-424
			Dice::Values($props, function ($v2) use (&$o, &$f, &$mapped, &$v) {
				#src/jotun/utils/Dice.hx:417: lines 417-423
				if (\Reflect::hasField($v, $v2)) {
					#src/jotun/utils/Dice.hx:418: characters 6-51
					\Reflect::setField($o, $v2, \Reflect::field($v, $v2));
					#src/jotun/utils/Dice.hx:419: lines 419-422
					if ($f === false) {
						#src/jotun/utils/Dice.hx:420: characters 7-15
						$f = true;
						#src/jotun/utils/Dice.hx:421: characters 7-21
						$mapped->arr[$mapped->length++] = $o;
					}
				}
			});
		});
		#src/jotun/utils/Dice.hx:426: characters 3-16
		return $mapped;
	}

	/**
	 * Ammount of values that fit in a table
	 * @param	list
	 * @param	values
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $table
	 * @param mixed $values
	 * @param int $limit
	 * 
	 * @return int
	 */
	public static function Match ($table, $values, $limit = 1) {
		#src/jotun/utils/Dice.hx:228: lines 228-240
		if ($limit === null) {
			$limit = 1;
		}
		#src/jotun/utils/Dice.hx:229: lines 229-231
		if (!($values instanceof \Array_hx)) {
			#src/jotun/utils/Dice.hx:230: characters 4-21
			$values = \Array_hx::wrap([$values]);
		}
		#src/jotun/utils/Dice.hx:232: characters 3-17
		$r = 0;
		#src/jotun/utils/Dice.hx:233: lines 233-238
		Dice::Values($values, function ($v) use (&$table, &$r, &$limit) {
			#src/jotun/utils/Dice.hx:234: lines 234-236
			if (\Lambda::indexOf($table, $v) !== -1) {
				#src/jotun/utils/Dice.hx:235: characters 5-8
				$r += 1;
			}
			#src/jotun/utils/Dice.hx:237: characters 4-25
			return ($limit -= 1) === 0;
		});
		#src/jotun/utils/Dice.hx:239: characters 3-11
		return $r;
	}

	/**
	 * Concat all mixed data into one array
	 * @param	data
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function Mix ($data) {
		#src/jotun/utils/Dice.hx:310: characters 3-29
		$r = new \Array_hx();
		#src/jotun/utils/Dice.hx:311: characters 3-62
		Dice::Values($data, function ($v) use (&$r) {
			#src/jotun/utils/Dice.hx:311: characters 43-58
			$r = $r->concat($v);
		});
		#src/jotun/utils/Dice.hx:312: characters 3-11
		return $r;
	}

	/**
	 * Return the first valid value, if no one found, will return an alternative value
	 * @param	from
	 * @param	alt
	 * @return
	 * 
	 * @param mixed $from
	 * @param mixed $alt
	 * 
	 * @return IDiceRoll
	 */
	public static function One ($from, $alt = null) {
		#src/jotun/utils/Dice.hx:213: lines 213-218
		if (($from instanceof \Array_hx)) {
			#src/jotun/utils/Dice.hx:214: lines 214-217
			Dice::Values($from, function ($v) use (&$from) {
				#src/jotun/utils/Dice.hx:215: characters 5-13
				$from = $v;
				#src/jotun/utils/Dice.hx:216: characters 5-24
				return $from === null;
			});
		}
		#src/jotun/utils/Dice.hx:219: characters 23-55
		$tmp = (Utils::isValid($from) ? $from : $alt);
		#src/jotun/utils/Dice.hx:219: characters 3-70
		return new HxAnon([
			"value" => $tmp,
			"object" => $from,
		]);
	}

	/**
	 * For each object Param call each(param)
	 * @param	q		Target object
	 * @param	each		Parameter handler, return true to stop propagation
	 * @param	complete	On propagation stop handler, call it with fail parameter
	 * 
	 * @param mixed $q
	 * @param mixed $each
	 * 
	 * @return IDiceRoll
	 */
	public static function Params ($q, $each) {
		#src/jotun/utils/Dice.hx:72: characters 3-69
		return Dice::All($q, function ($p, $v) use (&$each) {
			#src/jotun/utils/Dice.hx:72: characters 50-64
			return $each($p);
		});
	}

	/**
	 *
	 * @param	table
	 * @param	values
	 * 
	 * @param mixed[]|\Array_hx $table
	 * @param mixed $values
	 * 
	 * @return void
	 */
	public static function Put ($table, $values) {
		#src/jotun/utils/Dice.hx:293: lines 293-295
		if (!($values instanceof \Array_hx)) {
			#src/jotun/utils/Dice.hx:294: characters 4-21
			$values = \Array_hx::wrap([$values]);
		}
		#src/jotun/utils/Dice.hx:296: lines 296-301
		Dice::Values($values, function ($v) use (&$table) {
			#src/jotun/utils/Dice.hx:297: characters 4-41
			$i = \Lambda::indexOf($table, $v);
			#src/jotun/utils/Dice.hx:298: lines 298-300
			if ($i === -1) {
				#src/jotun/utils/Dice.hx:299: characters 5-18
				$table->arr[$table->length++] = $v;
			}
		});
	}

	/**
	 * Return a random value from the array
	 * @param	data
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return mixed
	 */
	public static function Random ($data) {
		#src/jotun/utils/Dice.hx:329: characters 3-52
		return ($data->arr[(int)((\mt_rand() / \mt_getrandmax() * $data->length))] ?? null);
	}

	/**
	 *
	 * @param	table
	 * @param	values object(s) to remove or filter f(x)
	 * @param limit optional for filter function, max objects to remove
	 * @return List of removed targets
	 * 
	 * @param mixed[]|\Array_hx $table
	 * @param mixed $values
	 * @param int $limit
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function Remove ($table, $values, $limit = -1) {
		#src/jotun/utils/Dice.hx:249: lines 249-274
		if ($limit === null) {
			$limit = -1;
		}
		#src/jotun/utils/Dice.hx:250: characters 3-29
		$r = new \Array_hx();
		#src/jotun/utils/Dice.hx:251: lines 251-272
		if (($values instanceof \Closure) || ($values instanceof HxClosure)) {
			#src/jotun/utils/Dice.hx:252: lines 252-262
			Dice::Values($values, function ($v) use (&$table, &$r, &$values, &$limit) {
				#src/jotun/utils/Dice.hx:253: lines 253-260
				if ($values($v) === true) {
					#src/jotun/utils/Dice.hx:254: lines 254-259
					if ($table->remove($v)) {
						#src/jotun/utils/Dice.hx:255: characters 7-22
						$r->offsetSet($r->length, $v);
						#src/jotun/utils/Dice.hx:256: lines 256-258
						if ($limit > 0) {
							#src/jotun/utils/Dice.hx:257: characters 8-15
							$limit -= 1;
						}
					}
				}
				#src/jotun/utils/Dice.hx:261: characters 5-22
				return $limit === 0;
			});
		} else {
			#src/jotun/utils/Dice.hx:264: lines 264-266
			if (!($values instanceof \Array_hx)) {
				#src/jotun/utils/Dice.hx:265: characters 5-22
				$values = \Array_hx::wrap([$values]);
			}
			#src/jotun/utils/Dice.hx:267: lines 267-271
			Dice::Values($values, function ($v) use (&$table, &$r) {
				#src/jotun/utils/Dice.hx:268: lines 268-270
				if ($table->remove($v)) {
					#src/jotun/utils/Dice.hx:269: characters 6-21
					$r->offsetSet($r->length, $v);
				}
			});
		}
		#src/jotun/utils/Dice.hx:273: characters 3-11
		return $r;
	}

	/**
	 *
	 * @param	table
	 * @param	each
	 * 
	 * @param mixed[]|\Array_hx $table
	 * @param mixed $each
	 * 
	 * @return void
	 */
	public static function Retrieve ($table, $each) {
		#src/jotun/utils/Dice.hx:282: lines 282-284
		while ($table->length > 0) {
			#src/jotun/utils/Dice.hx:283: characters 9-22
			if ($table->length > 0) {
				$table->length--;
			}
			#src/jotun/utils/Dice.hx:283: characters 4-23
			$each(\array_shift($table->arr));
		}
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * @param mixed $obj
	 * @param array $props
	 * 
	 * @return mixed
	 */
	public static function Search ($data, $obj, ...$props) {
		#src/jotun/utils/Dice.hx:316: lines 316-320
		return Dice::Values($data, function ($v) use (&$obj, &$props) {
			#src/jotun/utils/Dice.hx:317: lines 317-319
			return !Dice::Values($props, function ($v1) use (&$obj, &$v) {
				#src/jotun/utils/Dice.hx:318: characters 5-39
				return Boot::equal(\Reflect::field($v, $v1), $obj);
			})->completed;
		})->value;
	}

	/**
	 * Sort all data in a vector, case insensitive, special characteres of a string will be changed for better result (á=a,é=e,ñ=n,...etc)
	 * @param	data
	 * @param	key
	 * @param	numeric
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $data
	 * @param string $key
	 * @param bool $numeric
	 * @param bool $copy
	 * 
	 * @return mixed
	 */
	public static function Sort ($data, $key = null, $numeric = false, $copy = false) {
		#src/jotun/utils/Dice.hx:348: lines 348-386
		if ($numeric === null) {
			$numeric = false;
		}
		if ($copy === null) {
			$copy = false;
		}
		#src/jotun/utils/Dice.hx:349: characters 3-64
		$r = ($copy === true ? (new \Array_hx())->concat($data) : $data);
		#src/jotun/utils/Dice.hx:350: lines 350-384
		if ($numeric) {
			#src/jotun/utils/Dice.hx:352: lines 352-362
			if ($key !== null) {
				#src/jotun/utils/Dice.hx:353: lines 353-355
				ArraySort::sort($r, function ($a, $b) use (&$key) {
					#src/jotun/utils/Dice.hx:354: characters 13-67
					if (\Reflect::field($a, $key) < \Reflect::field($b, $key)) {
						#src/jotun/utils/Dice.hx:354: characters 61-63
						return -1;
					} else {
						#src/jotun/utils/Dice.hx:354: characters 66-67
						return 1;
					}
				});
			} else {
				#src/jotun/utils/Dice.hx:359: lines 359-361
				ArraySort::sort($r, function ($a, $b) {
					#src/jotun/utils/Dice.hx:360: characters 13-27
					if ($a < $b) {
						#src/jotun/utils/Dice.hx:360: characters 21-23
						return -1;
					} else {
						#src/jotun/utils/Dice.hx:360: characters 26-27
						return 1;
					}
				});
			}
		} else {
			#src/jotun/utils/Dice.hx:365: characters 4-28
			$cache = new HxAnon();
			#src/jotun/utils/Dice.hx:366: lines 366-371
			$cached = function ($q) use (&$cache) {
				#src/jotun/utils/Dice.hx:367: lines 367-369
				if (!\Reflect::hasField($cache, $q)) {
					#src/jotun/utils/Dice.hx:368: characters 6-52
					\Reflect::setField($cache, $q, SearchTag::clear($q));
				}
				#src/jotun/utils/Dice.hx:370: characters 5-35
				return \Reflect::field($cache, $q);
			};
			#src/jotun/utils/Dice.hx:373: lines 373-383
			if ($key !== null) {
				#src/jotun/utils/Dice.hx:374: lines 374-376
				ArraySort::sort($r, function ($a, $b) use (&$cached, &$key) {
					#src/jotun/utils/Dice.hx:375: characters 6-90
					return \Reflect::compare($cached(\Reflect::field($a, $key)), $cached(\Reflect::field($b, $key)));
				});
			} else {
				#src/jotun/utils/Dice.hx:380: lines 380-382
				ArraySort::sort($r, function ($a, $b) use (&$cached) {
					#src/jotun/utils/Dice.hx:381: characters 6-49
					return \Reflect::compare($cached($a), $cached($b));
				});
			}
		}
		#src/jotun/utils/Dice.hx:385: characters 3-11
		return $r;
	}

	/**
	 * Sum values from all values
	 * @param	q
	 * @return
	 * 
	 * @param mixed $q
	 * 
	 * @return float
	 */
	public static function Sum ($q) {
		#src/jotun/utils/Dice.hx:90: characters 3-25
		$ammount = 0;
		#src/jotun/utils/Dice.hx:91: lines 91-93
		Dice::Values($q, function ($v) use (&$ammount) {
			#src/jotun/utils/Dice.hx:92: characters 4-16
			$ammount += $v;
		});
		#src/jotun/utils/Dice.hx:94: characters 3-17
		return $ammount;
	}

	/**
	 * For each object Value call each(value)
	 * @param	q		Target object
	 * @param	each		Value handler, return true to stop propagation
	 * 
	 * @param mixed $q
	 * @param mixed $each
	 * 
	 * @return IDiceRoll
	 */
	public static function Values ($q, $each) {
		#src/jotun/utils/Dice.hx:81: characters 3-69
		return Dice::All($q, function ($p, $v) use (&$each) {
			#src/jotun/utils/Dice.hx:81: characters 50-64
			return $each($v);
		});
	}

	/**
	 * Call a mthod for each null value in array
	 * @param	q
	 * @param	length
	 * @param	handler
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $q
	 * @param int $from
	 * @param int $length
	 * @param \Closure $handler
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function nullFill ($q, $from, $length, $handler) {
		#src/jotun/utils/Dice.hx:153: characters 3-25
		$length = $from + $length;
		#src/jotun/utils/Dice.hx:154: lines 154-159
		while ($from < $length) {
			#src/jotun/utils/Dice.hx:155: lines 155-157
			if (($q->arr[$from] ?? null) === null) {
				#src/jotun/utils/Dice.hx:156: characters 5-28
				$q->offsetSet($from, $handler($from));
			}
			#src/jotun/utils/Dice.hx:158: characters 4-10
			++$from;
		}
		#src/jotun/utils/Dice.hx:160: characters 3-11
		return $q;
	}

	/**
	 * Remove NULL elements from Array
	 * @param	q
	 * @param stopOnNull
	 * @return
	 * 
	 * @param mixed[]|\Array_hx $q
	 * @param bool $stopOnNull
	 * 
	 * @return mixed[]|\Array_hx
	 */
	public static function nullSkip ($q, $stopOnNull = null) {
		#src/jotun/utils/Dice.hx:133: characters 3-29
		$r = new \Array_hx();
		#src/jotun/utils/Dice.hx:134: lines 134-141
		Dice::Values($q, function ($v) use (&$r, &$stopOnNull) {
			#src/jotun/utils/Dice.hx:135: lines 135-140
			if (($v !== null) && ($v !== "")) {
				#src/jotun/utils/Dice.hx:136: characters 5-14
				$r->arr[$r->length++] = $v;
				#src/jotun/utils/Dice.hx:137: characters 5-17
				return false;
			} else {
				#src/jotun/utils/Dice.hx:139: characters 5-22
				return $stopOnNull;
			}
		});
		#src/jotun/utils/Dice.hx:142: characters 3-11
		return $r;
	}

	/**
	 * @param mixed[]|\Array_hx $data
	 * 
	 * @return void
	 */
	public function __construct ($data) {
		#src/jotun/utils/Dice.hx:504: characters 3-19
		$this->data = $data;
		#src/jotun/utils/Dice.hx:505: characters 3-10
		$this->reset();
	}

	/**
	 * @return mixed
	 */
	public function current () {
		#src/jotun/utils/Dice.hx:513: characters 3-22
		return ($this->data->arr[$this->cursor] ?? null);
	}

	/**
	 * @return bool
	 */
	public function next () {
		#src/jotun/utils/Dice.hx:509: characters 3-32
		return $this->cursor++ < $this->data->length;
	}

	/**
	 * @return void
	 */
	public function reset () {
		#src/jotun/utils/Dice.hx:517: characters 3-14
		$this->cursor = -1;
	}
}

Boot::registerClass(Dice::class, 'jotun.utils.Dice');
