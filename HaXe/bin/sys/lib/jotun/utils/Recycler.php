<?php
/**
 * Generated by Haxe 4.3.4
 */

namespace jotun\utils;

use \php\Boot;

/**
 * ...
 * @author Rafael Moreira
 */
class Recycler {
	/**
	 * @var mixed
	 */
	public $_Object;
	/**
	 * @var mixed[]|\Array_hx
	 */
	public $_cache;

	/**
	 * @param mixed $Object
	 * 
	 * @return void
	 */
	public function __construct ($Object) {
		#src/jotun/utils/Recycler.hx:17: characters 38-40
		$this->_cache = new \Array_hx();
		#src/jotun/utils/Recycler.hx:22: characters 3-19
		$this->_Object = $Object;
	}

	/**
	 * @param IRecyclable $object
	 * 
	 * @return void
	 */
	public function drop ($object) {
		#src/jotun/utils/Recycler.hx:26: lines 26-28
		if (!$object->isDisposed) {
			#src/jotun/utils/Recycler.hx:27: characters 4-20
			$object->dispose();
		}
		#src/jotun/utils/Recycler.hx:29: characters 3-33
		$this->_cache->offsetSet($this->_cache->length, $object);
	}

	/**
	 * @param array $rest
	 * 
	 * @return mixed
	 */
	public function get (...$rest) {
		#src/jotun/utils/Recycler.hx:33: characters 3-33
		$object = null;
		#src/jotun/utils/Recycler.hx:34: lines 34-39
		if ($this->_cache->length === 0) {
			#src/jotun/utils/Recycler.hx:35: characters 30-37
			$tmp = $this->_Object;
			#src/jotun/utils/Recycler.hx:35: characters 4-44
			$object = new $tmp->phpClassName($rest);
		} else {
			#src/jotun/utils/Recycler.hx:37: characters 13-25
			$_this = $this->_cache;
			if ($_this->length > 0) {
				$_this->length--;
			}
			$object = \array_pop($_this->arr);
			#src/jotun/utils/Recycler.hx:38: characters 4-50
			\Reflect::callMethod($object, Boot::getInstanceClosure($object, 'build'), \Array_hx::wrap($rest));
		}
		#src/jotun/utils/Recycler.hx:40: characters 3-16
		return $object;
	}
}

Boot::registerClass(Recycler::class, 'jotun.utils.Recycler');
