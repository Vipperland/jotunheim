<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\math;

use \php\_Boot\HxDynamicStr;
use \php\Boot;

/**
 * ...
 * @author
 */
class JMath {
	/**
	 * @param float $x
	 * 
	 * @return float
	 */
	public static function Sigmoid ($x) {
		#src/jotun/math/JMath.hx:11: characters 3-33
		return 1 / (1 + \exp(-$x));
	}

	/**
	 * @param mixed $date
	 * 
	 * @return int
	 */
	public static function calcAge ($date) {
		#src/jotun/math/JMath.hx:15: characters 3-38
		$a = \Date::now()->getTime();
		#src/jotun/math/JMath.hx:16: characters 3-123
		$b = Boot::deref(((is_string($date) ? \Date::fromString(HxDynamicStr::wrap($date)->split("/")->join("-")) : \Date::fromTime($date))))->getTime();
		#src/jotun/math/JMath.hx:17: characters 3-40
		return ~(~(($a - $b) / 31557600000));
	}

	/**
	 * @param mixed $o
	 * @param int $min
	 * @param int $max
	 * 
	 * @return bool
	 */
	public static function isBetween ($o, $min, $max) {
		#src/jotun/math/JMath.hx:22: lines 22-32
		if ($o !== null) {
			#src/jotun/math/JMath.hx:23: lines 23-29
			if (!(is_float($o) || is_int($o))) {
				#src/jotun/math/JMath.hx:24: lines 24-28
				if (($o instanceof \Array_hx) || is_string($o)) {
					#src/jotun/math/JMath.hx:25: characters 6-18
					$o = Boot::dynamicField($o, 'length');
				} else {
					#src/jotun/math/JMath.hx:27: characters 6-18
					return false;
				}
			}
		} else {
			#src/jotun/math/JMath.hx:31: characters 4-16
			return false;
		}
		#src/jotun/math/JMath.hx:33: lines 33-39
		if ($max === null) {
			#src/jotun/math/JMath.hx:34: characters 4-19
			return $o >= $min;
		} else if ($min === null) {
			#src/jotun/math/JMath.hx:36: characters 4-19
			return $o <= $max;
		} else if ($o >= $min) {
			#src/jotun/math/JMath.hx:38: characters 23-31
			return $o <= $max;
		} else {
			#src/jotun/math/JMath.hx:38: characters 11-31
			return false;
		}
	}

	/**
	 * @param float $value
	 * @param float $pct
	 * 
	 * @return float
	 */
	public function reversePctOf ($value, $pct) {
		#src/jotun/math/JMath.hx:43: characters 3-35
		return $value / (1 - $pct / 100);
	}
}

Boot::registerClass(JMath::class, 'jotun.math.JMath');
