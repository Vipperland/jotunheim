<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\modules;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \jotun\utils\Filler;
use \jotun\Jotun;
use \jotun\utils\Dice;
use \sys\io\File;
use \haxe\Json;
use \php\_Boot\HxString;

/**
 * ...
 * @author Rafael Moreira <vipperland@live.com,rafael@gateofsirius.com>
 */
class ModLib {
	/**
	 * @var mixed
	 */
	static public $CACHE;
	/**
	 * @var mixed
	 */
	static public $DATA;
	/**
	 * @var bool
	 */
	static public $_init;

	/**
	 * @var \Closure[]|\Array_hx
	 */
	public $_predata;

	/**
	 * @return void
	 */
	public function __construct () {
		#src/jotun/modules/ModLib.hx:66: lines 66-71
		if (ModLib::$_init !== true) {
			#src/jotun/modules/ModLib.hx:67: characters 4-16
			ModLib::$_init = true;
			#src/jotun/modules/ModLib.hx:68: characters 4-17
			$this->_predata = new \Array_hx();
		} else {
			#src/jotun/modules/ModLib.hx:70: characters 4-9
			throw new \Error("Can't create instance of ModLib. Use Jotun.resources instead of new ModLib().");
		}
	}

	/**
	 * @param string $name
	 * @param mixed $data
	 * 
	 * @return mixed
	 */
	public function _sanitize ($name, $data) {
		#src/jotun/modules/ModLib.hx:61: characters 3-89
		Dice::Values($this->_predata, function ($v) use (&$name, &$data) {
			#src/jotun/modules/ModLib.hx:61: characters 64-84
			$data = $v($name, $data);
		});
		#src/jotun/modules/ModLib.hx:62: characters 3-14
		return $data;
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function buffer ($name = null) {
		#src/jotun/modules/ModLib.hx:346: lines 346-350
		if (($name !== null) && ($name !== "")) {
			#src/jotun/modules/ModLib.hx:347: characters 4-36
			return \Reflect::field(ModLib::$DATA, $name);
		} else {
			#src/jotun/modules/ModLib.hx:349: characters 4-22
			return Boot::dynamicField(ModLib::$DATA, 'buffer');
		}
	}

	/**
	 * Check if a plugins exists
	 * @param	module
	 * @return
	 * 
	 * @param string $module
	 * 
	 * @return bool
	 */
	public function exists ($module) {
		#src/jotun/modules/ModLib.hx:90: characters 3-32
		$module = \mb_strtolower($module);
		#src/jotun/modules/ModLib.hx:91: characters 3-41
		return \Reflect::hasField(ModLib::$CACHE, $module);
	}

	/**
	 * Write module with custom data in the flow to be imported by Jotun Client
	 * @param	name
	 * @param	data
	 * @param	repeat
	 * @param	sufix
	 * 
	 * @param mixed $name
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function export ($name, $data = null) {
		#src/jotun/modules/ModLib.hx:387: lines 387-406
		$_gthis = $this;
		#src/jotun/modules/ModLib.hx:388: characters 4-38
		echo("<noscript jtn-module>");
		#src/jotun/modules/ModLib.hx:389: lines 389-404
		if (($name instanceof \Array_hx)) {
			#src/jotun/modules/ModLib.hx:390: lines 390-400
			Dice::Values($name, function ($v) use (&$name, &$data, &$_gthis) {
				#src/jotun/modules/ModLib.hx:391: lines 391-399
				if (is_string($v)) {
					#src/jotun/modules/ModLib.hx:392: characters 7-54
					echo(\Std::string("[Module:{\"name\":\"" . \Std::string($name) . "\"}]\x0D"));
					#src/jotun/modules/ModLib.hx:393: characters 7-29
					$_gthis->print($_gthis->get($name, $data));
				} else if (\Reflect::hasField($v, "info")) {
					#src/jotun/modules/ModLib.hx:395: characters 7-28
					echo("[Module:");
					#src/jotun/modules/ModLib.hx:396: characters 7-40
					echo(\Std::string(Json::phpJsonEncode(Boot::dynamicField($v, 'info'), null, null)));
					#src/jotun/modules/ModLib.hx:397: characters 7-23
					echo("]\x0D");
					#src/jotun/modules/ModLib.hx:398: characters 7-28
					$_gthis->print(Boot::dynamicField($v, 'name'), Boot::dynamicField($v, 'data'));
				}
			});
		} else {
			#src/jotun/modules/ModLib.hx:402: characters 5-52
			echo(\Std::string("[Module:{\"name\":\"" . \Std::string($name) . "\"}]\x0D"));
			#src/jotun/modules/ModLib.hx:403: characters 5-20
			$this->get($name, $data);
		}
		#src/jotun/modules/ModLib.hx:405: characters 4-28
		echo("</noscript>");
	}

	/**
	 * Get module content
	 * @param	name
	 * @param	data
	 * @param	alt
	 * @return
	 * 
	 * @param string $name
	 * @param mixed $data
	 * @param string $alt
	 * 
	 * @return string
	 */
	public function get ($name, $data = null, $alt = null) {
		#src/jotun/modules/ModLib.hx:309: characters 3-28
		$name = \mb_strtolower($name);
		#src/jotun/modules/ModLib.hx:310: lines 310-312
		if (!$this->exists($name)) {
			#src/jotun/modules/ModLib.hx:311: characters 11-122
			if ($alt !== null) {
				#src/jotun/modules/ModLib.hx:311: characters 25-28
				return $alt;
			} else {
				#src/jotun/modules/ModLib.hx:311: characters 31-122
				return "<span style='color:#ff0000;font-weight:bold;'>Undefined [Module:" . ($name??'null') . "]</span><br/>";
			}
		}
		#src/jotun/modules/ModLib.hx:313: characters 3-51
		$content = \Reflect::field(ModLib::$CACHE, $name);
		#src/jotun/modules/ModLib.hx:314: characters 3-31
		$data = $this->_sanitize($name, $data);
		#src/jotun/modules/ModLib.hx:315: characters 10-61
		if ($data !== null) {
			#src/jotun/modules/ModLib.hx:315: characters 27-51
			return Filler::to($content, $data);
		} else {
			#src/jotun/modules/ModLib.hx:315: characters 54-61
			return $content;
		}
	}

	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	public function image ($name) {
		#src/jotun/modules/ModLib.hx:342: characters 3-42
		return \Reflect::field(Boot::dynamicField(ModLib::$DATA, 'images'), $name);
	}

	/**
	 * Get module content as json object
	 * @param	name
	 * @param	data
	 * @return
	 * 
	 * @param string $name
	 * @param mixed $data
	 * 
	 * @return mixed
	 */
	public function object ($name, $data = null) {
		#src/jotun/modules/ModLib.hx:325: lines 325-337
		if (\Reflect::hasField(ModLib::$DATA, $name)) {
			#src/jotun/modules/ModLib.hx:326: characters 4-36
			$data = \Reflect::field(ModLib::$DATA, $name);
		} else {
			#src/jotun/modules/ModLib.hx:328: characters 4-41
			$val = $this->get($name, $data, "");
			#src/jotun/modules/ModLib.hx:329: lines 329-336
			if ($val !== null) {
				#src/jotun/modules/ModLib.hx:330: lines 330-335
				try {
					#src/jotun/modules/ModLib.hx:331: characters 6-28
					$data = Json::phpJsonDecode($val);
				} catch(\Throwable $_g) {
					#src/jotun/modules/ModLib.hx:333: characters 6-89
					Jotun::log("\x09ModLib => Can't create object for [Module:" . ($name??'null') . "]", 3);
					#src/jotun/modules/ModLib.hx:334: characters 6-17
					$data = null;
				}
			}
		}
		#src/jotun/modules/ModLib.hx:338: characters 3-14
		return $data;
	}

	/**
	 * Pre filter all get data
	 * @param	handler
	 * 
	 * @param \Closure $handler
	 * 
	 * @return void
	 */
	public function onDataRequest ($handler) {
		#src/jotun/modules/ModLib.hx:79: lines 79-81
		if (\Lambda::indexOf($this->_predata, $handler) === -1) {
			#src/jotun/modules/ModLib.hx:80: characters 4-39
			$this->_predata->offsetSet($this->_predata->length, $handler);
		}
	}

	/**
	 * Cache a file to post write
	 * @param	file
	 * @return
	 * 
	 * @param string $file
	 * 
	 * @return bool
	 */
	public function prepare ($file) {
		#src/jotun/modules/ModLib.hx:362: characters 8-47
		$tmp = null;
		if ($file !== null) {
			#src/jotun/modules/ModLib.hx:362: characters 24-47
			\clearstatcache(true, $file);
			#src/jotun/modules/ModLib.hx:362: characters 8-47
			$tmp = \file_exists($file);
		} else {
			$tmp = false;
		}
		#src/jotun/modules/ModLib.hx:362: lines 362-365
		if ($tmp) {
			#src/jotun/modules/ModLib.hx:363: characters 5-42
			$this->register($file, File::getContent($file));
			#src/jotun/modules/ModLib.hx:364: characters 5-16
			return true;
		}
		#src/jotun/modules/ModLib.hx:366: characters 4-16
		return false;
	}

	/**
	 * Write module and fill with custom data in the flow
	 * @param	name
	 * @param	data
	 * @param	repeat
	 * @param	sufix
	 * 
	 * @param string $name
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function print ($name, $data = null) {
		#src/jotun/modules/ModLib.hx:377: characters 4-30
		echo(\Std::string($this->get($name, $data)));
	}

	/**
	 * Register a module
	 * @param	file
	 * @param	content
	 * @param	data
	 * 
	 * @param string $file
	 * @param string $content
	 * 
	 * @return void
	 */
	public function register ($file, $content) {
		#src/jotun/modules/ModLib.hx:106: lines 106-299
		$_gthis = $this;
		#src/jotun/modules/ModLib.hx:107: characters 3-55
		$content = HxString::split($content, "[module:{")->join("[!MOD!]");
		#src/jotun/modules/ModLib.hx:108: characters 3-55
		$content = HxString::split($content, "[Module:{")->join("[!MOD!]");
		#src/jotun/modules/ModLib.hx:109: characters 3-52
		$sur = HxString::split($content, "[!MOD!]");
		#src/jotun/modules/ModLib.hx:110: characters 3-34
		$total = $sur->length - 1;
		#src/jotun/modules/ModLib.hx:111: characters 3-21
		$count = 0;
		#src/jotun/modules/ModLib.hx:112: characters 3-22
		$errors = 0;
		#src/jotun/modules/ModLib.hx:113: characters 3-21
		$fdata = 0;
		#src/jotun/modules/ModLib.hx:114: lines 114-298
		if ($sur->length > 1) {
			#src/jotun/modules/ModLib.hx:115: characters 4-87
			Jotun::log("ModLib => PARSING " . ($file??'null') . " MODULES (~" . ($total??'null') . ")", 1);
			#src/jotun/modules/ModLib.hx:119: lines 119-253
			Dice::All($sur, function ($p, $v) use (&$fdata, &$count, &$errors, &$total, &$file, &$_gthis, &$content) {
				#src/jotun/modules/ModLib.hx:120: lines 120-251
				if ($p > 0) {
					#src/jotun/modules/ModLib.hx:121: characters 6-13
					$count += 1;
					#src/jotun/modules/ModLib.hx:122: characters 6-34
					$i = HxString::indexOf($v, "}]");
					#src/jotun/modules/ModLib.hx:123: lines 123-250
					if ($i !== -1) {
						#src/jotun/modules/ModLib.hx:124: characters 7-61
						$mod = Json::phpJsonDecode("{" . (\mb_substr($v, 0, $i)??'null') . "}");
						#src/jotun/modules/ModLib.hx:125: characters 7-30
						$path = $file;
						#src/jotun/modules/ModLib.hx:126: lines 126-134
						if ($mod->name === null) {
							#src/jotun/modules/ModLib.hx:127: characters 8-23
							$mod->name = $file;
						} else if ($mod->name === "[]") {
							#src/jotun/modules/ModLib.hx:129: characters 8-20
							$path = ($path??'null') . "[]";
							#src/jotun/modules/ModLib.hx:130: characters 8-56
							Jotun::log("\x09\x09@ PUSH " . ($mod->name??'null'), 1);
						} else {
							#src/jotun/modules/ModLib.hx:132: characters 8-30
							$path = ($path??'null') . "#" . ($mod->name??'null');
							#src/jotun/modules/ModLib.hx:133: characters 8-91
							Jotun::log("\x09\x09@ NAME " . ($mod->name??'null') . " (" . ($count??'null') . "/" . ($total??'null') . ")", 1);
						}
						#src/jotun/modules/ModLib.hx:135: lines 135-137
						if ($_gthis->exists($mod->name)) {
							#src/jotun/modules/ModLib.hx:136: characters 8-70
							Jotun::log("\x09ModLib => !!! OVERRIDING " . ($path??'null'), 2);
						}
						#src/jotun/modules/ModLib.hx:138: characters 7-40
						$end = HxString::indexOf($v, "/EOF;");
						#src/jotun/modules/ModLib.hx:139: characters 17-81
						$content = \trim(HxString::substring($v, $i + 2, ($end === -1 ? mb_strlen($v) : $end)));
						#src/jotun/modules/ModLib.hx:140: lines 140-148
						if (($mod->type === null) || ($mod->type === "null") || ($mod->type === "html")) {
							#src/jotun/modules/ModLib.hx:141: characters 8-73
							$content = HxString::split(HxString::split($content, "\x0D\x0A")->join("\x0A"), "\x0D")->join("\x0A");
							#src/jotun/modules/ModLib.hx:142: lines 142-144
							while (\mb_substr($content, 0, 1) === "\x0D") {
								#src/jotun/modules/ModLib.hx:143: characters 9-55
								$content = HxString::substring($content, 1, mb_strlen($content));
							}
							#src/jotun/modules/ModLib.hx:145: lines 145-147
							while (\mb_substr($content, -1, null) === "\x0A") {
								#src/jotun/modules/ModLib.hx:146: characters 9-59
								$content = HxString::substring($content, 0, mb_strlen($content) - 1);
							}
						}
						#src/jotun/modules/ModLib.hx:149: lines 149-175
						if ($mod->require !== null) {
							#src/jotun/modules/ModLib.hx:150: characters 8-42
							$incT = $mod->require->length;
							#src/jotun/modules/ModLib.hx:151: characters 8-25
							$incC = 1;
							#src/jotun/modules/ModLib.hx:152: characters 8-95
							Jotun::log("\x09\x09\x09> INCLUDING MODULES IN '" . ($mod->name??'null') . "' (" . ($incT??'null') . ")", 1);
							#src/jotun/modules/ModLib.hx:153: lines 153-174
							Dice::Values($mod->require, function ($v) use (&$incC, &$_gthis, &$content) {
								#src/jotun/modules/ModLib.hx:154: lines 154-172
								if ($_gthis->exists($v)) {
									#src/jotun/modules/ModLib.hx:156: lines 156-166
									Dice::All(HxString::split($content, "{{@include:" . ($v??'null') . ",data:"), function ($p, $v2) use (&$_gthis, &$content, &$v) {
										#src/jotun/modules/ModLib.hx:157: lines 157-165
										if ($p > 0) {
											#src/jotun/modules/ModLib.hx:158: characters 12-56
											$pieces = ((HxString::split($v2, "}}")->arr[0] ?? null)??'null') . "}";
											#src/jotun/modules/ModLib.hx:159: lines 159-164
											try {
												#src/jotun/modules/ModLib.hx:160: characters 13-51
												$data = Json::phpJsonDecode($pieces);
												#src/jotun/modules/ModLib.hx:161: characters 13-101
												$content = HxString::split($content, "{{@include:" . ($v??'null') . ",data:" . ($pieces??'null') . "}}")->join($_gthis->get($v, $data));
											} catch(\Error $e) {
												#src/jotun/modules/ModLib.hx:163: characters 13-99
												Jotun::log("\x09\x09\x09\x09ERROR: Can't parse module injection data for " . ($v??'null') . ".", 3);
											}
										}
									});
									#src/jotun/modules/ModLib.hx:168: characters 10-72
									$content = HxString::split($content, "{{@include:" . ($v??'null') . "}}")->join($_gthis->get($v));
									#src/jotun/modules/ModLib.hx:169: characters 10-73
									Jotun::log("\x09\x09\x09\x09+ INCLUDED '" . ($v??'null') . "' #" . ($incC??'null'), 1);
								} else {
									#src/jotun/modules/ModLib.hx:171: characters 10-71
									Jotun::log("\x09\x09\x09\x09- MISSING '" . ($v??'null') . "' #" . ($incC??'null'), 3);
								}
								#src/jotun/modules/ModLib.hx:173: characters 9-15
								$incC += 1;
							});
						}
						#src/jotun/modules/ModLib.hx:176: lines 176-201
						if ($mod->inject !== null) {
							#src/jotun/modules/ModLib.hx:177: characters 8-42
							$injT = $mod->require->length;
							#src/jotun/modules/ModLib.hx:178: characters 8-25
							$injC = 1;
							#src/jotun/modules/ModLib.hx:179: characters 8-93
							Jotun::log("\x09\x09\x09INJECTING MODULES IN '" . ($mod->name??'null') . "' (" . ($injT??'null') . ")", 1);
							#src/jotun/modules/ModLib.hx:180: lines 180-200
							Dice::Values($mod->inject, function ($v) use (&$mod, &$_gthis, &$content, &$injC) {
								#src/jotun/modules/ModLib.hx:181: lines 181-199
								if ($_gthis->exists($v)) {
									#src/jotun/modules/ModLib.hx:183: lines 183-193
									Dice::All(HxString::split($content, "{{@inject:" . ($v??'null') . ",data:"), function ($p, $v2) use (&$_gthis, &$content, &$v) {
										#src/jotun/modules/ModLib.hx:184: lines 184-192
										if ($p > 0) {
											#src/jotun/modules/ModLib.hx:185: characters 12-56
											$pieces = ((HxString::split($v2, "}}")->arr[0] ?? null)??'null') . "}";
											#src/jotun/modules/ModLib.hx:186: lines 186-191
											try {
												#src/jotun/modules/ModLib.hx:187: characters 13-51
												$data = Json::phpJsonDecode($pieces);
												#src/jotun/modules/ModLib.hx:188: characters 13-100
												$content = HxString::split($_gthis->get($v, $data), "{{@inject:" . ($v??'null') . ",data:" . ($pieces??'null') . "}}")->join($content);
											} catch(\Error $e) {
												#src/jotun/modules/ModLib.hx:190: characters 13-99
												Jotun::log("\x09\x09\x09\x09ERROR: Can't parse module injection data for " . ($v??'null') . ".", 3);
											}
										}
									});
									#src/jotun/modules/ModLib.hx:195: characters 10-78
									$content = HxString::split($_gthis->get($v), "{{@inject:" . ($mod->name??'null') . "}}")->join($content);
									#src/jotun/modules/ModLib.hx:196: characters 10-61
									Jotun::log("\x09\x09\x09\x09+ INJECTED '" . ($v??'null') . "' #" . ($injC??'null'), 1);
								} else {
									#src/jotun/modules/ModLib.hx:198: characters 10-71
									Jotun::log("\x09\x09\x09\x09- MISSING '" . ($v??'null') . "' #" . ($injC??'null'), 3);
								}
							});
						}
						#src/jotun/modules/ModLib.hx:202: lines 202-205
						if ($mod->data !== null) {
							#src/jotun/modules/ModLib.hx:203: characters 19-39
							$tmp = Json::phpJsonDecode($mod->data);
							#src/jotun/modules/ModLib.hx:203: characters 8-39
							$mod->data = $tmp;
							#src/jotun/modules/ModLib.hx:204: characters 8-46
							$content = Filler::to($content, $mod->data);
						}
						#src/jotun/modules/ModLib.hx:206: lines 206-210
						if ($mod->replace !== null) {
							#src/jotun/modules/ModLib.hx:207: lines 207-209
							Dice::Values($mod->replace, function ($v) use (&$content) {
								#src/jotun/modules/ModLib.hx:208: characters 9-49
								$content = HxString::split($content, ($v->arr[0] ?? null))->join(($v->arr[1] ?? null));
							});
						}
						#src/jotun/modules/ModLib.hx:211: lines 211-237
						if ($mod->type !== null) {
							#src/jotun/modules/ModLib.hx:212: lines 212-236
							if ($mod->type === "data") {
								#src/jotun/modules/ModLib.hx:213: lines 213-225
								try {
									#src/jotun/modules/ModLib.hx:214: characters 10-17
									$fdata += 1;
									#src/jotun/modules/ModLib.hx:215: characters 10-39
									$content = Json::phpJsonDecode($content);
									#src/jotun/modules/ModLib.hx:216: lines 216-220
									if ($mod->name === "[]") {
										#src/jotun/modules/ModLib.hx:217: characters 11-36
										Boot::dynamicField(ModLib::$DATA, 'buffer')->push($content);
									} else {
										#src/jotun/modules/ModLib.hx:219: characters 11-52
										\Reflect::setField(ModLib::$DATA, $mod->name, $content);
									}
									#src/jotun/modules/ModLib.hx:221: characters 10-22
									return false;
								} catch(\Throwable $_g) {
									#src/jotun/modules/ModLib.hx:222: characters 17-18
									$e = Exception::caught($_g)->unwrap();
									#src/jotun/modules/ModLib.hx:223: characters 10-18
									$errors += 1;
									#src/jotun/modules/ModLib.hx:224: characters 10-110
									Jotun::log("\x09\x09\x09ERROR! Can't parse DATA[" . ($mod->name??'null') . "] \x0A\x0A " . ($content??'null') . "\x0A\x0A" . \Std::string($e), 3);
								}
							} else if ($mod->type === "image") {
								#src/jotun/modules/ModLib.hx:235: characters 9-57
								\Reflect::setField(Boot::dynamicField(ModLib::$DATA, 'images'), $mod->name, $content);
							}
						}
						#src/jotun/modules/ModLib.hx:245: characters 7-45
						$n = \mb_strtolower($mod->name);
						#src/jotun/modules/ModLib.hx:246: characters 7-42
						\Reflect::setField(ModLib::$CACHE, $n, $content);
						#src/jotun/modules/ModLib.hx:247: characters 7-45
						\Reflect::setField(ModLib::$CACHE, "@" . ($n??'null'), $path);
					} else {
						#src/jotun/modules/ModLib.hx:249: characters 7-99
						Jotun::log("\x09ModLib => CONFIG ERROR " . ($file??'null') . "(" . (\mb_substr($v, 0, 15)??'null') . "...)", 3);
					}
				}
				#src/jotun/modules/ModLib.hx:252: characters 5-17
				return false;
			});
			#src/jotun/modules/ModLib.hx:272: characters 4-122
			Jotun::log("\x09\x09! PARSED: " . ($count - $errors) . "/" . ($total??'null') . ", Data: " . ($fdata??'null') . ", Errors: " . ($errors??'null'), 1);
		} else {
			#src/jotun/modules/ModLib.hx:296: characters 5-57
			\Reflect::setField(ModLib::$CACHE, \mb_strtolower($file), $content);
		}
	}

	/**
	 * @param string $module
	 * 
	 * @return void
	 */
	public function remove ($module) {
		#src/jotun/modules/ModLib.hx:95: lines 95-97
		if ($this->exists($module)) {
			#src/jotun/modules/ModLib.hx:96: characters 4-38
			\Reflect::deleteField(ModLib::$CACHE, $module);
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$CACHE = new HxAnon();
		self::$DATA = new HxAnon([
			"buffer" => new \Array_hx(),
			"images" => new HxAnon(),
		]);
	}
}

Boot::registerClass(ModLib::class, 'jotun.modules.ModLib');
ModLib::__hx__init();
