<?php

// Generated by Haxe 3.4.7
class jotun_net_Header {
	public function __construct() {}
	public function access($origin = null, $methods = null, $headers = null, $credentials = null) {
		if($credentials === null) {
			$credentials = true;
		}
		if($headers === null) {
			$headers = "Origin,Content-Type,Accept,Authorization,X-Request-With";
		}
		if($methods === null) {
			$methods = "GET,POST,OPTIONS";
		}
		if($origin === null) {
			$origin = "*";
		}
		header("Access-Control-Allow-Origin" . ": " . _hx_string_or_null($origin));
		header("Access-Control-Allow-Methods" . ": " . _hx_string_or_null($methods));
		header("Access-Control-Allow-Headers" . ": " . _hx_string_or_null($headers));
		{
			$v = Std::string($credentials);
			header("Access-Control-Allow-Credentials" . ": " . _hx_string_or_null($v));
		}
	}
	public function content($type) {
		if(!jotun_net_Header::$hasType) {
			jotun_net_Header::$hasType = true;
			header("content-type" . ": " . _hx_string_or_null($type));
		}
	}
	public function setHTML($data = null) {
		$this->content(jotun_net_Header::$HTML);
		if($data !== null) {
			{
				$v = Std::string(_hx_field($data, "length"));
				header("Content-Length" . ": " . _hx_string_or_null($v));
			}
			php_Lib::hprint($data);
		}
	}
	public function setJSON($data = null, $encode = null) {
		$this->content(jotun_net_Header::$JSON);
		if($data !== null) {
			$data = jotun_serial_JsonTool::stringify($data, null, "\x09");
			$this->writeData($data, $encode);
		}
	}
	public function setTEXT($data = null, $encode = null) {
		$this->content(jotun_net_Header::$TEXT);
		if($data !== null) {
			if(Std::is($data, _hx_qtype("Array"))) {
				$data = $data->join("\x0D");
			}
			$this->writeData($data, $encode);
		}
	}
	public function setSRU($data = null, $encode = null) {
		$this->content(jotun_net_Header::$TEXT);
		if($data !== null) {
			if(Std::is($data, _hx_qtype("Array"))) {
				$data = $data->join("\x0D");
			}
			$this->writeData($data, $encode);
		}
	}
	public function writeData($data, $encode) {
		if($data !== null) {
			if($encode === true) {
				$data = jotun_serial_IOTools::encodeBase64($data);
			}
			$compress = _hx_field($this->getClientHeaders(), "ACCEPT_ENCODING");
			if(_hx_index_of($compress, "x-gzip", null) !== -1) {
				$compress = "x-gzip";
			} else {
				if(_hx_index_of($compress, "gzip", null) !== -1) {
					$compress = "gzip";
				} else {
					$compress = null;
				}
			}
			$length = strlen($data);
			if($compress !== null) {
				$data = gzcompress($data, 1);
				header("Content-Encoding" . ": " . _hx_string_or_null($compress));
			}
			{
				$v = Std::string(strlen($data));
				header("Content-Length" . ": " . _hx_string_or_null($v));
			}
			if($compress !== null) {
				php_Lib::hprint("\x1F‹\x08\x00\x00\x00\x00\x00");
			}
			php_Lib::hprint(_hx_substr($data, 0, $length));
		}
	}
	public function setURI($value) {
		header("location" . ": " . _hx_string_or_null($value));
	}
	public function setOAuth($token) {
		header("Authorization" . ": " . _hx_string_or_null($token));
	}
	public function getOAuth() {
		return $this->getClientHeader("Authorization");
	}
	public function getClientHeader($name) {
		$tmp = $this->getClientHeaders();
		return Reflect::field($tmp, strtoupper($name));
	}
	public function getClientHeaders() {
		if(_hx_field(_hx_qtype("jotun.net.Header"), "_client_headers") === null) {
			jotun_net_Header::$_client_headers = _hx_anonymous(array());
			$h = php_Lib::hashOfAssociativeArray($_SERVER);
			{
				$k = $h->keys();
				while($k->hasNext()) {
					$k1 = $k->next();
					$sk = strtoupper($k1);
					if(_hx_substr($sk, 0, 5) === "HTTP_") {
						$o = jotun_net_Header::$_client_headers;
						$field = _hx_substr($sk, 5, null);
						$value = $h->get($k1);
						$o->{$field} = $value;
						unset($value,$o,$field);
					} else {
						$tmp = null;
						if(_hx_substr($sk, 0, 8) !== "CONTENT_") {
							$tmp = _hx_substr($sk, 0, 4) === "AUTH";
						} else {
							$tmp = true;
						}
						if($tmp) {
							$o1 = jotun_net_Header::$_client_headers;
							$value1 = $h->get($k1);
							$o1->{$sk} = $value1;
							unset($value1,$o1);
						}
						unset($tmp);
					}
					unset($sk,$k1);
				}
			}
		}
		return jotun_net_Header::$_client_headers;
	}
	static $HTML = "text/html;charset=utf-8";
	static $TEXT = "text/plain;charset=utf-8";
	static $JSON = "application/json;charset=utf-8";
	static $JSONP = "application/javascript;charset=utf-8";
	static $hasType = false;
	static function _client_headers() { $args = func_get_args(); return call_user_func_array(self::$_client_headers, $args); }
	static $_client_headers;
	function __toString() { return 'jotun.net.Header'; }
}
