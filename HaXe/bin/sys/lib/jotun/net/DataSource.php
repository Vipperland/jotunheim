<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\net;

use \php\Boot;
use \jotun\tools\Utils;
use \jotun\utils\Dice;
use \haxe\Json;
use \php\_Boot\HxString;

/**
 * ...
 * @author Rafael Moreira
 */
class DataSource {
	/**
	 * @var mixed
	 */
	public $data;

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($data) {
		#src/jotun/net/DataSource.hx:16: characters 3-19
		$this->data = $data;
	}

	/**
	 * @param string $q
	 * @param string $split
	 * 
	 * @return mixed[]|\Array_hx
	 */
	final public function array ($q, $split = ",") {
		#src/jotun/net/DataSource.hx:43: characters 3-36
		if ($split === null) {
			$split = ",";
		}
		return HxString::split($this->string($q, ""), $split);
	}

	/**
	 * @param string $q
	 * @param bool $alt
	 * 
	 * @return bool
	 */
	final public function bool ($q, $alt = null) {
		#src/jotun/net/DataSource.hx:27: characters 3-36
		return Utils::boolean($this->get($q, $alt));
	}

	/**
	 * @param string $q
	 * 
	 * @return bool
	 */
	public function exists ($q) {
		#src/jotun/net/DataSource.hx:55: characters 10-40
		if ($this->data !== null) {
			#src/jotun/net/DataSource.hx:55: characters 26-40
			return \Reflect::hasField($this->data, $q);
		} else {
			#src/jotun/net/DataSource.hx:55: characters 10-40
			return false;
		}
	}

	/**
	 * @param string $q
	 * @param float $alt
	 * 
	 * @return float
	 */
	final public function float ($q, $alt = null) {
		#src/jotun/net/DataSource.hx:35: characters 3-37
		return \Std::parseFloat($this->get($q, $alt));
	}

	/**
	 * @param string $q
	 * @param mixed $alt
	 * 
	 * @return mixed
	 */
	public function get ($q, $alt = null) {
		#src/jotun/net/DataSource.hx:20: lines 20-22
		if ($this->exists($q)) {
			#src/jotun/net/DataSource.hx:21: characters 11-22
			return \Reflect::field($this->data, $q);
		}
		#src/jotun/net/DataSource.hx:23: characters 3-13
		return $alt;
	}

	/**
	 * @param string $q
	 * @param int $alt
	 * 
	 * @return int
	 */
	final public function int ($q, $alt = null) {
		#src/jotun/net/DataSource.hx:31: characters 3-35
		return \Std::parseInt($this->get($q, $alt));
	}

	/**
	 * @return bool
	 */
	public function isEmpty () {
		#src/jotun/net/DataSource.hx:59: lines 59-61
		return Dice::Params($this->data, function ($p) {
			#src/jotun/net/DataSource.hx:60: characters 4-15
			return true;
		})->completed;
	}

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	final public function merge ($data) {
		#src/jotun/net/DataSource.hx:51: characters 3-30
		Dice::Blend($data, $this->data);
	}

	/**
	 * @param string $q
	 * 
	 * @return mixed
	 */
	final public function parse ($q) {
		#src/jotun/net/DataSource.hx:47: characters 10-37
		return Json::phpJsonDecode($this->string($q, "{}"));
	}

	/**
	 * @param string $q
	 * 
	 * @return void
	 */
	public function remove ($q) {
		#src/jotun/net/DataSource.hx:65: characters 3-17
		\Reflect::deleteField($this->data, $q);
	}

	/**
	 * @param string $q
	 * @param string $alt
	 * 
	 * @return string
	 */
	final public function string ($q, $alt = null) {
		#src/jotun/net/DataSource.hx:39: characters 3-21
		return $this->get($q, $alt);
	}

	/**
	 * @return string
	 */
	public function toString () {
		#src/jotun/net/DataSource.hx:69: characters 10-30
		return Json::phpJsonEncode($this->data, null, null);
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(DataSource::class, 'jotun.net.DataSource');
