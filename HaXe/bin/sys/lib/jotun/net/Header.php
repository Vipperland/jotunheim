<?php
/**
 * Generated by Haxe 4.3.6
 */

namespace jotun\net;

use \jotun\serial\Packager;
use \jotun\gaming\dataform\Pulsar;
use \php\_Boot\HxAnon;
use \jotun\serial\JsonTool;
use \jotun\utils\Omnitools;
use \php\Boot;
use \php\Lib;
use \jotun\Jotun;
use \jotun\utils\Dice;
use \php\_Boot\HxString;

/**
 * ...
 * @author Rafael Moreira
 */
class Header {
	/**
	 * @var string
	 */
	static public $HTML = "text/html; charset=utf-8";
	/**
	 * @var string
	 */
	static public $JSON = "application/json; charset=utf-8";
	/**
	 * @var string
	 */
	static public $JSONP = "application/javascript; charset=utf-8";
	/**
	 * @var string
	 */
	static public $PULSAR = "text/pulsar; charset=utf-8";
	/**
	 * @var string
	 */
	static public $TEXT = "text/plain; charset=utf-8";
	/**
	 * @var mixed
	 */
	static public $_client_headers;
	/**
	 * @var bool
	 */
	static public $_no_compression;
	/**
	 * @var bool
	 */
	static public $hasType = false;

	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param string $data
	 * @param int $chunk
	 * 
	 * @return string
	 */
	public function _createPieces ($data, $chunk) {
		#src/jotun/net/Header.hx:123: characters 3-17
		$f = 0;
		#src/jotun/net/Header.hx:124: characters 3-27
		$t = mb_strlen($data);
		#src/jotun/net/Header.hx:125: characters 3-24
		$copy = "";
		#src/jotun/net/Header.hx:126: lines 126-132
		while ($f < $t) {
			#src/jotun/net/Header.hx:127: characters 4-33
			$copy = ($copy??'null') . (\mb_substr($data, $f, $chunk)??'null');
			#src/jotun/net/Header.hx:128: characters 4-14
			$f += $chunk;
			#src/jotun/net/Header.hx:129: lines 129-131
			if ($f < $t) {
				#src/jotun/net/Header.hx:130: characters 5-17
				$copy = ($copy??'null') . "\x0A";
			}
		}
		#src/jotun/net/Header.hx:133: characters 3-14
		return $copy;
	}

	/**
	 * @param string $data
	 * @param bool $encode
	 * @param int $chunk
	 * 
	 * @return void
	 */
	public function _writeData ($data, $encode = null, $chunk = null) {
		#src/jotun/net/Header.hx:137: lines 137-163
		if ($data !== null) {
			#src/jotun/net/Header.hx:138: lines 138-144
			if ($encode === true) {
				#src/jotun/net/Header.hx:139: characters 5-39
				$data = Packager::encodeBase64($data);
				#src/jotun/net/Header.hx:140: lines 140-143
				if (($chunk !== null) && ($chunk >= 40)) {
					#src/jotun/net/Header.hx:141: characters 6-48
					\header("Content-Chunk" . ": " . ("" . ($chunk??'null')));
					#src/jotun/net/Header.hx:142: characters 6-39
					$data = $this->_createPieces($data, $chunk);
				}
			}
			#src/jotun/net/Header.hx:145: lines 145-161
			if (!Header::$_no_compression) {
				#src/jotun/net/Header.hx:146: characters 5-62
				$compress = Boot::dynamicField($this->getClientHeaders(), 'ACCEPT_ENCODING');
				#src/jotun/net/Header.hx:147: lines 147-153
				if (HxString::indexOf($compress, "x-gzip") !== -1) {
					#src/jotun/net/Header.hx:148: characters 6-25
					$compress = "x-gzip";
				} else if (HxString::indexOf($compress, "gzip") !== -1) {
					#src/jotun/net/Header.hx:150: characters 6-23
					$compress = "gzip";
				} else {
					#src/jotun/net/Header.hx:152: characters 6-21
					$compress = null;
				}
				#src/jotun/net/Header.hx:154: lines 154-157
				if ($compress !== null) {
					#src/jotun/net/Header.hx:155: characters 6-65
					$data = gzcompress($data,1);
					#src/jotun/net/Header.hx:156: characters 6-49
					\header("Content-Encoding" . ": " . ($compress??'null'));
				}
				#src/jotun/net/Header.hx:158: lines 158-160
				if ($compress !== null) {
					#src/jotun/net/Header.hx:159: characters 6-95
					$data = "\x1F" . \Std::string(chr(139)) . "\x08\x00\x00\x00\x00\x00" . ($data??'null');
				}
			}
			#src/jotun/net/Header.hx:162: characters 4-19
			echo(\Std::string($data));
		}
	}

	/**
	 * @param bool $credentials
	 * 
	 * @return void
	 */
	public function allowCredentials ($credentials) {
		#src/jotun/net/Header.hx:67: characters 3-77
		\header("Access-Control-Allow-Credentials" . ": " . \Std::string($credentials));
	}

	/**
	 * @param array $headers
	 * 
	 * @return void
	 */
	public function allowHeaders (...$headers) {
		#src/jotun/net/Header.hx:63: characters 3-78
		\header("Access-Control-Allow-Headers" . ": " . (\Array_hx::wrap($headers)->join(", ")??'null'));
	}

	/**
	 * @param array $methods
	 * 
	 * @return void
	 */
	public function allowMethods (...$methods) {
		#src/jotun/net/Header.hx:59: characters 3-78
		\header("Access-Control-Allow-Methods" . ": " . (\Array_hx::wrap($methods)->join(", ")??'null'));
	}

	/**
	 * @param string $domain
	 * 
	 * @return void
	 */
	public function allowOrigin ($domain) {
		#src/jotun/net/Header.hx:55: characters 3-55
		\header("Access-Control-Allow-Origin" . ": " . ($domain??'null'));
	}

	/**
	 * @param string $type
	 * 
	 * @return void
	 */
	public function content ($type) {
		#src/jotun/net/Header.hx:83: lines 83-86
		if (!Header::$hasType) {
			#src/jotun/net/Header.hx:84: characters 4-18
			Header::$hasType = true;
			#src/jotun/net/Header.hx:85: characters 4-39
			\header("Content-Type" . ": " . ($type??'null'));
		}
	}

	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	public function getClientHeader ($name) {
		#src/jotun/net/Header.hx:187: characters 3-63
		return \Reflect::field($this->getClientHeaders(), \mb_strtoupper($name));
	}

	/**
	 * @return mixed
	 */
	public function getClientHeaders () {
		#src/jotun/net/Header.hx:191: lines 191-203
		if (Header::$_client_headers === null) {
			#src/jotun/net/Header.hx:192: characters 4-19
			Header::$_client_headers = new HxAnon();
			#src/jotun/net/Header.hx:193: characters 4-73
			$h = Lib::hashOfAssociativeArray($_SERVER);
			#src/jotun/net/Header.hx:194: characters 14-22
			$data = \array_values(\array_map("strval", \array_keys($h->data)));
			$_g_current = 0;
			$_g_length = \count($data);
			$_g_data = $data;
			#src/jotun/net/Header.hx:194: lines 194-202
			while ($_g_current < $_g_length) {
				$k = $_g_data[$_g_current++];
				#src/jotun/net/Header.hx:195: characters 5-37
				$sk = \mb_strtoupper($k);
				#src/jotun/net/Header.hx:196: lines 196-201
				if (\mb_substr($sk, 0, 5) === "HTTP_") {
					#src/jotun/net/Header.hx:197: characters 6-63
					\Reflect::setField(Header::$_client_headers, \mb_substr($sk, 5, null), ($h->data[$k] ?? null));
				} else if ((\mb_substr($sk, 0, 8) === "CONTENT_") || (\mb_substr($sk, 0, 4) === "AUTH")) {
					#src/jotun/net/Header.hx:200: characters 6-53
					\Reflect::setField(Header::$_client_headers, $sk, ($h->data[$k] ?? null));
				}
			}
		}
		#src/jotun/net/Header.hx:204: characters 3-25
		return Header::$_client_headers;
	}

	/**
	 * @param string $cookie
	 * 
	 * @return string
	 */
	public function getOAuth ($cookie = null) {
		#src/jotun/net/Header.hx:175: lines 175-179
		if ($cookie !== null) {
			#src/jotun/net/Header.hx:176: characters 4-29
			return $this->readCookie($cookie);
		} else {
			#src/jotun/net/Header.hx:178: characters 4-43
			return $this->getClientHeader("Authorization");
		}
	}

	/**
	 * @param mixed $origin
	 * 
	 * @return bool
	 */
	public function isOrigin ($origin) {
		#src/jotun/net/Header.hx:44: characters 3-64
		$c = \mb_strtolower(Jotun::$domain->server->HTTP_ORIGIN);
		#src/jotun/net/Header.hx:45: lines 45-51
		if (($origin instanceof \Array_hx)) {
			#src/jotun/net/Header.hx:46: lines 46-48
			return !Dice::Values($origin, function ($v) use (&$c) {
				#src/jotun/net/Header.hx:47: characters 5-30
				return HxString::indexOf($c, $v) !== -1;
			})->completed;
		} else {
			#src/jotun/net/Header.hx:50: characters 4-34
			return HxString::indexOf($c, $origin) !== -1;
		}
	}

	/**
	 * @param string $method
	 * 
	 * @return bool
	 */
	public function isRequestMethod ($method) {
		#src/jotun/net/Header.hx:40: characters 3-82
		return \mb_strtoupper(Jotun::$domain->server->REQUEST_METHOD) === \mb_strtoupper($method);
	}

	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	public function readCookie ($name) {
		#src/jotun/net/Header.hx:208: characters 10-50
		return \session_get_cookie_params()[$name];
	}

	/**
	 * @param string $value
	 * 
	 * @return void
	 */
	public function setContentEncoding ($value) {
		#src/jotun/net/Header.hx:71: characters 3-92
		Header::$_no_compression = ($value === null) || ($value === "none") || ($value === "no") || ($value === "disable");
		#src/jotun/net/Header.hx:72: characters 3-70
		\header("Content-Encoding" . ": " . (((Header::$_no_compression ? "none" : $value))??'null'));
	}

	/**
	 * @return void
	 */
	public function setFreeAccess () {
		#src/jotun/net/Header.hx:76: characters 3-19
		$this->allowOrigin("*");
		#src/jotun/net/Header.hx:77: characters 3-67
		$this->allowMethods("POST", "GET", "DELETE", "PUT", "PATCH", "OPTIONS");
		#src/jotun/net/Header.hx:78: characters 3-86
		$this->allowHeaders("Origin", "Content-Type", "Accept", "Authorization", "X-Request-With");
		#src/jotun/net/Header.hx:79: characters 3-25
		$this->allowCredentials(true);
	}

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function setHTML ($data = null) {
		#src/jotun/net/Header.hx:90: characters 3-16
		$this->content(Header::$HTML);
		#src/jotun/net/Header.hx:91: lines 91-94
		if ($data !== null) {
			#src/jotun/net/Header.hx:92: characters 4-60
			\header("Content-Length" . ": " . \Std::string(Boot::dynamicField($data, 'length')));
			#src/jotun/net/Header.hx:93: characters 4-19
			echo(\Std::string($data));
		}
	}

	/**
	 * @param mixed $data
	 * @param bool $encode
	 * @param int $chunk
	 * @param bool $pretty
	 * 
	 * @return void
	 */
	public function setJSON ($data = null, $encode = null, $chunk = null, $pretty = null) {
		#src/jotun/net/Header.hx:98: characters 3-16
		$this->content(Header::$JSON);
		#src/jotun/net/Header.hx:99: lines 99-102
		if ($data !== null) {
			#src/jotun/net/Header.hx:100: characters 4-63
			$data = JsonTool::stringify($data, null, ($pretty ? "\x09" : null));
			#src/jotun/net/Header.hx:101: characters 4-35
			$this->_writeData($data, $encode, $chunk);
		}
	}

	/**
	 * @param string $token
	 * 
	 * @return void
	 */
	public function setOAuth ($token) {
		#src/jotun/net/Header.hx:171: characters 3-40
		\header("Authorization" . ": " . ($token??'null'));
	}

	/**
	 * @param string $name
	 * @param string $value
	 * @param int $expire
	 * @param string $domain
	 * @param bool $secure
	 * @param bool $http
	 * 
	 * @return void
	 */
	public function setOAuthCookie ($name, $value, $expire = 0, $domain = null, $secure = false, $http = false) {
		#src/jotun/net/Header.hx:183: characters 3-57
		if ($expire === null) {
			$expire = 0;
		}
		if ($secure === null) {
			$secure = false;
		}
		if ($http === null) {
			$http = false;
		}
		$this->writeCookie($name, $value, $expire, $domain, $secure, $http);
	}

	/**
	 * @param Pulsar $data
	 * @param bool $encode
	 * @param int $chunk
	 * 
	 * @return void
	 */
	public function setPulsar ($data = null, $encode = null, $chunk = null) {
		#src/jotun/net/Header.hx:116: characters 3-18
		$this->content(Header::$PULSAR);
		#src/jotun/net/Header.hx:117: lines 117-119
		if ($data !== null) {
			#src/jotun/net/Header.hx:118: characters 4-52
			$this->_writeData($data->toString($encode), $encode, $chunk);
		}
	}

	/**
	 * @param mixed $data
	 * @param bool $encode
	 * @param int $chunk
	 * 
	 * @return void
	 */
	public function setTEXT ($data = null, $encode = null, $chunk = null) {
		#src/jotun/net/Header.hx:106: characters 3-16
		$this->content(Header::$TEXT);
		#src/jotun/net/Header.hx:107: lines 107-112
		if ($data !== null) {
			#src/jotun/net/Header.hx:108: lines 108-110
			if (($data instanceof \Array_hx)) {
				#src/jotun/net/Header.hx:109: characters 5-27
				$data = $data->join("\x0A");
			}
			#src/jotun/net/Header.hx:111: characters 4-35
			$this->_writeData($data, $encode, $chunk);
		}
	}

	/**
	 * @param string $value
	 * 
	 * @return void
	 */
	public function setURI ($value) {
		#src/jotun/net/Header.hx:167: characters 3-35
		\header("location" . ": " . ($value??'null'));
	}

	/**
	 * @param string $name
	 * @param string $value
	 * @param int $expire
	 * @param string $domain
	 * @param bool $secure
	 * @param bool $http
	 * 
	 * @return void
	 */
	public function writeCookie ($name, $value, $expire = 0, $domain = null, $secure = false, $http = false) {
		#src/jotun/net/Header.hx:212: characters 3-108
		if ($expire === null) {
			$expire = 0;
		}
		if ($secure === null) {
			$secure = false;
		}
		if ($http === null) {
			$http = false;
		}
		#src/jotun/net/Header.hx:212: characters 63-78
		$int = ($expire + 1) * 24;
		#src/jotun/net/Header.hx:212: characters 3-108
		\setcookie($name, $value, (int)(Omnitools::timeFromNow(($int < 0 ? 4294967296.0 + $int : $int + 0.0))), "/", $domain, $secure, $http);
	}
}

Boot::registerClass(Header::class, 'jotun.net.Header');
