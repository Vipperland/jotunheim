<?php
/**
 * Generated by Haxe 4.3.4
 */

namespace jotun\net;

use \php\Boot;
use \jotun\Jotun;
use \jotun\tools\Utils;
use \jotun\utils\Dice;
use \jotun\errors\Error;
use \php\_Boot\HxString;

/**
 * ...
 * @author Rafael Moreira <vipperland@live.com,rafael@gateofsirius.com>
 */
class Loader implements ILoader {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param string $u
	 * 
	 * @return HttpRequest
	 */
	public function _getReq ($u) {
		#src/jotun/net/Loader.hx:45: characters 3-28
		return new HttpRequest($u);
	}

	/**
	 * @param string $file
	 * @param mixed $data
	 * @param \Closure $handler
	 * 
	 * @return void
	 */
	public function module ($file, $data = null, $handler = null) {
		#src/jotun/net/Loader.hx:187: characters 3-37
		$r = $this->_getReq($file);
		#src/jotun/net/Loader.hx:191: lines 191-196
		$r->onData = function ($d) use (&$file, &$handler) {
			#src/jotun/net/Loader.hx:192: characters 4-37
			Jotun::$resources->register($file, $d);
			#src/jotun/net/Loader.hx:193: lines 193-195
			if ($handler !== null) {
				#src/jotun/net/Loader.hx:194: characters 5-46
				$handler(new Request(true, $d, null, $file));
			}
		};
		#src/jotun/net/Loader.hx:197: lines 197-201
		$r->onError = function ($d) use (&$file, &$handler) {
			#src/jotun/net/Loader.hx:198: lines 198-200
			if ($handler !== null) {
				#src/jotun/net/Loader.hx:199: characters 5-62
				$handler(new Request(false, null, new Error(-1, $d), $file));
			}
		};
		#src/jotun/net/Loader.hx:215: characters 4-20
		$r->request(false);
	}

	/**
	 * @param string $url
	 * @param mixed $data
	 * @param string $method
	 * @param \Closure $handler
	 * @param mixed $headers
	 * 
	 * @return void
	 */
	public function request ($url, $data = null, $method = "POST", $handler = null, $headers = null) {
		#src/jotun/net/Loader.hx:222: lines 222-291
		if ($method === null) {
			$method = "POST";
		}
		#src/jotun/net/Loader.hx:225: lines 225-227
		if ($method !== null) {
			#src/jotun/net/Loader.hx:226: characters 4-33
			$method = \mb_strtoupper($method);
		}
		#src/jotun/net/Loader.hx:228: characters 3-39
		$is_post = $method === "POST";
		#src/jotun/net/Loader.hx:229: characters 3-37
		$is_get = $method === "GET";
		#src/jotun/net/Loader.hx:230: characters 3-49
		$is_data = is_string($data);
		#src/jotun/net/Loader.hx:232: lines 232-234
		if ($is_get && ($data !== null)) {
			#src/jotun/net/Loader.hx:233: characters 4-72
			$url = ($url??'null') . ((((HxString::indexOf($url, "?") === -1 ? "?" : "&"))??'null') . (Utils::paramsOf($data)??'null'));
		}
		#src/jotun/net/Loader.hx:236: characters 3-36
		$r = $this->_getReq($url);
		#src/jotun/net/Loader.hx:241: lines 241-247
		if (!$is_data && ($data !== null)) {
			#src/jotun/net/Loader.hx:245: characters 5-35
			Dice::All($data, Boot::getInstanceClosure($r, 'setParameter'));
		}
		#src/jotun/net/Loader.hx:248: lines 248-252
		if ($headers !== null) {
			#src/jotun/net/Loader.hx:249: lines 249-251
			Dice::All($headers, function ($p, $v) use (&$r) {
				#src/jotun/net/Loader.hx:250: characters 5-22
				$r->setHeader($p, $v);
			});
		}
		#src/jotun/net/Loader.hx:253: lines 253-273
		$r->onData = function ($d) use (&$url, &$r, &$handler) {
			#src/jotun/net/Loader.hx:254: lines 254-272
			if ($handler !== null) {
				#src/jotun/net/Loader.hx:255: characters 5-42
				$hdrs = $r->responseHeaders;
				#src/jotun/net/Loader.hx:270: characters 6-52
				$handler(new Request(true, $d, null, $url, $hdrs));
			}
		};
		#src/jotun/net/Loader.hx:274: lines 274-278
		$r->onError = function ($d) use (&$handler) {
			#src/jotun/net/Loader.hx:275: lines 275-277
			if ($handler !== null) {
				#src/jotun/net/Loader.hx:276: characters 5-56
				$handler(new Request(false, null, new Error(-1, $d)));
			}
		};
		#src/jotun/net/Loader.hx:288: characters 4-22
		$r->request($is_post);
	}
}

Boot::registerClass(Loader::class, 'jotun.net.Loader');
