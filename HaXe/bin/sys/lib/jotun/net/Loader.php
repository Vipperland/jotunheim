<?php
/**
 * Generated by Haxe 4.3.0
 */

namespace jotun\net;

use \php\Boot;
use \jotun\Jotun;
use \jotun\errors\Error;

/**
 * ...
 * @author Rafael Moreira <vipperland@live.com,rafael@gateofsirius.com>
 */
class Loader implements ILoader {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param string $u
	 * 
	 * @return HttpRequest
	 */
	public function _getReq ($u) {
		#src/jotun/net/Loader.hx:26: characters 3-28
		return new HttpRequest($u);
	}

	/**
	 * @param string $file
	 * @param mixed $data
	 * @param \Closure $handler
	 * 
	 * @return void
	 */
	public function module ($file, $data = null, $handler = null) {
		#src/jotun/net/Loader.hx:87: characters 3-37
		$r = $this->_getReq($file);
		#src/jotun/net/Loader.hx:91: lines 91-96
		$r->onData = function ($d) use (&$file, &$handler) {
			#src/jotun/net/Loader.hx:92: characters 4-37
			Jotun::$resources->register($file, $d);
			#src/jotun/net/Loader.hx:93: lines 93-95
			if ($handler !== null) {
				#src/jotun/net/Loader.hx:94: characters 5-46
				$handler(new Request(true, $d, null, $file));
			}
		};
		#src/jotun/net/Loader.hx:97: lines 97-101
		$r->onError = function ($d) use (&$file, &$handler) {
			#src/jotun/net/Loader.hx:98: lines 98-100
			if ($handler !== null) {
				#src/jotun/net/Loader.hx:99: characters 5-62
				$handler(new Request(false, null, new Error(-1, $d), $file));
			}
		};
		#src/jotun/net/Loader.hx:115: characters 4-20
		$r->request(false);
	}

	/**
	 * @param string $url
	 * @param mixed $data
	 * @param string $method
	 * @param \Closure $handler
	 * @param mixed $headers
	 * 
	 * @return void
	 */
	public function request ($url, $data = null, $method = "POST", $handler = null, $headers = null) {
		#src/jotun/net/Loader.hx:125: characters 3-9
		if ($method === null) {
			$method = "POST";
		}
		return;
	}
}

Boot::registerClass(Loader::class, 'jotun.net.Loader');
