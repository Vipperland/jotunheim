<?php

// Generated by Haxe 3.4.7
class sirius_utils_Dice {
	public function __construct(){}
	static function All($q, $each, $complete = null) {
		$v = null;
		$p = null;
		$i = true;
		$k = 0;
		if($q !== null) {
			$tmp = null;
			if(!Std::is($q, _hx_qtype("php.NativeArray"))) {
				$tmp = Std::is($q, _hx_qtype("Array"));
			} else {
				$tmp = true;
			}
			if($tmp) {
				$q = php_Lib::objectOfAssociativeArray($q);
			}
			{
				$_g = 0;
				$_g1 = Reflect::fields($q);
				while($_g < $_g1->length) {
					$p1 = $_g1[$_g];
					$_g = $_g + 1;
					$v = Reflect::field($q, $p1);
					if(Reflect::isFunction($v)) {
						continue;
					}
					if(_hx_equal(call_user_func_array($each, array($p1, $v)), true)) {
						$i = false;
						break;
					} else {
						$k = $k + 1;
						$p1 = null;
						$v = null;
					}
					unset($p1);
				}
			}
		}
		$r = _hx_anonymous(array("param" => $p, "value" => $v, "completed" => $i, "object" => $q, "keys" => $k));
		if($complete !== null) {
			call_user_func_array($complete, array($r));
		}
		return $r;
	}
	static function Params($q, $each, $complete = null) {
		return sirius_utils_Dice::All($q, array(new _hx_lambda(array(&$each), "sirius_utils_Dice_0"), 'execute'), $complete);
	}
	static function Values($q, $each, $complete = null) {
		return sirius_utils_Dice::All($q, array(new _hx_lambda(array(&$each), "sirius_utils_Dice_1"), 'execute'), $complete);
	}
	static function Call($q, $method, $args = null) {
		if($args === null) {
			$args = (new _hx_array(array()));
		}
		return sirius_utils_Dice::All($q, array(new _hx_lambda(array(&$args, &$method), "sirius_utils_Dice_2"), 'execute'), null);
	}
	static function Count($from, $to, $each, $complete = null, $increment = null) {
		if($increment === null) {
			$increment = 1;
		}
		$a = Math::min($from, $to);
		$b = Math::max($from, $to);
		$tmp = null;
		if($increment !== null) {
			$aNeg = 1 < 0;
			$bNeg = $increment < 0;
			if($aNeg !== $bNeg) {
				$tmp = $aNeg;
			} else {
				$tmp = 1 > $increment;
			}
		} else {
			$tmp = true;
		}
		if($tmp) {
			$increment = 1;
		}
		while($a < $b) {
			$a1 = $a;
			$int = $increment;
			$a2 = null;
			if($int < 0) {
				$a2 = 4294967296.0 + $int;
			} else {
				$a2 = $int + 0.0;
			}
			$a = $a2 + $a;
			if(call_user_func_array($each, array($a1, $b, _hx_equal($a, $b))) === true) {
				break;
			}
			unset($int,$a2,$a1);
		}
		$c = _hx_equal($a, $b);
		$int1 = $increment;
		$r = null;
		if($int1 < 0) {
			$r = 4294967296.0 + $int1;
		} else {
			$r = $int1 + 0.0;
		}
		$r1 = _hx_anonymous(array("from" => $from, "to" => $b, "completed" => $c, "value" => $a - $r));
		if($complete !== null) {
			call_user_func_array($complete, array($r1));
		}
		return $r1;
	}
	static function One($from, $alt = null) {
		if(Std::is($from, _hx_qtype("Array"))) {
			sirius_utils_Dice::Values($from, array(new _hx_lambda(array(&$from), "sirius_utils_Dice_3"), 'execute'), null);
		}
		$tmp = null;
		if(sirius_tools_Utils::isValid($from, null)) {
			$tmp = $from;
		} else {
			$tmp = $alt;
		}
		return _hx_anonymous(array("value" => $tmp, "object" => $from));
	}
	static function Match($table, $values, $limit = null) {
		if($limit === null) {
			$limit = 0;
		}
		if(!Std::is($values, _hx_qtype("Array"))) {
			$values = (new _hx_array(array($values)));
		}
		$r = 0;
		sirius_utils_Dice::Values($values, array(new _hx_lambda(array(&$limit, &$r, &$table), "sirius_utils_Dice_4"), 'execute'), null);
		return $r;
	}
	static function Remove($table, $values) {
		if(!Std::is($values, _hx_qtype("Array"))) {
			$values = (new _hx_array(array($values)));
		}
		sirius_utils_Dice::Values($values, array(new _hx_lambda(array(&$table), "sirius_utils_Dice_5"), 'execute'), null);
	}
	static function Mix($data) {
		$r = (new _hx_array(array()));
		sirius_utils_Dice::Values($data, array(new _hx_lambda(array(&$r), "sirius_utils_Dice_6"), 'execute'), null);
		return $r;
	}
	static function Random($data) {
		$tmp = Math::random();
		return $data[Std::int($tmp * $data->length)];
	}
	static function Table($data, $key = null, $numeric = null, $copy = null) {
		if($copy === null) {
			$copy = false;
		}
		if($numeric === null) {
			$numeric = false;
		}
		$r = null;
		if($copy === true) {
			$r = _hx_deref((new _hx_array(array())))->concat($data);
		} else {
			$r = $data;
		}
		if($numeric) {
			if($key !== null) {
				haxe_ds_ArraySort::sort($r, array(new _hx_lambda(array(&$key), "sirius_utils_Dice_7"), 'execute'));
			} else {
				haxe_ds_ArraySort::sort($r, array(new _hx_lambda(array(), "sirius_utils_Dice_8"), 'execute'));
			}
		} else {
			if($key !== null) {
				haxe_ds_ArraySort::sort($r, array(new _hx_lambda(array(&$key), "sirius_utils_Dice_9"), 'execute'));
			} else {
				haxe_ds_ArraySort::sort($r, array(new _hx_lambda(array(), "sirius_utils_Dice_10"), 'execute'));
			}
		}
		return $r;
	}
	static function hList($data, $a = null, $b = null) {
		if($a === null) {
			$a = 0;
		}
		$copy = (new _hx_array(array()));
		$len = $data->length;
		if($b === null) {
			$b = $data->length;
		}
		$aNeg = $b < 0;
		$bNeg = $a < 0;
		$tmp = null;
		if($aNeg !== $bNeg) {
			$tmp = $aNeg;
		} else {
			$tmp = $b > $a;
		}
		if($tmp) {
			while(true) {
				$aNeg1 = $b < 0;
				$bNeg1 = $a < 0;
				$tmp1 = null;
				if($aNeg1 !== $bNeg1) {
					$tmp1 = $aNeg1;
				} else {
					$tmp1 = $b > $a;
				}
				if(!$tmp1) {
					break;
				}
				$aNeg2 = $a < 0;
				$bNeg2 = $len < 0;
				$tmp2 = null;
				if($aNeg2 !== $bNeg2) {
					$tmp2 = $aNeg2;
				} else {
					$tmp2 = $a >= $len;
				}
				if($tmp2) {
					break;
				}
				$copy[$copy->length] = $data[$a];
				$a = $a + 1;
				unset($tmp2,$tmp1,$bNeg2,$bNeg1,$aNeg2,$aNeg1);
			}
		} else {
			$aNeg3 = $a < 0;
			$bNeg3 = $b < 0;
			$tmp3 = null;
			if($aNeg3 !== $bNeg3) {
				$tmp3 = $aNeg3;
			} else {
				$tmp3 = $a > $b;
			}
			if($tmp3) {
				while(true) {
					$aNeg4 = $a < 0;
					$bNeg4 = $b < 0;
					$tmp4 = null;
					if($aNeg4 !== $bNeg4) {
						$tmp4 = $aNeg4;
					} else {
						$tmp4 = $a > $b;
					}
					if(!$tmp4) {
						break;
					}
					$aNeg5 = $len < 0;
					$bNeg5 = $a < 0;
					$tmp5 = null;
					if($aNeg5 !== $bNeg5) {
						$tmp5 = $aNeg5;
					} else {
						$tmp5 = $len > $a;
					}
					if($tmp5) {
						$copy[$copy->length] = $data[$a];
					}
					$a = $a - 1;
					unset($tmp5,$tmp4,$bNeg5,$bNeg4,$aNeg5,$aNeg4);
				}
			}
		}
		return $copy;
	}
	function __toString() { return 'sirius.utils.Dice'; }
}
function sirius_utils_Dice_0(&$each, $p, $v) {
	{
		return call_user_func_array($each, array($p));
	}
}
function sirius_utils_Dice_1(&$each, $p, $v) {
	{
		return call_user_func_array($each, array($v));
	}
}
function sirius_utils_Dice_2(&$args, &$method, $p, $v) {
	{
		$tmp = Reflect::field($v, $method);
		Reflect::callMethod($v, $tmp, $args);
	}
}
function sirius_utils_Dice_3(&$from, $v) {
	{
		$from = $v;
		return $from === null;
	}
}
function sirius_utils_Dice_4(&$limit, &$r, &$table, $v) {
	{
		if(Lambda::indexOf($table, $v) !== -1) {
			$r = $r + 1;
		}
		$aNeg = $limit < 0;
		$bNeg = 0 < 0;
		$tmp = null;
		if($aNeg !== $bNeg) {
			$tmp = $aNeg;
		} else {
			$tmp = $limit > 0;
		}
		if($tmp) {
			$limit = $limit - 1;
			return $limit === 0;
		}
		return false;
	}
}
function sirius_utils_Dice_5(&$table, $v) {
	{
		$i = Lambda::indexOf($table, $v);
		if($i !== -1) {
			$table->remove($v);
		}
	}
}
function sirius_utils_Dice_6(&$r, $v) {
	{
		$r = $r->concat($v);
	}
}
function sirius_utils_Dice_7(&$key, $a, $b) {
	{
		$tmp = Reflect::field($a, $key);
		if($tmp < Reflect::field($b, $key)) {
			return -1;
		} else {
			return 1;
		}
	}
}
function sirius_utils_Dice_8($a1, $b1) {
	{
		if($a1 < $b1) {
			return -1;
		} else {
			return 1;
		}
	}
}
function sirius_utils_Dice_9(&$key, $a2, $b2) {
	{
		$tmp1 = sirius_utils_SearchTag::convert(Reflect::field($a2, $key));
		return Reflect::compare($tmp1, sirius_utils_SearchTag::convert(Reflect::field($b2, $key)));
	}
}
function sirius_utils_Dice_10($a3, $b3) {
	{
		$tmp2 = sirius_utils_SearchTag::convert($a3);
		return Reflect::compare($tmp2, sirius_utils_SearchTag::convert($b3));
	}
}
