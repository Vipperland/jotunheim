<?php

// Generated by Haxe 3.4.7
class sirius_db_Gate implements sirius_db_IGate{
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->_errors = (new _hx_array(array()));
		$this->_log = (new _hx_array(array()));
		$this->_logCommands = false;
		$this->_tables = _hx_anonymous(array());
		$this->builder = new sirius_db_tools_QueryBuilder($this);
	}}
	public $_db;
	public $_token;
	public $_tables;
	public $_errors;
	public $_log;
	public $_logCommands;
	public $builder;
	public $command;
	public $errors;
	public function get_errors() {
		return $this->_errors;
	}
	public $log;
	public function get_log() {
		return $this->_log;
	}
	public function isOpen() {
		if($this->_db !== null) {
			return $this->get_errors()->length === 0;
		} else {
			return false;
		}
	}
	public function open($token, $log = null) {
		if($log === null) {
			$log = false;
		}
		$this->_logCommands = $log;
		if(!$this->isOpen()) {
			$this->_token = $token;
			try {
				$this->_db = sirius_db_pdo_Database::connect($token->host, $token->user, $token->pass, $token->options);
				$this->setPdoAttributes(false);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					$tmp = $this->get_errors();
					$tmp1 = $this->get_errors()->length;
					$tmp2 = $e->getCode();
					$tmp[$tmp1] = new sirius_errors_Error($tmp2, $e->getMessage(), null);
				}
			}
			$this->command = null;
		}
		return $this;
	}
	public function prepare($query, $parameters = null, $options = null) {
		$pdo = null;
		if($this->isOpen()) {
			$pdo1 = $this->_db;
			$pdo2 = null;
			if($options === null) {
				$pdo2 = (new _hx_array(array()));
			} else {
				$pdo2 = $options;
			}
			$pdo = $pdo1->prepare($query, php_Lib::toPhpArray($pdo2));
		}
		$tmp = null;
		if($this->_logCommands) {
			$tmp = $this->_log;
		} else {
			$tmp = null;
		}
		$this->command = new sirius_db_tools_SafeCommand($pdo, $query, $parameters, $this->_errors, $tmp);
		return $this->command;
	}
	public function query($query, $parameters = null) {
		$tmp = null;
		if($this->isOpen()) {
			$tmp = $this->_db;
		} else {
			$tmp = null;
		}
		$tmp1 = null;
		if($this->_logCommands) {
			$tmp1 = $this->_log;
		} else {
			$tmp1 = null;
		}
		$this->command = new sirius_db_tools_UnsafeCommand($tmp, $query, $parameters, $this->_errors, $tmp1);
		return $this->command;
	}
	public function schema($table = null) {
		$r = null;
		if(!Std::is($table, _hx_qtype("Array"))) {
			$table = (new _hx_array(array($table)));
		}
		$tables = (new _hx_array(array()));
		$clausule = sirius_db_Clause::EQUAL("TABLE_SCHEMA", $this->_token->db);
		$clausule1 = sirius_db_Clause::hAND((new _hx_array(array($clausule, sirius_db_Clause::hOR($tables)))));
		sirius_utils_Dice::Values($table, array(new _hx_lambda(array(&$tables), "sirius_db_Gate_0"), 'execute'), null);
		return $this->builder->find("*", "INFORMATION_SCHEMA.COLUMNS", $clausule1, null, null)->execute(null, null, null);
	}
	public function insertedId() {
		return Std::parseInt($this->_db->lastInsertId(null));
	}
	public function setPdoAttributes($value) {
		$tmp = $this->_db;
		$tmp->setAttribute(PDO::ATTR_STRINGIFY_FETCHES, $value);
		$tmp1 = $this->_db;
		$tmp1->setAttribute(PDO::ATTR_EMULATE_PREPARES, $value);
		$tmp2 = $this->_db;
		$tmp2->setAttribute(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, $value);
		$tmp3 = $this->_db;
		$tmp4 = PDO::ATTR_ERRMODE;
		$tmp3->setAttribute($tmp4, PDO::ERRMODE_EXCEPTION);
		return $this;
	}
	public function table($table) {
		$o = $this->_tables;
		if(!_hx_has_field($o, $table)) {
			$o1 = $this->_tables;
			$value = new sirius_db_objects_DataTable($table, $this);
			$o1->{$table} = $value;
		}
		return Reflect::field($this->_tables, $table);
	}
	public function ifTableExists($table) {
		$a = $this->builder;
		$a1 = sirius_db_Clause::EQUAL("TABLE_NAME", $table);
		return $a->find("COUNT(*)", "information_schema.TABLES", $a1, null, sirius_db_Limit::$ONE)->execute(null, null, null)->length(null) === 1;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("get_log" => "get_log","get_errors" => "get_errors");
	function __toString() { return 'sirius.db.Gate'; }
}
function sirius_db_Gate_0(&$tables, $v) {
	{
		$tables1 = $tables->length;
		$tmp = sirius_db_Clause::EQUAL("TABLE_NAME", $v);
		$tables[$tables1] = $tmp;
	}
}
