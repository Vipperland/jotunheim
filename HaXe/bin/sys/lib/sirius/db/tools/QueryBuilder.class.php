<?php

// Generated by Haxe 3.4.7
class sirius_db_tools_QueryBuilder implements sirius_db_tools_IQueryBuilder{
	public function __construct($gate) {
		if(!php_Boot::$skip_constructor) {
		$this->_gate = $gate;
	}}
	public $_gate;
	public function _insert($parameters, $dataset) {
		$r = (new _hx_array(array()));
		$q = (new _hx_array(array()));
		$i = 0;
		sirius_utils_Dice::All($parameters, array(new _hx_lambda(array(&$dataset, &$i, &$q, &$r), "sirius_db_tools_QueryBuilder_0"), 'execute'), null);
		$tmp = "(" . _hx_string_or_null($r->join(",")) . ") VALUES (";
		return _hx_string_or_null($tmp) . _hx_string_or_null($q->join(",")) . ")";
	}
	public function _updateSet($parameters, $dataset) {
		$q = (new _hx_array(array()));
		sirius_utils_Dice::All($parameters, array(new _hx_lambda(array(&$dataset, &$q), "sirius_db_tools_QueryBuilder_1"), 'execute'), null);
		return $q->join(",");
	}
	public function _order($obj) {
		$r = (new _hx_array(array()));
		sirius_utils_Dice::All($obj, array(new _hx_lambda(array(&$r), "sirius_db_tools_QueryBuilder_2"), 'execute'), null);
		return $r->join(",");
	}
	public function _conditions($obj, $props, $joiner) {
		$_gthis = $this;
		$r = (new _hx_array(array()));
		$s = $joiner;
		$b = true;
		if(Std::is($obj, _hx_qtype("sirius.db.Clause"))) {
			sirius_utils_Dice::Values(_hx_field($obj, "conditions"), array(new _hx_lambda(array(&$_gthis, &$joiner, &$props, &$r), "sirius_db_tools_QueryBuilder_3"), 'execute'), null);
			$s = $obj->joiner();
		} else {
			if(Std::is($obj, _hx_qtype("Array"))) {
				sirius_utils_Dice::All($obj, array(new _hx_lambda(array(&$_gthis, &$joiner, &$props, &$r), "sirius_db_tools_QueryBuilder_4"), 'execute'), null);
			} else {
				if($obj !== null) {
					if(Std::is(_hx_field($obj, "value"), _hx_qtype("Array"))) {
						$r1 = $r->length;
						$tmp = sirius_utils_Filler::to(_hx_field($obj, "condition"), _hx_anonymous(array("p" => _hx_field($obj, "param"))), null);
						$r[$r1] = $tmp;
						sirius_utils_Dice::All(_hx_field($obj, "value"), array(new _hx_lambda(array(&$props), "sirius_db_tools_QueryBuilder_5"), 'execute'), null);
					} else {
						if(!_hx_field($obj, "skip")) {
							$r2 = $r->length;
							$tmp1 = sirius_utils_Filler::to(_hx_field($obj, "condition"), _hx_anonymous(array("p" => _hx_field($obj, "param"))), null);
							$r[$r2] = $tmp1;
							if(_hx_field($obj, "value") !== null) {
								$props[_hx_field($props, "length")] = _hx_field($obj, "value");
							}
						}
					}
				}
			}
		}
		if($r->length > 0) {
			$b = $r->length > 1;
			$tmp2 = null;
			if($b) {
				$tmp2 = "(";
			} else {
				$tmp2 = "";
			}
			$tmp3 = _hx_string_or_null($tmp2) . _hx_string_or_null($r->join($s));
			$tmp4 = null;
			if($b) {
				$tmp4 = ")";
			} else {
				$tmp4 = "";
			}
			return _hx_string_or_null($tmp3) . _hx_string_or_null($tmp4);
		} else {
			return null;
		}
	}
	public function _assembleBody($clause = null, $parameters = null, $order = null, $limit = null) {
		$q = "";
		if($clause !== null) {
			$q = _hx_string_or_null($q) . _hx_string_or_null((" WHERE " . _hx_string_or_null($this->_conditions($clause, $parameters, " || "))));
		}
		if($order !== null) {
			$q = _hx_string_or_null($q) . _hx_string_or_null((" ORDER BY " . _hx_string_or_null($this->_order($order))));
		}
		if($limit !== null) {
			$q = _hx_string_or_null($q) . _hx_string_or_null((" LIMIT " . _hx_string_or_null($limit)));
		}
		return $q;
	}
	public function add($table, $clause = null, $parameters = null, $order = null, $limit = null) {
		$dataset = (new _hx_array(array()));
		$tmp = $this->_gate;
		$tmp1 = "INSERT INTO " . _hx_string_or_null($table) . _hx_string_or_null($this->_insert($parameters, $dataset));
		return $tmp->prepare(_hx_string_or_null($tmp1) . _hx_string_or_null($this->_assembleBody($clause, $dataset, $order, $limit)) . ";", $dataset, null);
	}
	public function find($fields, $table, $clause = null, $order = null, $limit = null) {
		if(Std::is($fields, _hx_qtype("Array"))) {
			$fields = $fields->join(",");
		}
		$parameters = (new _hx_array(array()));
		$tmp = $this->_gate;
		$tmp1 = "SELECT " . Std::string($fields) . " FROM " . _hx_string_or_null($table);
		return $tmp->query(_hx_string_or_null($tmp1) . _hx_string_or_null($this->_assembleBody($clause, $parameters, $order, $limit)) . ";", $parameters);
	}
	public function update($table, $clause = null, $parameters = null, $order = null, $limit = null) {
		$dataset = (new _hx_array(array()));
		$tmp = $this->_gate;
		$tmp1 = "UPDATE " . _hx_string_or_null($table) . " SET " . _hx_string_or_null($this->_updateSet($parameters, $dataset));
		return $tmp->prepare(_hx_string_or_null($tmp1) . _hx_string_or_null($this->_assembleBody($clause, $dataset, $order, $limit)) . ";", $dataset, null);
	}
	public function delete($table, $clause = null, $order = null, $limit = null) {
		$parameters = (new _hx_array(array()));
		$tmp = $this->_gate;
		return $tmp->prepare("DELETE FROM " . _hx_string_or_null($table) . _hx_string_or_null($this->_assembleBody($clause, $parameters, $order, $limit)) . ";", $parameters, null);
	}
	public function copy($from, $to, $clause = null, $filter = null, $limit = null) {
		$_gthis = $this;
		$entries = $this->find("*", $from, $clause, null, $limit)->result;
		$result = (new _hx_array(array()));
		sirius_utils_Dice::Values($entries, array(new _hx_lambda(array(&$_gthis, &$filter, &$result, &$to), "sirius_db_tools_QueryBuilder_6"), 'execute'), null);
		return $result;
	}
	public function fKey($table, $reference, $key = null, $target = null, $field = null, $delete = null, $update = null) {
		if($update === null) {
			$update = "RESTRICT";
		}
		if($delete === null) {
			$delete = "RESTRICT";
		}
		if($key === null) {
			return $this->_gate->query("ALTER TABLE " . _hx_string_or_null($table) . " DROP FOREIGN KEY " . _hx_string_or_null($reference), null);
		} else {
			$tmp = $this->_gate;
			$tmp1 = "ALTER TABLE " . _hx_string_or_null($table) . " ADD CONSTRAINT " . _hx_string_or_null($reference) . " FOREIGN KEY (" . _hx_string_or_null($key) . ") REFERENCES " . _hx_string_or_null($target) . "(" . _hx_string_or_null($field) . ") ON DELETE " . _hx_string_or_null(strtoupper($delete)) . " ON UPDATE ";
			return $tmp->query(_hx_string_or_null($tmp1) . _hx_string_or_null(strtoupper($update)) . ";", null);
		}
	}
	public function truncate($table) {
		return $this->_gate->prepare("TRUNCATE :table", _hx_anonymous(array("table" => $table)), null);
	}
	public function rename($table, $to) {
		return $this->_gate->prepare("RENAME TABLE :oldname TO :newname", _hx_anonymous(array("oldname" => $table, "newname" => $to)), null);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'sirius.db.tools.QueryBuilder'; }
}
function sirius_db_tools_QueryBuilder_0(&$dataset, &$i, &$q, &$r, $p, $v) {
	{
		$r[$i] = $p;
		$q[$i] = "?";
		$i = $i + 1;
		$dataset[$dataset->length] = $v;
	}
}
function sirius_db_tools_QueryBuilder_1(&$dataset, &$q, $p, $v) {
	{
		$q[$q->length] = _hx_string_or_null($p) . "=?";
		$dataset[$dataset->length] = $v;
	}
}
function sirius_db_tools_QueryBuilder_2(&$r, $p, $v) {
	{
		$r1 = $r->length;
		$tmp = null;
		if($v !== null) {
			$tmp = " " . Std::string($v);
		} else {
			$tmp = "";
		}
		$r[$r1] = _hx_string_or_null($p) . _hx_string_or_null($tmp);
	}
}
function sirius_db_tools_QueryBuilder_3(&$_gthis, &$joiner, &$props, &$r, $v) {
	{
		$v = $_gthis->_conditions($v, $props, $joiner);
		if($v !== null) {
			$r[$r->length] = $v;
		}
	}
}
function sirius_db_tools_QueryBuilder_4(&$_gthis, &$joiner, &$props, &$r, $p, $v1) {
	{
		if(Std::is($v1, _hx_qtype("sirius.db.Clause"))) {
			$v2 = $v1->joiner();
			$v1 = $_gthis->_conditions($v1, $props, $v2);
			if($v1 !== null) {
				$r[$r->length] = $v1;
			}
		} else {
			$v1 = $_gthis->_conditions($v1, $props, $joiner);
			if($v1 !== null) {
				$r[$r->length] = $v1;
			}
		}
	}
}
function sirius_db_tools_QueryBuilder_5(&$props, $p1, $v3) {
	{
		$props[_hx_field($props, "length")] = $v3;
	}
}
function sirius_db_tools_QueryBuilder_6(&$_gthis, &$filter, &$result, &$to, $v) {
	{
		if($filter !== null) {
			$v = call_user_func_array($filter, array($v));
		}
		if($_gthis->add($to, null, $v, null, null)->success) {
			$result[$result->length] = $v;
		}
	}
}
