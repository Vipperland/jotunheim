<?php

// Generated by Haxe 3.4.7
class sirius_tools_Utils {
	public function __construct(){}
	static function getMin($values, $filter = null) {
		$r = null;
		sirius_utils_Dice::Values($values, array(new _hx_lambda(array(&$filter, &$r), "sirius_tools_Utils_0"), 'execute'), null);
		return $r;
	}
	static function getMax($values, $filter = null) {
		$r = null;
		sirius_utils_Dice::Values($values, array(new _hx_lambda(array(&$filter, &$r), "sirius_tools_Utils_1"), 'execute'), null);
		return $r;
	}
	static function getQueryParams($value) {
		$params = _hx_anonymous(array());
		if(_hx_index_of($value, "?", null) > 0) {
			$value = _hx_array_get(_hx_explode("?", _hx_explode("+", $value)->join(" ")), 1);
		} else {
			return $params;
		}
		sirius_utils_Dice::Values(_hx_explode("&", $value), array(new _hx_lambda(array(&$params), "sirius_tools_Utils_2"), 'execute'), null);
		return $params;
	}
	static function clearArray($path, $filter = null) {
		$copy = (new _hx_array(array()));
		sirius_utils_Dice::Values($path, array(new _hx_lambda(array(&$copy, &$filter), "sirius_tools_Utils_3"), 'execute'), null);
		return $copy;
	}
	static function toString($o, $json = null) {
		if($json === true) {
			return haxe_Json::phpJsonEncode($o, null, null);
		} else {
			return Std::string($o);
		}
	}
	static function sruString($o) {
		return sirius_tools_Utils::_sruFy($o, "", "");
	}
	static function _sruFy($o, $i, $b) {
		$i = _hx_string_or_null($i) . "  ";
		sirius_utils_Dice::All($o, array(new _hx_lambda(array(&$b, &$i), "sirius_tools_Utils_4"), 'execute'), null);
		return $b;
	}
	static function isValid($o, $len = null) {
		if($len === null) {
			$len = 0;
		}
		$tmp = null;
		if($o !== null) {
			$tmp = !_hx_equal($o, "");
		} else {
			$tmp = false;
		}
		if($tmp) {
			$tmp1 = null;
			if(!_hx_equal($o, "null")) {
				$tmp1 = _hx_has_field($o, "length");
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				$a = _hx_field($o, "length");
				$aNeg = $a < 0;
				$bNeg = $len < 0;
				if($aNeg !== $bNeg) {
					return $aNeg;
				} else {
					return $a > $len;
				}
			} else {
				if(!_hx_equal($o, 0)) {
					return !_hx_equal($o, false);
				} else {
					return false;
				}
			}
		}
		return false;
	}
	static function isRange($o, $min, $max) {
		if($o !== null) {
			if(!Std::is($o, _hx_qtype("Float"))) {
				$tmp = null;
				if(!Std::is($o, _hx_qtype("Array"))) {
					$tmp = Std::is($o, _hx_qtype("String"));
				} else {
					$tmp = true;
				}
				if($tmp) {
					$o = _hx_field($o, "length");
				} else {
					return false;
				}
			}
		} else {
			return false;
		}
		if($max === null) {
			return $o >= $min;
		} else {
			if($min === null) {
				return $o <= $max;
			} else {
				if($o >= $min) {
					return $o <= $max;
				} else {
					return false;
				}
			}
		}
	}
	static function isValidAll($o) {
		$q = sirius_utils_Dice::Values($o, array(new _hx_lambda(array(), "sirius_tools_Utils_5"), 'execute'), null);
		return $q->completed;
	}
	static function getValidOne($o, $alt) {
		if(sirius_tools_Utils::isValid($o, null)) {
			return $o;
		} else {
			return $alt;
		}
	}
	static function typeof($o) {
		$name = null;
		if($o !== null) {
			try {
				return $o->__proto__->{"__class__"}->__name__->join(".");
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{}
			}
			try {
				return Type::getClassName(Type::getClass($o));
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e1 = $_ex_;
				{}
			}
		}
		return null;
	}
	static function boolean($q) {
		$tmp = null;
		$tmp1 = null;
		$tmp2 = null;
		$tmp3 = null;
		$tmp4 = null;
		if(!_hx_equal($q, true)) {
			$tmp4 = _hx_equal($q, 1);
		} else {
			$tmp4 = true;
		}
		if(!$tmp4) {
			$tmp3 = _hx_equal($q, "1");
		} else {
			$tmp3 = true;
		}
		if(!$tmp3) {
			$tmp2 = _hx_equal($q, "true");
		} else {
			$tmp2 = true;
		}
		if(!$tmp2) {
			$tmp1 = _hx_equal($q, "yes");
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = _hx_equal($q, "accept");
		} else {
			$tmp = true;
		}
		if(!$tmp) {
			return _hx_equal($q, "ok");
		} else {
			return true;
		}
	}
	static function money($val, $s = null, $a = null, $b = null) {
		if($b === null) {
			$b = ".";
		}
		if($a === null) {
			$a = ",";
		}
		if($s === null) {
			$s = "\$";
		}
		$r = "";
		$val = $val * 100;
		if($val > 99) {
			$val = "" . _hx_string_rec(Std::int($val), "");
			$i = _hx_field($val, "length");
			$c = 0;
			while(true) {
				$i = $i - 1;
				if(!($i + 1 > 0)) {
					break;
				}
				$r = Std::string(_hx_string_call($val, "substr", array($i, 1))) . _hx_string_or_null($r);
				if($i > 0) {
					if($c === 1) {
						$r = _hx_string_or_null($b) . _hx_string_or_null($r);
					} else {
						$tmp = null;
						if($c > 1) {
							$tmp = _hx_mod(($c + 2), 3) === 0;
						} else {
							$tmp = false;
						}
						if($tmp) {
							$r = _hx_string_or_null($a) . _hx_string_or_null($r);
						}
						unset($tmp);
					}
				} else {
					if($c < 3) {
						$r1 = null;
						if($c === 1) {
							$r1 = ".";
						} else {
							$r1 = "";
						}
						$r = "0" . _hx_string_or_null($r1) . _hx_string_or_null($r);
						unset($r1);
					}
				}
				$c = $c + 1;
			}
		} else {
			$r2 = null;
			if($val < 10) {
				$r2 = "0";
			} else {
				$r2 = "";
			}
			$r = "0" . _hx_string_or_null($b) . _hx_string_or_null($r2) . Std::string($val);
		}
		return _hx_string_or_null($s) . _hx_string_or_null($r);
	}
	static function stdClone($q) {
		return haxe_Json::phpJsonDecode(haxe_Json::phpJsonEncode($q, null, null));
	}
	static function paramsOf($o) {
		$r = (new _hx_array(array()));
		sirius_utils_Dice::All($o, array(new _hx_lambda(array(&$r), "sirius_tools_Utils_6"), 'execute'), null);
		return $r->join("&");
	}
	function __toString() { return 'sirius.tools.Utils'; }
}
function sirius_tools_Utils_0(&$filter, &$r, $i) {
	{
		$tmp = null;
		if($filter !== null) {
			$tmp = call_user_func_array($filter, array($i));
		} else {
			$tmp = true;
		}
		if($tmp) {
			$tmp1 = null;
			if(!($i < $r)) {
				$tmp1 = $r === null;
			} else {
				$tmp1 = true;
			}
			if($tmp1) {
				$r = $i;
			}
		}
	}
}
function sirius_tools_Utils_1(&$filter, &$r, $i) {
	{
		$tmp = null;
		if($filter !== null) {
			$tmp = call_user_func_array($filter, array($i));
		} else {
			$tmp = true;
		}
		if($tmp) {
			$tmp1 = null;
			if(!($i > $r)) {
				$tmp1 = $r === null;
			} else {
				$tmp1 = true;
			}
			if($tmp1) {
				$r = $i;
			}
		}
	}
}
function sirius_tools_Utils_2(&$params, $v) {
	{
		$data = _hx_explode("=", $v);
		if($data->length > 1) {
			$field = urldecode($data[0]);
			$value1 = urldecode($data[1]);
			$params->{$field} = $value1;
		}
	}
}
function sirius_tools_Utils_3(&$copy, &$filter, $v) {
	{
		$tmp = null;
		$tmp1 = null;
		if($v !== null) {
			$tmp1 = !_hx_equal($v, "");
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			if($filter !== null) {
				$tmp = call_user_func_array($filter, array($v));
			} else {
				$tmp = true;
			}
		} else {
			$tmp = false;
		}
		if($tmp) {
			$copy[$copy->length] = $v;
		}
	}
}
function sirius_tools_Utils_4(&$b, &$i, $p, $v) {
	{
		if($v === null) {
			$b = _hx_string_or_null($b) . _hx_string_or_null((_hx_string_or_null($i) . _hx_string_or_null($p) . ":* = NULL\x0D"));
		} else {
			if(Std::is($v, _hx_qtype("String"))) {
				$b1 = _hx_string_or_null($i) . _hx_string_or_null($p) . ":String = ";
				$b2 = _hx_string_or_null($b1) . Std::string($v) . "\x0D";
				$b = _hx_string_or_null($b) . _hx_string_or_null($b2);
			} else {
				if(Std::is($v, _hx_qtype("Bool"))) {
					$b3 = _hx_string_or_null($i) . _hx_string_or_null($p) . ":Bool = ";
					$b4 = _hx_string_or_null($b3) . Std::string($v) . "\x0D";
					$b = _hx_string_or_null($b) . _hx_string_or_null($b4);
				} else {
					$tmp = null;
					if(!Std::is($v, _hx_qtype("Int"))) {
						$tmp = Std::is($v, _hx_qtype("Float"));
					} else {
						$tmp = true;
					}
					if($tmp) {
						$b5 = _hx_string_or_null($i) . _hx_string_or_null($p) . ":Number = ";
						$b6 = _hx_string_or_null($b5) . Std::string($v) . "\x0D";
						$b = _hx_string_or_null($b) . _hx_string_or_null($b6);
					} else {
						if(Std::is($v, _hx_qtype("Array"))) {
							$b7 = _hx_string_or_null($i) . _hx_string_or_null($p) . ":Array[";
							$b8 = _hx_string_or_null($b7) . Std::string(_hx_field($v, "length")) . "]:[\x0D";
							$b9 = _hx_string_or_null($b8) . _hx_string_or_null(sirius_tools_Utils::_sruFy($v, $i, ""));
							$b = _hx_string_or_null($b) . _hx_string_or_null((_hx_string_or_null($b9) . _hx_string_or_null($i) . "]\x0D"));
						} else {
							$b10 = _hx_string_or_null($i) . _hx_string_or_null($p) . ":Object {\x0D";
							$b11 = _hx_string_or_null($b10) . _hx_string_or_null(sirius_tools_Utils::_sruFy($v, $i, ""));
							$b = _hx_string_or_null($b) . _hx_string_or_null((_hx_string_or_null($b11) . _hx_string_or_null($i) . "}\x0D"));
						}
					}
				}
			}
		}
	}
}
function sirius_tools_Utils_5($v) {
	{
		return !sirius_tools_Utils::isValid($v, null);
	}
}
function sirius_tools_Utils_6(&$r, $p, $v) {
	{
		$v = haxe_Json::phpJsonEncode($v, null, null);
		$r1 = $r->length;
		$s = _hx_string_call($v, "substr", array(1, _hx_field($v, "length") - 2));
		$tmp = _hx_string_or_null($p) . "=" . _hx_string_or_null(rawurlencode($s));
		$r[$r1] = $tmp;
	}
}
