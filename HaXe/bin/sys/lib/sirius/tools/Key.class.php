<?php

// Generated by Haxe 3.4.7
class sirius_tools_Key {
	public function __construct(){}
	static $TABLE = "abcdefghijklmnopqrstuvwxyz0123456789";
	static function _cts() { $args = func_get_args(); return call_user_func_array(self::$_cts, $args); }
	static $_cts;
	static function COUNTER($id = null) {
		if($id === null) {
			$id = "global";
		}
		$v = 0;
		$o = sirius_tools_Key::$_cts;
		if(!_hx_has_field($o, $id)) {
			$o1 = sirius_tools_Key::$_cts;
			$o1->{$id} = 0;
		} else {
			$v = Reflect::field(sirius_tools_Key::$_cts, $id);
			{
				$o2 = sirius_tools_Key::$_cts;
				$o2->{$id} = $v + 1;
			}
		}
		return $v;
	}
	static function GEN($size = null, $table = null, $mixCase = null) {
		if($mixCase === null) {
			$mixCase = true;
		}
		if($size === null) {
			$size = 9;
		}
		$s = "";
		if($table === null) {
			$table = sirius_tools_Key::$TABLE;
		}
		$l = strlen($table);
		$c = null;
		while(true) {
			$a = strlen($s);
			$aNeg = $size < 0;
			$bNeg = $a < 0;
			$tmp = null;
			if($aNeg !== $bNeg) {
				$tmp = $aNeg;
			} else {
				$tmp = $size > $a;
			}
			if(!$tmp) {
				break;
			}
			$c = _hx_substr($table, Std::random($l), 1);
			if($mixCase) {
				if(Math::random() < .5) {
					$c = strtoupper($c);
				} else {
					$c = strtolower($c);
				}
			}
			$s = _hx_string_or_null($s) . _hx_string_or_null($c);
			unset($tmp,$bNeg,$aNeg,$a);
		}
		return $s;
	}
	static $_last_uuid;
	static function getLastUUID() {
		return sirius_tools_Key::$_last_uuid;
	}
	static function UUID() {
		$tmp = Std::string(Date::now()) . "-";
		sirius_tools_Key::$_last_uuid = sirius_serial_IOTools::md5Encode(_hx_string_or_null($tmp) . _hx_string_or_null(sirius_tools_Key::GEN(null, null, null)), null);
		return sirius_tools_Key::$_last_uuid;
	}
	static function TAG($value, $prefix = null, $len = null) {
		if($len === null) {
			$len = 11;
		}
		if($prefix === null) {
			$prefix = "0";
		}
		if(!Std::is($value, _hx_qtype("String"))) {
			$value = Std::string($value);
		} else {
			if($value === null) {
				$value = sirius_tools_Key::COUNTER("tag");
			}
		}
		$k = _hx_field($value, "length");
		while($k < $len) {
			$value = _hx_string_or_null($prefix) . Std::string($value);
			$k = $k + 1;
		}
		return $value;
	}
	static $VALIDATE_DATE;
	static $VALIDATE_URL;
	static $VALIDATE_IPV4;
	static $VALIDATE_CURRENCY;
	static $VALIDATE_EMAIL;
	static $VALIDATE_NUMBER;
	static $VALIDATE_PHONE;
	static $VALIDATE_LETTER;
	static $VALIDATE_NAME;
	static $VALIDATE_NON_URL;
	static $VALIDATE_HASH;
	static $VALIDATE_CARD;
	function __toString() { return 'sirius.tools.Key'; }
}
sirius_tools_Key::$_cts = _hx_anonymous(array("global" => 0));
sirius_tools_Key::$VALIDATE_DATE = new EReg("\\d{1,2}/\\d{1,2}/\\d{4}", "");
sirius_tools_Key::$VALIDATE_URL = new EReg("https?://.+", "");
sirius_tools_Key::$VALIDATE_IPV4 = new EReg("^\\d{1,3}d{1,3}.\\d{1,3}.\\d{1,3}", "");
sirius_tools_Key::$VALIDATE_CURRENCY = new EReg("\\d+(.\\d{2})?", "");
sirius_tools_Key::$VALIDATE_EMAIL = new EReg("^[a-z0-9!'#\$%&*+/=?^_`{|}~-]+(?:\\.[a-z0-9!'#\$%&*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-zA-Z]{2,}\$", "giu");
sirius_tools_Key::$VALIDATE_NUMBER = new EReg("^\\d{1,}\$", "");
sirius_tools_Key::$VALIDATE_PHONE = new EReg("^(\\d{10,11})|(\\(\\d{2}\\) \\d{4,5}-\\d{4})\$", "");
sirius_tools_Key::$VALIDATE_LETTER = new EReg("^[a-zA-Z]{6,}\$", "");
sirius_tools_Key::$VALIDATE_NAME = new EReg("^[a-zA-Z ]{6,}\$", "");
sirius_tools_Key::$VALIDATE_NON_URL = new EReg("^[A-Za-z0-9._-]{6,24}\$", "");
sirius_tools_Key::$VALIDATE_HASH = new EReg("^[A-Za-z0-9._-]{35}\$", "");
sirius_tools_Key::$VALIDATE_CARD = new EReg("\\d{4}-\\d{4}-\\d{4}-\\d{4}\$", "");
