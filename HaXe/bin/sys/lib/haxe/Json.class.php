<?php

// Generated by Haxe 3.4.7
class haxe_Json {
	public function __construct(){}
	static function phpJsonDecode($json) {
		$val = json_decode($json);
		$tmp = null;
		if($val === null) {
			$tmp = json_last_error() != JSON_ERROR_NONE;
		} else {
			$tmp = false;
		}
		if($tmp) {
			throw new HException(json_last_error_msg());
		}
		return haxe_Json::convertAfterDecode($val);
	}
	static function convertAfterDecode($val) {
		$arr = null;
		if(is_object($val)) {
			$arr1 = php_Lib::associativeArrayOfObject($val);
			$arr = array_map((property_exists("haxe_Json", "convertAfterDecode") ? haxe_Json::$convertAfterDecode: array("haxe_Json", "convertAfterDecode")), $arr1);
			return _hx_anonymous($arr);
		} else {
			if(is_array($val)) {
				$arr = array_map((property_exists("haxe_Json", "convertAfterDecode") ? haxe_Json::$convertAfterDecode: array("haxe_Json", "convertAfterDecode")), $val);
				return new _hx_array($arr);
			} else {
				return $val;
			}
		}
	}
	static function phpJsonEncode($val, $replacer = null, $space = null) {
		$tmp = null;
		if(null === $replacer) {
			$tmp = null !== $space;
		} else {
			$tmp = true;
		}
		if($tmp) {
			return haxe_format_JsonPrinter::hprint($val, $replacer, $space);
		}
		$json = json_encode(haxe_Json::convertBeforeEncode($val));
		if(($json === false)) {
			throw new HException("invalid json");
		} else {
			return $json;
		}
	}
	static function convertBeforeEncode($val) {
		$arr = null;
		if(is_object($val)) {
			$_g = get_class($val);
			switch($_g) {
			case "Date":{
				return Std::string($val);
			}break;
			case "HList":{
				$arr = php_Lib::toPhpArray(Lambda::harray($val));
			}break;
			case "IntMap":case "StringMap":{
				$arr = php_Lib::associativeArrayOfHash($val);
			}break;
			case "_hx_array":{
				$arr = php_Lib::toPhpArray($val);
			}break;
			case "_hx_enum":{
				return $val->index;
			}break;
			case "_hx_anonymous":case "stdClass":{
				$arr = php_Lib::associativeArrayOfObject($val);
				if(!$arr) {
					return _hx_anonymous(array());
				}
			}break;
			default:{
				$arr = php_Lib::associativeArrayOfObject($val);
			}break;
			}
		} else {
			if(is_array($val)) {
				$arr = $val;
			} else {
				$tmp = null;
				if(is_float($val)) {
					$tmp = !is_finite($val);
				} else {
					$tmp = false;
				}
				if($tmp) {
					$val = null;
				}
				return $val;
			}
		}
		return array_map((property_exists("haxe_Json", "convertBeforeEncode") ? haxe_Json::$convertBeforeEncode: array("haxe_Json", "convertBeforeEncode")), $arr);
	}
	function __toString() { return 'haxe.Json'; }
}
