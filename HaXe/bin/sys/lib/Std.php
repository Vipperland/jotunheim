<?php
/**
 * Generated by Haxe 4.3.4
 */

use \php\Boot;
use \php\_Boot\HxString;

/**
 * The Std class provides standard methods for manipulating basic types.
 */
class Std {
	/**
	 * Converts a `String` to a `Float`.
	 * The parsing rules for `parseInt` apply here as well, with the exception of invalid input
	 * resulting in a `NaN` value instead of `null`. Also, hexadecimal support is **not** specified.
	 * Additionally, decimal notation may contain a single `.` to denote the start of the fractions.
	 * It may also end with `e` or `E` followed by optional minus or plus sign and a sequence of
	 * digits (defines exponent to base 10).
	 * 
	 * @param string $x
	 * 
	 * @return float
	 */
	public static function parseFloat ($x) {
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:79: characters 3-35
		$result = floatval($x);
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:80: lines 80-81
		if (!Boot::equal($result, 0)) {
			#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:81: characters 4-17
			return $result;
		}
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:83: characters 3-22
		$x = ltrim($x);
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:84: characters 3-53
		$firstCharIndex = (mb_substr($x, 0, 1) === "-" ? 1 : 0);
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:85: characters 3-47
		$charCode = HxString::charCodeAt($x, $firstCharIndex);
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:87: lines 87-89
		if ($charCode === 46) {
			#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:88: characters 4-47
			$charCode = HxString::charCodeAt($x, $firstCharIndex + 1);
		}
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:91: lines 91-95
		if (($charCode !== null) && ($charCode >= 48) && ($charCode <= 57)) {
			#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:92: characters 4-14
			return 0.0;
		} else {
			#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:94: characters 4-20
			return NAN;
		}
	}

	/**
	 * Converts a `String` to an `Int`.
	 * Leading whitespaces are ignored.
	 * `x` may optionally start with a + or - to denote a postive or negative value respectively.
	 * If the optional sign is followed 0x or 0X, hexadecimal notation is recognized where the following
	 * digits may contain 0-9 and A-F. Both the prefix and digits are case insensitive.
	 * Otherwise `x` is read as decimal number with 0-9 being allowed characters. Octal and binary
	 * notations are not supported.
	 * Parsing continues until an invalid character is detected, in which case the result up to
	 * that point is returned. Scientific notation is not supported. That is `Std.parseInt('10e2')` produces `10`.
	 * If `x` is `null`, the result is `null`.
	 * If `x` cannot be parsed as integer or is empty, the result is `null`.
	 * If `x` starts with a hexadecimal prefix which is not followed by at least one valid hexadecimal
	 * digit, the result is unspecified.
	 * 
	 * @param string $x
	 * 
	 * @return int
	 */
	public static function parseInt ($x) {
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:55: characters 3-41
		$x = ltrim($x, " \x09\x0A\x0B\x0C\x0D");
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:56: characters 3-44
		$digitsOnly = ltrim($x, "+-");
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:57: lines 57-63
		if (str_starts_with($digitsOnly, "0x") || str_starts_with($digitsOnly, "0X")) {
			#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:58: characters 4-37
			$val = intval($x, 16);
			#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:60: lines 60-61
			if (($val === 0) && ((mb_strlen($digitsOnly) + 1) < mb_strlen($x))) {
				#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:61: characters 5-16
				return null;
			}
			#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:62: characters 4-14
			return $val;
		}
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:65: characters 10-32
		$_g = stripos($x, "e");
		if ($_g !== false) {
			#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:67: characters 9-13
			$ePos = $_g;
			#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:67: characters 15-44
			$x = substr($x, 0, $ePos);
		}
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:70: characters 3-36
		$val = intval($x, 10);
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:73: lines 73-74
		if (($val === 0) && ((strspn($digitsOnly, "0123456789", 0, 1) === 0) || ((mb_strlen($digitsOnly) + 1) < mb_strlen($x)))) {
			#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:74: characters 4-15
			return null;
		}
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:75: characters 3-13
		return $val;
	}

	/**
	 * Converts any value to a String.
	 * If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.
	 * If `s` is an instance of a class and that class or one of its parent classes has
	 * a `toString` method, that method is called. If no such method is present, the result
	 * is unspecified.
	 * If `s` is an enum constructor without argument, the constructor's name is returned. If
	 * arguments exists, the constructor's name followed by the String representations of
	 * the arguments is returned.
	 * If `s` is a structure, the field names along with their values are returned. The field order
	 * and the operator separating field names and values are unspecified.
	 * If s is null, "null" is returned.
	 * 
	 * @param mixed $s
	 * 
	 * @return string
	 */
	public static function string ($s) {
		#D:\Devland\Tools\SDK\Haxe\4.3.4\haxe\std/php/_std/Std.hx:47: characters 3-27
		return Boot::stringify($s);
	}
}

Boot::registerClass(Std::class, 'Std');
