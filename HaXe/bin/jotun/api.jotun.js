// Generated by Haxe 4.1.1
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = "Type";
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native"}
});
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var jotun_objects_IResolve = function() { };
jotun_objects_IResolve.__name__ = "jotun.objects.IResolve";
jotun_objects_IResolve.prototype = {
	__class__: jotun_objects_IResolve
};
var jotun_objects_Resolve = function() { };
jotun_objects_Resolve.__name__ = "jotun.objects.Resolve";
jotun_objects_Resolve.__interfaces__ = [jotun_objects_IResolve];
jotun_objects_Resolve.prototype = {
	getProp: function(name) {
		return Reflect.field(this,name);
	}
	,setProp: function(name,value) {
		this[name] = value;
	}
	,deleteProp: function(name) {
		Reflect.deleteField(this,name);
	}
	,__class__: jotun_objects_Resolve
};
var jotun_objects_IQuery = function() { };
jotun_objects_IQuery.__name__ = "jotun.objects.IQuery";
jotun_objects_IQuery.__interfaces__ = [jotun_objects_IResolve];
jotun_objects_IQuery.prototype = {
	__class__: jotun_objects_IQuery
};
var jotun_objects_Query = $hx_exports["J_Query"] = function() {
	this._log = [];
};
jotun_objects_Query.__name__ = "jotun.objects.Query";
jotun_objects_Query.__interfaces__ = [jotun_objects_IQuery];
jotun_objects_Query.__super__ = jotun_objects_Resolve;
jotun_objects_Query.prototype = $extend(jotun_objects_Resolve.prototype,{
	log: function() {
		return this._log;
	}
	,flush: function() {
		this._log = [];
		this._now = [];
	}
	,proc: function(data,result) {
		this._buffer = result != null ? result : { };
		this._now = null;
		this._batchExec(data);
		return this._buffer;
	}
	,_batchExec: function(data) {
		jotun_utils_Dice.Values(((data) instanceof Array) ? data : data.split("\r"),$bind(this,this._exec));
	}
	,_exec: function(q) {
		var o = null;
		if(HxOverrides.substr(q,0,1) == "@") {
			if(HxOverrides.substr(q,1,1) == "!") {
				this._now = null;
			} else {
				var prop = HxOverrides.substr(q,1,q.length - 1);
				if(!Object.prototype.hasOwnProperty.call(this._buffer,prop)) {
					this._now = [];
					this._buffer[prop] = this._now;
				} else {
					this._now = Reflect.field(this._buffer,prop);
				}
			}
		} else {
			q = q.split("\t").join(" ");
			while(q.indexOf("  ") != -1) q = q.split("  ").join(" ");
			var tk = q.split(" ");
			var method = tk.shift();
			var isMethod = true;
			o = Reflect.getProperty(this,method);
			isMethod = Reflect.isFunction(o);
			if(o != null && isMethod) {
				this._log[this._log.length] = q;
				if(isMethod) {
					o = o.apply(this,tk);
					if(o != null && typeof(o) == "string") {
						this._batchExec(o);
						o = null;
					}
				} else {
					o = tk[0];
					this[method] = o;
				}
			}
			if(o != null && this._now != null) {
				this._now[this._now.length] = o;
			}
		}
	}
	,__class__: jotun_objects_Query
});
var jotun_dom_IDisplay = function() { };
jotun_dom_IDisplay.__name__ = "jotun.dom.IDisplay";
jotun_dom_IDisplay.__interfaces__ = [jotun_objects_IQuery];
jotun_dom_IDisplay.prototype = {
	__class__: jotun_dom_IDisplay
};
var jotun_dom_Display = $hx_exports["J_dom_Display"] = function(q,t) {
	if(q == null) {
		q = window.document.createElement("div");
	}
	if(Object.prototype.hasOwnProperty.call(q,"element")) {
		this.element = q.element;
	} else {
		this.element = q;
	}
	if(this.element != window.document) {
		this._getattr = this.element.getAttribute != null;
		this._setattr = this.element.setAttribute != null;
		this._uid = (this.hasAttribute("jtn-id") ? this.attribute("jtn-id") : this.attribute("jtn-id",jotun_dom_Display._CNT++)) | 0;
		jotun_dom_Display._DATA[this._uid] = this;
	}
	this.events = new jotun_events_Dispatcher(this);
	this.data = { id : this._uid};
	jotun_objects_Query.call(this);
};
jotun_dom_Display.__name__ = "jotun.dom.Display";
jotun_dom_Display.__interfaces__ = [jotun_dom_IDisplay];
jotun_dom_Display.ofKind = function(q) {
	return jotun_tools_Utils.displayFrom(window.document.createElement(q));
};
jotun_dom_Display.fromGC = function(id) {
	if(jotun_dom_Display._DATA[id] != null) {
		return jotun_dom_Display._DATA[id];
	}
	return null;
};
jotun_dom_Display.gc = function(force) {
	if(force) {
		jotun_dom_Display._DATA = [];
	} else {
		jotun_utils_Dice.Values(jotun_dom_Display._DATA,function(v) {
			var id = v.id();
			if(jotun_Jotun.one("[jtn-id=" + (id == null ? "null" : Std.string(UInt.toFloat(id))) + "]") == null) {
				Reflect.deleteField(jotun_dom_Display._DATA,(id == null ? "null" : Std.string(UInt.toFloat(id))) + "");
			}
		});
	}
};
jotun_dom_Display.getPosition = function(target) {
	var a = jotun_Jotun.document.body.getBounds();
	var b = target.getBoundingClientRect();
	return new jotun_math_Point(b.left - a.left,b.top - a.top);
};
jotun_dom_Display.__super__ = jotun_objects_Query;
jotun_dom_Display.prototype = $extend(jotun_objects_Query.prototype,{
	_react_fill_data: function(data,o) {
		if(((o) instanceof jotun_dom_Input)) {
			o.value(data);
		} else {
			o.writeHtml(data);
		}
	}
	,_react_fill_class: function(verify,data,path,o) {
		if(verify || o.hasAttribute("set-class-" + path)) {
			o.css(data);
		}
	}
	,_react_fill_attr: function(verify,data,path,o) {
		if(verify || o.hasAttribute("set-attr-" + path)) {
			if(data != null) {
				o.attribute(o.attribute("set-attr-" + path),data);
			} else {
				o.attribute(o.attribute("set-attr-" + path),"");
			}
		}
	}
	,_react_fill_style: function(verified,data,path,o) {
		if(verified || o.hasAttribute("set-style-" + path)) {
			o.style(o.attribute("set-style-" + path),data);
		} else if(data != null) {
			o.attribute("style",data);
		} else {
			o.clearAttribute("style");
		}
	}
	,_react_display_self: function(verified,data,path,o) {
		if(verified || o.hasAttribute("set-style-" + path)) {
			o.style(o.attribute("set-style-" + path),data);
		} else if(data != null) {
			o.attribute("style",data);
		} else {
			o.clearAttribute("style");
		}
	}
	,_rect_fill: function(data,path,alt_path) {
		var _gthis = this;
		if(typeof(data) == "string" || typeof(data) == "number" || typeof(data) == "boolean") {
			if(this.attribute("set-data") == path) {
				this._react_fill_data(data,this);
			}
			this.all("[set-data=\"" + path + "\"]").each(function(o) {
				_gthis._react_fill_data(data,o);
			});
			this._react_fill_attr(false,data,alt_path,this);
			this.all("[set-attr-" + alt_path + "]").each(function(o) {
				_gthis._react_fill_attr(true,data,alt_path,o);
			});
			this._react_fill_style(false,data,alt_path,this);
			this.all("[set-style-" + alt_path + "]").each(function(o) {
				_gthis._react_fill_style(true,data,alt_path,o);
			});
			if(data != null) {
				this._react_fill_class(false,data,alt_path,this);
				this.all("[set-class-" + alt_path + "]").each(function(o) {
					_gthis._react_fill_class(true,data,alt_path,o);
				});
			}
			var is_valid = data != null && data != 0 && data != false;
			if(is_valid) {
				if(this.hasAttribute("[show-if-" + alt_path + "]")) {
					this.show();
				}
				if(this.hasAttribute("[hide-if-" + alt_path + "]")) {
					this.hide();
				}
				this.all("[show-if-" + alt_path + "]").show();
				this.all("[hide-if-" + alt_path + "]").hide();
			} else {
				if(this.hasAttribute("[show-if-" + alt_path + "]")) {
					this.hide();
				}
				if(this.hasAttribute("[hide-if-" + alt_path + "]")) {
					this.show();
				}
				this.all("[show-if-" + alt_path + "]").hide();
				this.all("[hide-if-" + alt_path + "]").show();
			}
		} else {
			if(path == "") {
				path = "";
			} else {
				path += ".";
			}
			jotun_utils_Dice.All(data,function(p,v) {
				p = "" + p;
				if(HxOverrides.substr(p,0,1) != "_") {
					_gthis._rect_fill(v,path + p,(path + p).split(".").join("-"));
				}
			});
		}
	}
	,enablePerspective: function() {
		this.style({ perspective : "1000px", transformOrigin : "50% 50% 0"});
	}
	,dispose: function() {
		if(this._uid != -1 && this.element != null) {
			Reflect.deleteField(jotun_dom_Display._DATA,(this._uid == null ? "null" : Std.string(UInt.toFloat(this._uid))) + "");
			if(this._children != null) {
				this._children.dispose();
			}
			if(this.events != null) {
				this.events.dispose();
			}
			this.all("[jtn-id]").dispose();
			this.remove();
			this.element = null;
			this._uid = -1;
		}
	}
	,exists: function(q) {
		if(this.element != null) {
			return this.element.querySelector(q) != null;
		} else {
			return false;
		}
	}
	,click: function() {
		this.element.click();
		return this;
	}
	,all: function(q) {
		return jotun_Jotun.all(q,this.element);
	}
	,one: function(q) {
		return jotun_Jotun.one(q,this.element);
	}
	,children: function() {
		this._children = jotun_Jotun.all("*",this.element);
		return this._children;
	}
	,getScrollBounds: function(o) {
		if(o == null) {
			o = new jotun_math_Point(this.element.scrollWidth,this.element.scrollHeight);
		} else {
			o.x = this.element.scrollWidth;
			o.y = this.element.scrollHeight;
		}
		return o;
	}
	,getScroll: function(o) {
		if(o == null) {
			o = new jotun_math_Point(this.element.scrollLeft,this.element.scrollTop);
		} else {
			o.x = this.element.scrollLeft;
			o.y = this.element.scrollTop;
		}
		return o;
	}
	,addScroll: function(x,y) {
		this.element.scrollBy({ top : y, left : x, behavior : "smooth"});
	}
	,setScroll: function(x,y) {
		this.element.scroll({ top : y, left : x, behavior : "smooth"});
	}
	,rect: function() {
		return { left : this.element.scrollLeft, top : this.element.scrollTop, offsetX : this.element.offsetLeft, offsetY : this.element.offsetTop, x : this.element.offsetLeft - window.scrollX, y : this.element.offsetTop - window.scrollY};
	}
	,focus: function() {
		if(this.element != null) {
			this.element.focus();
		}
		return this;
	}
	,getChild: function(i,update) {
		if(this._children == null || update == true) {
			this._children = this.children();
		}
		return this._children.obj(i);
	}
	,length: function() {
		return this.element.childNodes.length;
	}
	,index: function() {
		if(this.parent() != null) {
			return this._parent.indexOf(this);
		} else {
			return -1;
		}
	}
	,setIndex: function(i) {
		if(this.parent() != null) {
			this._parent.addChild(this,i);
		}
		return this;
	}
	,indexOf: function(q) {
		var chd = this.element.childNodes;
		var len = chd.length;
		var cnt = 0;
		while(cnt < len) {
			if(chd.item(cnt) == q.element) {
				break;
			}
			++cnt;
		}
		if(cnt == len) {
			return -1;
		} else {
			return cnt;
		}
	}
	,addChild: function(q,at) {
		if(at == null) {
			at = -1;
		}
		q["_parent"] = this;
		this._children = null;
		if(at != -1) {
			var sw = this.element.childNodes.item(at);
			this.element.insertBefore(q.element,sw);
		} else {
			this.element.appendChild(q.element);
		}
		return q;
	}
	,addChildren: function(q,at) {
		if(at == null) {
			at = -1;
		}
		var _gthis = this;
		var l = null;
		if(at == -1) {
			q.each($bind(this,this.addChild));
		} else {
			q.each(function(o) {
				at += 1;
				_gthis.addChild(o,at - 1);
			});
		}
		return q.obj(q.length() - 1);
	}
	,addTextElement: function(q) {
		var t = new jotun_dom_Text(q);
		this.addChild(t);
		return t;
	}
	,removeChild: function(q) {
		if(q.element.parentElement == this.element) {
			this._children = null;
			q.remove();
		}
		return q;
	}
	,removeChildren: function(min) {
		if(min == null) {
			min = 0;
		}
		var t = this.children().length();
		while(UInt.gt(t,min)) {
			--t;
			this.removeChild(this.getChild(t));
		}
		return this;
	}
	,remove: function() {
		this._parent = null;
		if(this.element != null && this.element.parentElement != null) {
			this.element.parentElement.removeChild(this.element);
		}
		return this;
	}
	,rotateX: function(x) {
		this.data.__changed = true;
		this.data.__rotationX = jotun_math_Matrix3D.rotateX(x);
		return this;
	}
	,rotateY: function(x) {
		this.data.__changed = true;
		this.data.__rotationY = jotun_math_Matrix3D.rotateY(x);
		return this;
	}
	,rotateZ: function(x) {
		this.data.__changed = true;
		this.data.__rotationZ = jotun_math_Matrix3D.rotateZ(x);
		return this;
	}
	,rotate: function(x,y,z) {
		if(x != null) {
			this.rotateX(x);
		}
		if(y != null) {
			this.rotateY(y);
		}
		if(z != null) {
			this.rotateZ(z);
		}
		return this;
	}
	,translate: function(x,y,z) {
		this.data.__changed = true;
		this.data.__translation = jotun_math_Matrix3D.translate(x,y,z);
		return this;
	}
	,scale: function(x,y,z) {
		this.data.__changed = true;
		this.data.__scale = jotun_math_Matrix3D.scale(x,y,z);
		return this;
	}
	,transform: function() {
		if(this.data.__changed) {
			var t = this.data.__transform;
			if(t == null) {
				t = [];
				this.data.__transform = t;
				this.style("transformStyle","preserve-3d");
				this.style("transformOrigin","50% 50% 0");
				this.css("element3d");
			}
			this.data.__changed = false;
			t[0] = this.data.__rotationX;
			t[1] = this.data.__rotationY;
			t[2] = this.data.__rotationZ;
			t[3] = this.data.__scale;
			t[4] = this.data.__translation;
			this.style("transform","matrix3d(" + jotun_math_Matrix3D.transform(t).join(",") + ")");
		}
		return this;
	}
	,enable: function() {
		this.style("pointerEvents","all");
	}
	,disable: function() {
		this.style("pointerEvents","none");
	}
	,css: function(styles) {
		if(styles != null) {
			var s = styles.split(" ");
			var cl = this.element.classList;
			jotun_utils_Dice.Values(s,function(v) {
				if(v != null && v.length > 0) {
					var c = HxOverrides.substr(v,0,1);
					if(c == "*") {
						v = HxOverrides.substr(v,1,v.length - 1);
						if(cl.contains(v)) {
							cl.remove(v);
						} else if(!cl.contains(v)) {
							cl.add(v);
						}
					} else if(c == "/") {
						v = HxOverrides.substr(v,1,v.length - 1);
						if(cl.contains(v)) {
							cl.remove(v);
						}
					} else if(!cl.contains(v)) {
						cl.add(v);
					}
				}
			});
		}
		return this.element.className;
	}
	,hasCss: function(name) {
		return (" " + this.css() + " ").indexOf(" " + name + " ") != -1;
	}
	,toggle: function(styles) {
		var _gthis = this;
		jotun_utils_Dice.Values(styles.split(" "),function(v) {
			_gthis.css((_gthis.hasCss(v) ? "/" : "") + v);
		});
		return this;
	}
	,show: function() {
		this.element.hidden = false;
		this.element.style.display = null;
		this.css("/hidden");
	}
	,hide: function() {
		this.element.hidden = true;
		this.element.style.display = "none";
		this.css("hidden");
	}
	,hasAttribute: function(name) {
		if(!(this._getattr && this.element.hasAttribute(name))) {
			return Object.prototype.hasOwnProperty.call(this.element,name);
		} else {
			return true;
		}
	}
	,attribute: function(name,value) {
		if(name != null) {
			var t = Reflect.field(this.element,name);
			if(t != null) {
				if(value != null) {
					this.element[name] = value;
				}
				return Reflect.field(this.element,name);
			}
			if(value != null) {
				if(this._setattr) {
					this.element.setAttribute(name,value);
				}
				return value;
			}
			if(this._getattr) {
				return this.element.getAttribute(name);
			}
		}
		return null;
	}
	,clearAttribute: function(name) {
		var value = null;
		if(this.hasAttribute(name)) {
			if(Object.prototype.hasOwnProperty.call(this.element,name)) {
				Reflect.deleteField(this.element,name);
			} else {
				value = this.attribute(name);
				this.element.removeAttribute(name);
			}
		}
		return value;
	}
	,attributes: function(values) {
		if(values != null) {
			jotun_utils_Dice.All(values,$bind(this,this.attribute));
			return null;
		} else {
			return jotun_tools_Utils.getAttributes(this);
		}
	}
	,value: function(q) {
		if(q != null) {
			this.attribute("value",q);
		}
		return this.attribute("value");
	}
	,writeText: function(q) {
		this.empty(false);
		this.element.innerText = q;
		return this;
	}
	,appendText: function(q) {
		this.element.innerText += Std.string(q);
		return this;
	}
	,writeHtml: function(q) {
		this.empty(false);
		this.element.innerHTML = q;
		return this;
	}
	,appendHtml: function(q) {
		this.element.innerHTML += Std.string(q);
		return this;
	}
	,colorTransform: function(r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		var name = "svg_color_" + (this._uid == null ? "null" : Std.string(UInt.toFloat(this._uid)));
		jotun_css_XCode.filter(name,a,r,g,b,true);
		this.filters(name);
		return this;
	}
	,displacement: function(freq,octaves,scale,seed) {
		if(seed == null) {
			seed = 0;
		}
		var name = "svg_disp_" + (this._uid == null ? "null" : Std.string(UInt.toFloat(this._uid)));
		jotun_css_XCode.displacement(name,freq,octaves,scale,seed,true);
		this.filters(name);
		return this;
	}
	,filters: function(name) {
		this.style("filter","url(#" + Std.string(name) + ")");
	}
	,_style_set: function(p,v) {
		if(typeof(p) == "string" && v != null) {
			this.element.style[p] = js_Boot.__implements(v,jotun_math_IARGB) ? v.css() : Std.string(v);
		}
	}
	,_style_get: function(p) {
		return Reflect.field(this.trueStyle(),p);
	}
	,style: function(p,v) {
		var _gthis = this;
		if(p != null) {
			if(typeof(p) == "string") {
				if(v == null) {
					return this._style_get(p);
				} else {
					this._style_set(p,v);
				}
			} else {
				jotun_utils_Dice.All(p,function(p,v) {
					_gthis._style_set(p,v);
				});
				return null;
			}
		}
		return this.trueStyle();
	}
	,trueStyle: function() {
		if(window.document.defaultView.opener != null) {
			return window.document.defaultView.getComputedStyle(this.element);
		} else {
			return window.getComputedStyle(this.element);
		}
	}
	,mount: function(q,data,at) {
		if(at == null) {
			at = -1;
		}
		if(jotun_Jotun.resources.exists(q)) {
			return this.addChildren(jotun_Jotun.resources.build(q,data).children(),at);
		} else {
			if(data != null) {
				q = jotun_utils_Filler.to(q,data);
			}
			return this.addChildren(new jotun_dom_Display().writeHtml(q).children(),at);
		}
	}
	,empty: function(fast) {
		if(fast) {
			this.element.innerHTML = "";
		} else {
			var i = this.element.childNodes.length;
			while(i-- > 0) this.element.removeChild(this.element.childNodes.item(i));
		}
		return this;
	}
	,on: function(type,handler,mode) {
		this.events.on(type,handler,mode);
		return this;
	}
	,parent: function(levels) {
		if(levels == null) {
			levels = 0;
		}
		if(this._parent == null && this.element.parentElement != null) {
			this._parent = jotun_tools_Utils.displayFrom(this.element.parentElement);
		}
		if(UInt.gt(levels,0)) {
			--levels;
			return this._parent.parent(levels);
		} else {
			return this._parent;
		}
	}
	,parentQuery: function(q) {
		if(!this.is("html")) {
			if(this.parent().matches(q)) {
				return this.parent();
			} else {
				return this.parent().parentQuery(q);
			}
		}
		return null;
	}
	,matches: function(q) {
		if(this.element != null) {
			return this.element.matches(q);
		} else {
			return false;
		}
	}
	,x: function(value) {
		if(value != null) {
			this.element.style.left = typeof(value) == "string" ? value : Std.string(value) + "px";
		}
		return Std.parseInt(this.element.style.left);
	}
	,y: function(value) {
		if(value != null) {
			this.element.style.top = typeof(value) == "string" ? value : Std.string(value) + "px";
		}
		return Std.parseInt(this.element.style.top);
	}
	,width: function(value) {
		if(value != null) {
			this.element.style.width = typeof(value) == "string" ? value : Std.string(value) + "px";
		}
		return this.element.clientWidth;
	}
	,fullWidth: function() {
		return this.element.clientWidth;
	}
	,height: function(value) {
		if(value != null) {
			this.element.style.height = typeof(value) == "string" ? value : Std.string(value) + "px";
		}
		return this.element.clientHeight;
	}
	,alpha: function(value) {
		if(value != null) {
			value = 1 - value;
			this.element.style.opacity = "" + (1 - value);
			return value;
		} else {
			return 1 - parseFloat(this.element.style.opacity);
		}
	}
	,isFullyVisible: function() {
		return this._visibility == 2;
	}
	,isVisible: function() {
		return this._visibility > 0;
	}
	,getVisibility: function(offsetY,offsetX) {
		if(offsetX == null) {
			offsetX = 0;
		}
		if(offsetY == null) {
			offsetY = 0;
		}
		var rect = this.element.getBoundingClientRect();
		var current = 0;
		if(rect.top + offsetY >= 0 && rect.left + offsetX >= 0 && rect.bottom - offsetY <= jotun_tools_Utils.viewportHeight() && rect.right - offsetX <= jotun_tools_Utils.viewportWidth()) {
			current = 2;
		} else if(rect.bottom >= 0 && rect.right >= 0 && rect.top <= jotun_tools_Utils.viewportHeight() && rect.left <= jotun_tools_Utils.viewportWidth()) {
			current = 1;
		}
		if(current != this._visibility) {
			this._visibility = current;
			this.events.visibility().call();
		}
		return this._visibility;
	}
	,getBounds: function() {
		return this.element.getBoundingClientRect();
	}
	,typeOf: function() {
		if(this.hasAttribute("jtn-dom")) {
			return this.attribute("jtn-dom");
		} else {
			return this.element.tagName;
		}
	}
	,is: function(tag) {
		var _gthis = this;
		if(!((tag) instanceof Array)) {
			tag = [tag];
		}
		var r = jotun_utils_Dice.Values(tag,function(v) {
			v = v.toUpperCase();
			if(v != _gthis.element.tagName) {
				return v == _gthis.attribute("jtn-dom");
			} else {
				return true;
			}
		});
		return !r.completed;
	}
	,addTo: function(target) {
		var _gthis = this;
		if(target != null) {
			target.addChild(this);
		} else if(jotun_Jotun.document != null) {
			jotun_Jotun.document.body.addChild(this);
		} else {
			jotun_Jotun.run(function() {
				_gthis.addTo(target);
			});
		}
		return this;
	}
	,addToBody: function() {
		if(jotun_Jotun.document != null) {
			jotun_Jotun.document.body.addChild(this);
		}
		return this;
	}
	,position: function() {
		return jotun_dom_Display.getPosition(this.element);
	}
	,pin: function(align) {
		var v = null;
		var h = null;
		switch(align) {
		case "b":
			v = 1;
			h = 0;
			break;
		case "bl":case "lb":
			v = 1;
			h = -1;
			break;
		case "br":case "rb":
			v = 1;
			h = 1;
			break;
		case "c":
			v = 0;
			h = 0;
			break;
		case "l":
			v = 0;
			h = -1;
			break;
		case "lt":case "tl":
			v = -1;
			h = -1;
			break;
		case "r":
			v = 0;
			h = 1;
			break;
		case "t":
			v = -1;
			h = 0;
			break;
		case "rt":case "tr":
			v = -1;
			h = 1;
			break;
		}
		var o = { position : "fixed"};
		if(h != null) {
			if(h < 0) {
				o.top = 0;
			} else if(h > 0) {
				o.bottom = 0;
			} else {
				o.top = "calc(50vh - " + (this.height() >> 1) + "px)";
			}
		}
		if(v != null) {
			if(v < 0) {
				o.left = 0;
			} else if(v > 0) {
				o.right = 0;
			} else {
				o.left = "calc(50vw - " + (this.width() >> 1) + "px)";
			}
		}
		this.style(o);
		this.css("pinned");
		return this;
	}
	,unpin: function() {
		this.style({ position : "", left : "", right : "", bottom : "", top : ""});
		this.css("/pinned");
		return this;
	}
	,fit: function(width,height) {
		this.width(width == null ? this.width() : width);
		this.height(height == null ? this.height() : height);
		return this;
	}
	,id: function() {
		return this._uid;
	}
	,ref: function(value) {
		if(value != null) {
			this.element.id = value;
		}
		return this.element.id;
	}
	,load: function(url,module,data,handler,progress) {
		var _gthis = this;
		if(module != null) {
			if(jotun_Jotun.resources.exists(module)) {
				this.mount(module,data);
				return;
			}
		}
		jotun_Jotun.module(url,url,data,function(r) {
			if(r.success) {
				_gthis.mount(module,data);
			}
			if(handler != null) {
				handler(r);
			}
		},progress);
	}
	,lookAt: function(y,x) {
		jotun_Jotun.document.scrollTo(this,y,x);
		return this;
	}
	,reloadScripts: function() {
		var _gthis = this;
		this.all("script").each(function(o) {
			o.remove();
			var u = o.attribute("src");
			if(jotun_tools_Utils.isValid(u)) {
				_gthis.all("script[src=\"" + u + "\"]").remove();
				var s = new jotun_dom_Script();
				s.src(u);
				_gthis.addChild(s);
			}
		});
		return this;
	}
	,autoLoad: function(progress) {
		this.all("[jtn-load]").each(function(o) {
			var f = o.attribute("jtn-load");
			var d = f.split("#");
			o.clearAttribute("jtn-load");
			o.load(d[0],d.length == 1 ? d[0] : d[1],null,null,progress);
		});
	}
	,react: function(data) {
		if(typeof(data) == "string") {
			data = JSON.parse(data);
		}
		this._rect_fill(data,"","");
	}
	,toString: function() {
		var v = this.element != null && this.element.getBoundingClientRect != null;
		var data = { id : this.element.id, "jtn-id" : $bind(this,this.id), "class" : this.element.className, index : this.index(), length : this.length(), attributes : jotun_tools_Utils.getAttributes(this)};
		if(v) {
			var r = this.element.getBoundingClientRect();
			data.visibility = this.getVisibility();
			data.rect = { width : r.width, height : r.height, x1 : r.left, y1 : r.top, x2 : r.right, y2 : r.bottom};
		}
		return JSON.stringify(data);
	}
	,__class__: jotun_dom_Display
});
var jotun_dom_Document = $hx_exports["J_dom_Document"] = function() {
	this.__cursor__ = { x : 0, y : 0};
	this.__scroll__ = { x : 0, y : 0};
	if(jotun_dom_Document.__doc__ == null) {
		jotun_dom_Display.call(this,window.document);
		this.element = window.document.documentElement;
		this.head = new jotun_dom_Head(window.document.head);
		this.events = new jotun_events_Dispatcher(this);
		jotun_dom_Document.__doc__ = this;
		this.__init__();
	} else {
		throw new Error("Document is a singleton, use Document.ME() instead of new");
	}
};
jotun_dom_Document.__name__ = "jotun.dom.Document";
jotun_dom_Document.ME = function() {
	if(jotun_dom_Document.__doc__ == null) {
		return new jotun_dom_Document();
	} else {
		return jotun_dom_Document.__doc__;
	}
};
jotun_dom_Document.__super__ = jotun_dom_Display;
jotun_dom_Document.prototype = $extend(jotun_dom_Display.prototype,{
	_applyScroll: function() {
		window.scroll(this.__scroll__.x,this.__scroll__.y);
	}
	,__init__: function() {
		window.addEventListener("scroll",$bind(this,this._hookScroll));
	}
	,_hookScroll: function(e) {
		this.events.scroll().call();
	}
	,_onCloseWindow: function(e) {
		if(e == null) {
			e = window.event;
		}
		e.returnValue = true;
		if(e.stopPropagation != null) {
			e.stopPropagation();
			e.preventDefault();
		}
		return e.returnValue;
	}
	,preventClose: function(mode) {
		if(mode) {
			window.addEventListener("beforeunload",$bind(this,this._onCloseWindow));
		} else {
			window.removeEventListener("beforeunload",$bind(this,this._onCloseWindow));
		}
	}
	,checkBody: function() {
		this.body = new jotun_dom_Body(document.body);
		if(this.body.hasAttribute("xcode")) {
			jotun_css_XCode.reset();
		}
		jotun_Jotun.all("[jtn-module]").each(function(o) {
			var n = o.attribute("module-name");
			if(n == null) {
				n = "module" + jotun_tools_Key.GEN();
			}
			jotun_Jotun.resources.register(n,o.element.innerHTML);
			o.dispose();
		});
	}
	,scroll: function(x,y) {
		window.scroll({ top : y, left : x, behavior : "smooth"});
	}
	,addScroll: function(x,y) {
		window.scrollBy({ top : y, left : x, behavior : "smooth"});
	}
	,getScrollRange: function(o) {
		var current = this.getScroll(o);
		if(this.body != null) {
			current.x /= this.body.maxScrollX();
			current.y /= this.body.maxScrollY();
		} else {
			current.reset();
		}
		return current;
	}
	,getScroll: function(o) {
		if(o == null) {
			o = new jotun_math_Point(0,0);
		}
		if(window.pageXOffset != null) {
			o.x = window.pageXOffset;
			o.y = window.pageYOffset;
		} else if(this.body != null) {
			o.x = this.body.element.scrollLeft;
			o.y = this.body.element.scrollTop;
		} else {
			o.x = this.element.scrollLeft;
			o.y = this.element.scrollTop;
		}
		return o;
	}
	,scrollTo: function(target,offY,offX) {
		if(offX == null) {
			offX = 0;
		}
		if(offY == null) {
			offY = 100;
		}
		if(typeof(target) == "string") {
			target = jotun_Jotun.one(target).element;
		}
		if(js_Boot.__implements(target,jotun_dom_IDisplay)) {
			target = target.element;
		}
		var pos = jotun_dom_Display.getPosition(target);
		this.scroll(pos.x - offX,pos.y - offY);
	}
	,trackCursor: function() {
		var _gthis = this;
		if(this.__cursor__.enabled) {
			return;
		}
		this.__cursor__.enabled = true;
		window.addEventListener("mousemove",function(e) {
			_gthis.__cursor__.x = e.clientX;
			_gthis.__cursor__.y = e.clientY;
		});
	}
	,cursorX: function() {
		return this.__cursor__.x;
	}
	,cursorY: function() {
		return this.__cursor__.y;
	}
	,getFocused: function() {
		var el = window.document.activeElement;
		if(el != null) {
			return jotun_tools_Utils.displayFrom(el);
		} else {
			return null;
		}
	}
	,print: function(selector,exclude) {
		var i = this.body.children();
		var success = false;
		if(i.length() > 0) {
			i.hide();
			var content = "";
			i.each(function(d) {
				if(!d.is(["script","style"])) {
					content += d.element.outerHTML;
					d.hide();
				}
			});
			if(content.length > 0) {
				var r = new jotun_dom_Div();
				r.mount(content);
				if(jotun_tools_Utils.isValid(exclude)) {
					r.all(exclude).remove();
				}
				this.body.addChild(r);
				try {
					window.print();
					success = true;
				} catch( _g ) {
					if(((haxe_Exception.caught(_g).unwrap()) instanceof Error)) {
						success = false;
					} else {
						throw _g;
					}
				}
				this.body.removeChild(r);
			}
			i.show();
		}
		return success;
	}
	,__class__: jotun_dom_Document
});
var jotun_dom_Head = $hx_exports["J_dom_Head"] = function(q) {
	if(q == null) {
		q = window.document.createElement("head");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Head.__name__ = "jotun.dom.Head";
jotun_dom_Head.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Head.__super__ = jotun_dom_Display;
jotun_dom_Head.prototype = $extend(jotun_dom_Display.prototype,{
	mount: function(q,data,at) {
		if(at == null) {
			at = -1;
		}
		if(jotun_Jotun.resources.exists(q)) {
			jotun_Jotun.resources.build(q,data).children().each($bind(this,this.addChild));
		} else {
			this.writeHtml("/* <!> mod:" + q + " not found */");
		}
		return this;
	}
	,bind: function(content,type,id) {
		if(content != null) {
			var s;
			if(content.length > 1) {
				switch(type) {
				case "css":case "style":
					s = jotun_dom_Style.fromString(content.split("<style>").join("").split("</style>").join(""));
					break;
				case "javascript":case "script":
					s = jotun_dom_Script.fromString(content.split("<script>").join("").split("</script>").join(""));
					break;
				default:
					s = null;
				}
				if(s != null) {
					s.attribute("module-id",jotun_tools_Utils.isValid(id) ? id : "");
					this.addChild(s);
					return s;
				}
			}
		}
		return null;
	}
	,__class__: jotun_dom_Head
});
var jotun_events_IDispatcher = function() { };
jotun_events_IDispatcher.__name__ = "jotun.events.IDispatcher";
jotun_events_IDispatcher.prototype = {
	__class__: jotun_events_IDispatcher
};
var jotun_events_Dispatcher = $hx_exports["J_Dispatcher"] = function(q) {
	this._b = { };
	this._e = { };
	this._i = { };
	this.target = q;
};
jotun_events_Dispatcher.__name__ = "jotun.events.Dispatcher";
jotun_events_Dispatcher.__interfaces__ = [jotun_events_IDispatcher];
jotun_events_Dispatcher.PREVENT_DEFAULT = function(e) {
	e.event.preventDefault();
};
jotun_events_Dispatcher.prototype = {
	event: function(name) {
		var dis = null;
		if(!this.hasEvent(name)) {
			dis = new jotun_events_EventGroup(this,name);
			dis.prepare(this.target);
			this._e[name] = dis;
		} else {
			dis = Reflect.field(this._e,name);
		}
		return dis;
	}
	,hasEvent: function(name) {
		return Object.prototype.hasOwnProperty.call(this._e,name);
	}
	,apply: function() {
		var _gthis = this;
		jotun_utils_Dice.Values(this._e,function(v) {
			v.prepare(_gthis.target);
		});
	}
	,on: function(type,handler,mode,noDefault,capture) {
		var ie = this.event(type);
		if(noDefault) {
			ie.noDefault();
		}
		if(handler == true) {
			ie.call();
		} else if(handler != null) {
			if(mode < 0) {
				ie.remove(handler);
			} else if(mode > 0) {
				ie.addOnce(handler,capture);
			} else {
				ie.add(handler,capture);
			}
		}
		return ie;
	}
	,focusOverall: function(handler,mode,noDefault,capture) {
		return { "over" : this.mouseOver(handler,mode), "out" : this.mouseOut(handler,mode), "click" : this.click(handler,mode)};
	}
	,added: function(handler,mode,noDefault,capture) {
		return this.on("DOMNodeInserted",handler,mode,noDefault,capture);
	}
	,removed: function(handler,mode,noDefault,capture) {
		return this.on("DOMNodeRemoved",handler,mode,noDefault,capture);
	}
	,wheel: function(handler,mode,noDefault,capture) {
		return this.on("wheel",handler,mode,noDefault,capture);
	}
	,copy: function(handler,mode,noDefault,capture) {
		return this.on("copy",handler,mode,noDefault,capture);
	}
	,cut: function(handler,mode,noDefault,capture) {
		return this.on("cut",handler,mode,noDefault,capture);
	}
	,paste: function(handler,mode,noDefault,capture) {
		return this.on("paste",handler,mode,noDefault,capture);
	}
	,abort: function(handler,mode,noDefault,capture) {
		return this.on("abort",handler,mode,noDefault,capture);
	}
	,blur: function(handler,mode,noDefault,capture) {
		return this.on("blur",handler,mode,noDefault,capture);
	}
	,focusIn: function(handler,mode,noDefault,capture) {
		return this.on("focusin",handler,mode,noDefault,capture);
	}
	,focusOut: function(handler,mode,noDefault,capture) {
		return this.on("focusout",handler,mode,noDefault,capture);
	}
	,canPlay: function(handler,mode,noDefault,capture) {
		return this.on("canplay",handler,mode,noDefault,capture);
	}
	,canPlayThrough: function(handler,mode,noDefault,capture) {
		return this.on("canplaythrough",handler,mode,noDefault,capture);
	}
	,change: function(handler,mode,noDefault,capture) {
		return this.on("change",handler,mode,noDefault,capture);
	}
	,click: function(handler,mode,noDefault,capture) {
		return this.on("click",handler,mode,noDefault,capture);
	}
	,contextMenu: function(handler,mode,noDefault,capture) {
		return this.on("contextmenu",handler,mode,noDefault,capture);
	}
	,dblClick: function(handler,mode,noDefault,capture) {
		return this.on("dblclick",handler,mode,noDefault,capture);
	}
	,drag: function(handler,mode,noDefault,capture) {
		return this.on("drag",handler,mode,noDefault,capture);
	}
	,dragEnd: function(handler,mode,noDefault,capture) {
		return this.on("dragend",handler,mode,noDefault,capture);
	}
	,dragEnter: function(handler,mode,noDefault,capture) {
		return this.on("dragenter",handler,mode,noDefault,capture);
	}
	,dragLeave: function(handler,mode,noDefault,capture) {
		return this.on("dragleave",handler,mode,noDefault,capture);
	}
	,dragOver: function(handler,mode,noDefault,capture) {
		return this.on("dragover",handler,mode,noDefault,capture);
	}
	,dragStart: function(handler,mode,noDefault,capture) {
		return this.on("dragstart",handler,mode,noDefault,capture);
	}
	,drop: function(handler,mode,noDefault,capture) {
		return this.on("drop",handler,mode,noDefault,capture);
	}
	,durationChange: function(handler,mode,noDefault,capture) {
		return this.on("durationchange",handler,mode,noDefault,capture);
	}
	,emptied: function(handler,mode,noDefault,capture) {
		return this.on("emptied",handler,mode,noDefault,capture);
	}
	,ended: function(handler,mode,noDefault,capture) {
		return this.on("ended",handler,mode,noDefault,capture);
	}
	,input: function(handler,mode,noDefault,capture) {
		return this.on("input",handler,mode,noDefault,capture);
	}
	,invalid: function(handler,mode,noDefault,capture) {
		return this.on("invalid",handler,mode,noDefault,capture);
	}
	,keyDown: function(handler,mode,noDefault,capture) {
		return this.on("keydown",handler,mode,noDefault,capture);
	}
	,keyPress: function(handler,mode,noDefault,capture) {
		return this.on("keypress",handler,mode,noDefault,capture);
	}
	,keyUp: function(handler,mode,noDefault,capture) {
		return this.on("keyup",handler,mode,noDefault,capture);
	}
	,load: function(handler,mode,noDefault,capture) {
		return this.on("load",handler,mode,noDefault,capture);
	}
	,loadedData: function(handler,mode,noDefault,capture) {
		return this.on("loadeddata",handler,mode,noDefault,capture);
	}
	,loadedMetadata: function(handler,mode,noDefault,capture) {
		return this.on("loadedmetadata",handler,mode,noDefault,capture);
	}
	,loadStart: function(handler,mode,noDefault,capture) {
		return this.on("loadstart",handler,mode,noDefault,capture);
	}
	,mouseDown: function(handler,mode,noDefault,capture) {
		return this.on("mousedown",handler,mode,noDefault,capture);
	}
	,mouseEnter: function(handler,mode,noDefault,capture) {
		return this.on("mouseenter",handler,mode,noDefault,capture);
	}
	,mouseLeave: function(handler,mode,noDefault,capture) {
		return this.on("mouseleave",handler,mode,noDefault,capture);
	}
	,mouseMove: function(handler,mode,noDefault,capture) {
		return this.on("mousemove",handler,mode,noDefault,capture);
	}
	,mouseOut: function(handler,mode,noDefault,capture) {
		return this.on("mouseout",handler,mode,noDefault,capture);
	}
	,mouseOver: function(handler,mode,noDefault,capture) {
		return this.on("mouseover",handler,mode,noDefault,capture);
	}
	,mouseUp: function(handler,mode,noDefault,capture) {
		return this.on("mouseup",handler,mode,noDefault,capture);
	}
	,pause: function(handler,mode,noDefault,capture) {
		return this.on("pause",handler,mode,noDefault,capture);
	}
	,play: function(handler,mode,noDefault,capture) {
		return this.on("play",handler,mode,noDefault,capture);
	}
	,playing: function(handler,mode,noDefault,capture) {
		return this.on("playing",handler,mode,noDefault,capture);
	}
	,progress: function(handler,mode,noDefault,capture) {
		return this.on("progress",handler,mode,noDefault,capture);
	}
	,rateChange: function(handler,mode,noDefault,capture) {
		return this.on("ratechange",handler,mode,noDefault,capture);
	}
	,reset: function(handler,mode,noDefault,capture) {
		return this.on("reset",handler,mode,noDefault,capture);
	}
	,scroll: function(handler,mode,noDefault,capture) {
		return this.on("scroll",handler,mode,noDefault,capture);
	}
	,seeked: function(handler,mode,noDefault,capture) {
		return this.on("seeked",handler,mode,noDefault,capture);
	}
	,seeking: function(handler,mode,noDefault,capture) {
		return this.on("seeking",handler,mode,noDefault,capture);
	}
	,select: function(handler,mode,noDefault,capture) {
		return this.on("select",handler,mode,noDefault,capture);
	}
	,show: function(handler,mode,noDefault,capture) {
		return this.on("show",handler,mode,noDefault,capture);
	}
	,stalled: function(handler,mode,noDefault,capture) {
		return this.on("stalled",handler,mode,noDefault,capture);
	}
	,submit: function(handler,mode,noDefault,capture) {
		return this.on("submit",handler,mode,noDefault,capture);
	}
	,suspEnd: function(handler,mode,noDefault,capture) {
		return this.on("suspend",handler,mode,noDefault,capture);
	}
	,timeUpdate: function(handler,mode,noDefault,capture) {
		return this.on("timeupdate",handler,mode,noDefault,capture);
	}
	,volumeChange: function(handler,mode,noDefault,capture) {
		return this.on("volumechange",handler,mode,noDefault,capture);
	}
	,waiting: function(handler,mode,noDefault,capture) {
		return this.on("waiting",handler,mode,noDefault,capture);
	}
	,pointerCancel: function(handler,mode,noDefault,capture) {
		return this.on("pointercancel",handler,mode,noDefault,capture);
	}
	,pointerDown: function(handler,mode,noDefault,capture) {
		return this.on("pointerdown",handler,mode,noDefault,capture);
	}
	,pointerUp: function(handler,mode,noDefault,capture) {
		return this.on("pointerup",handler,mode,noDefault,capture);
	}
	,pointerMove: function(handler,mode,noDefault,capture) {
		return this.on("pointermove",handler,mode,noDefault,capture);
	}
	,pointerOut: function(handler,mode,noDefault,capture) {
		return this.on("pointerout",handler,mode,noDefault,capture);
	}
	,pointerOver: function(handler,mode,noDefault,capture) {
		return this.on("pointerover",handler,mode,noDefault,capture);
	}
	,pointerEnter: function(handler,mode,noDefault,capture) {
		return this.on("pointerenter",handler,mode,noDefault,capture);
	}
	,pointerLeave: function(handler,mode,noDefault,capture) {
		return this.on("pointerleave",handler,mode,noDefault,capture);
	}
	,gotPointerCapture: function(handler,mode,noDefault,capture) {
		return this.on("gotpointercapture",handler,mode,noDefault,capture);
	}
	,lostPointerCapture: function(handler,mode,noDefault,capture) {
		return this.on("lostpointercapture",handler,mode,noDefault,capture);
	}
	,pointerLockChange: function(handler,mode,noDefault,capture) {
		return this.on("pointerlockchange",handler,mode,noDefault,capture);
	}
	,pointerLockError: function(handler,mode,noDefault,capture) {
		return this.on("pointerlockerror",handler,mode,noDefault,capture);
	}
	,error: function(handler,mode,noDefault,capture) {
		return this.on("error",handler,mode,noDefault,capture);
	}
	,touchStart: function(handler,mode,noDefault,capture) {
		return this.on("touchstart",handler,mode,noDefault,capture);
	}
	,touchEnd: function(handler,mode,noDefault,capture) {
		return this.on("touchend",handler,mode,noDefault,capture);
	}
	,touchMove: function(handler,mode,noDefault,capture) {
		return this.on("touchmove",handler,mode,noDefault,capture);
	}
	,touchCancel: function(handler,mode,noDefault,capture) {
		return this.on("touchcancel",handler,mode,noDefault,capture);
	}
	,readyState: function(handler,mode,noDefault,capture) {
		return this.on("readystatechange",handler,mode,noDefault,capture);
	}
	,visibility: function(handler,mode,noDefault,capture) {
		return this.on("visibility",handler,mode,noDefault,capture);
	}
	,resize: function(handler,mode,noDefault,capture) {
		return this.on("resize",handler,mode,noDefault,capture);
	}
	,dispose: function() {
		var _gthis = this;
		jotun_utils_Dice.Values(this._e,function(v) {
			v.dispose(_gthis.target);
		});
	}
	,__class__: jotun_events_Dispatcher
};
var jotun_tools_IAgent = function() { };
jotun_tools_IAgent.__name__ = "jotun.tools.IAgent";
jotun_tools_IAgent.prototype = {
	__class__: jotun_tools_IAgent
};
var jotun_tools_Agent = function() {
};
jotun_tools_Agent.__name__ = "jotun.tools.Agent";
jotun_tools_Agent.__interfaces__ = [jotun_tools_IAgent];
jotun_tools_Agent.prototype = {
	update: function() {
		var ua = $global.navigator.userAgent;
		var ie = new EReg("MSIE","i").match(ua) ? 8 : 0;
		if(new EReg("MSIE 9","i").match(ua)) {
			ie = 9;
		}
		if(new EReg("MSIE 10","i").match(ua)) {
			ie = 10;
		}
		if(new EReg("rv:11.","i").match(ua)) {
			ie = 11;
		}
		if(new EReg("Edge","i").match(ua)) {
			ie = 12;
		}
		var opera = new EReg("OPR","i").match(ua);
		var safari = new EReg("Safari","i").match(ua);
		var firefox = new EReg("Firefox","i").match(ua);
		var chrome = new EReg("Chrome","i").match(ua);
		var chromium = new EReg("Chromium","i").match(ua);
		this.ie = ie > 0;
		this.edge = ie > 11;
		this.opera = opera;
		this.firefox = firefox;
		this.safari = safari && !chrome && !chromium;
		this.chrome = (chrome || chromium) && !opera;
		this.mobile = new EReg("Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini","i").match(ua);
		this.cookies = $global.navigator.cookieEnabled == true;
		if(!this.cookies) {
			window.document.cookie = "#validating#";
			this.cookies = window.document.cookie.indexOf("#validating#") != -1;
		}
		var tmp;
		var o = window;
		if(!Object.prototype.hasOwnProperty.call(o,"$")) {
			var o = window;
			tmp = Object.prototype.hasOwnProperty.call(o,"jQuery");
		} else {
			tmp = true;
		}
		this.jQuery = tmp;
		this.display = jotun_tools_Utils.screenOrientation();
		var platform = $global.navigator.platform.toLowerCase();
		if(["macintosh","macintel","macppc","mac68k"].indexOf(platform) != -1) {
			this.os = "MAC";
		} else if(["iphone","ipad","ipod"].indexOf(platform) != -1) {
			this.os = "IOS";
		} else if(["win32","win64","windows","wince"].indexOf(platform) != -1) {
			this.os = "WINDOWS";
		} else if(new EReg("Android","i").match(ua)) {
			this.os = "ANDROID";
		} else if(new EReg("linux","i").match(platform)) {
			this.os = "LINUX";
		} else {
			this.os = "CUSTOM";
		}
		return this;
	}
	,value: function() {
		return "OS:" + $global.navigator.oscpu + "/Browser:" + $global.navigator.userAgent + "/Mobile:" + Std.string(this.mobile);
	}
	,isXS: function() {
		return jotun_tools_Utils.matchMedia(jotun_css_CSSGroup.MEDIA_XS + " and " + jotun_css_CSSGroup.MEDIA_XS_MAX);
	}
	,isSM: function() {
		return jotun_tools_Utils.matchMedia(jotun_css_CSSGroup.MEDIA_SM + " and " + jotun_css_CSSGroup.MEDIA_SM_MAX);
	}
	,isMD: function() {
		return jotun_tools_Utils.matchMedia(jotun_css_CSSGroup.MEDIA_MD + " and " + jotun_css_CSSGroup.MEDIA_MD_MAX);
	}
	,isLG: function() {
		return jotun_tools_Utils.matchMedia(jotun_css_CSSGroup.MEDIA_LG + " and " + jotun_css_CSSGroup.MEDIA_LG_MAX);
	}
	,isXL: function() {
		return jotun_tools_Utils.matchMedia(jotun_css_CSSGroup.MEDIA_XL);
	}
	,__class__: jotun_tools_Agent
};
var jotun_data_Logger = function() {
	this._level = 4;
	this._events = [];
	this._events[0] = $bind(this,this.query);
};
jotun_data_Logger.__name__ = "jotun.data.Logger";
jotun_data_Logger.prototype = {
	maxLvLog: function(i) {
		this._level = i;
	}
	,mute: function() {
		if(Lambda.indexOf(this._events,$bind(this,this.query)) != -1) {
			this._events.splice(0,1);
		}
	}
	,unmute: function() {
		if(Lambda.indexOf(this._events,$bind(this,this.query)) == -1) {
			this._events.unshift($bind(this,this.query));
		}
	}
	,listen: function(handler) {
		this._events[this._events.length] = handler;
	}
	,push: function(q,type) {
		jotun_utils_Dice.Values(this._events,function(v) {
			v(q,type);
		});
	}
	,dump: function(q) {
		console.log.apply(null,q);
	}
	,query: function(q,type) {
		if(type > this._level) {
			return;
		}
		var t;
		switch(type) {
		case 0:
			t = "[MESSAGE] ";
			break;
		case 1:
			t = "[>SYSTEM] ";
			break;
		case 2:
			t = "[WARNING] ";
			break;
		case 3:
			t = "[!ERROR!] ";
			break;
		case 4:
			t = "[//TODO*] ";
			break;
		case 5:
			t = "[$QUERY*] ";
			break;
		default:
			t = "";
		}
		if(t != null && ((q) instanceof Array)) {
			q.unshift(t);
		} else {
			q = [t,q];
		}
		this.dump(q);
	}
	,showConsole: function(url) {
		if(url == null) {
			url = "modules/dev/console.html";
		}
		jotun_Jotun.module(url,"jotun-console",null,function(r) {
			var ui = jotun_Jotun.one("jotun-console");
			if(ui == null) {
				ui = jotun_Jotun.resources.build("jotun-console");
				if(ui != null) {
					ui.addToBody();
				}
			}
			if(ui != null) {
				ui.show();
			}
		});
	}
	,hideConsole: function() {
		var ui = jotun_Jotun.one("jotun-console");
		if(ui != null) {
			ui.hide();
		}
	}
	,__class__: jotun_data_Logger
};
var jotun_utils_Dice = $hx_exports["Dice"] = function() { };
jotun_utils_Dice.__name__ = "jotun.utils.Dice";
jotun_utils_Dice.All = function(q,each,complete) {
	var v = null;
	var p = null;
	var i = true;
	var k = 0;
	if(q != null) {
		var _g = 0;
		var _g1 = Reflect.fields(q);
		while(_g < _g1.length) {
			var p1 = _g1[_g];
			++_g;
			v = Reflect.field(q,p1);
			if(each(p1,v) == true) {
				i = false;
				break;
			} else {
				++k;
				p1 = null;
				v = null;
			}
		}
	}
	var r = { param : p, value : v, completed : i, object : q, keys : k};
	if(complete != null) {
		complete(r);
	}
	return r;
};
jotun_utils_Dice.Params = function(q,each,complete) {
	return jotun_utils_Dice.All(q,function(p,v) {
		return each(p);
	},complete);
};
jotun_utils_Dice.Values = function(q,each,complete) {
	return jotun_utils_Dice.All(q,function(p,v) {
		return each(v);
	},complete);
};
jotun_utils_Dice.Comparer = function(q,each,complete) {
	var prev = null;
	return jotun_utils_Dice.All(q,function(p,v) {
		var r = each(v,prev);
		prev = v;
		return r;
	},complete);
};
jotun_utils_Dice.Extract = function(q,fields) {
	var r = { };
	jotun_utils_Dice.Values(fields,function(v) {
		r[v] = Reflect.field(q,v);
	});
	return r;
};
jotun_utils_Dice.Call = function(q,method,args) {
	if(args == null) {
		args = [];
	}
	return jotun_utils_Dice.All(q,function(p,v) {
		v[method].apply(q,args);
	},null);
};
jotun_utils_Dice.Count = function(from,to,each,complete,increment) {
	if(increment == null) {
		increment = 1;
	}
	var a = Math.min(from,to);
	var b = Math.max(from,to);
	if(increment == null || UInt.gt(1,increment)) {
		increment = 1;
	}
	while(a < b) {
		var a1 = a;
		a = UInt.toFloat(increment) + a;
		if(each(a1,b,a == b) == true) {
			break;
		}
	}
	var c = a == b;
	var r = { from : from, to : b, completed : c, value : a - UInt.toFloat(increment)};
	if(complete != null) {
		complete(r);
	}
	return r;
};
jotun_utils_Dice.One = function(from,alt) {
	if(((from) instanceof Array)) {
		jotun_utils_Dice.Values(from,function(v) {
			from = v;
			return from == null;
		});
	}
	return { value : jotun_tools_Utils.isValid(from) ? from : alt, object : from};
};
jotun_utils_Dice.Match = function(table,values,limit) {
	if(limit == null) {
		limit = 1;
	}
	if(!((values) instanceof Array)) {
		values = [values];
	}
	var r = 0;
	jotun_utils_Dice.Values(values,function(v) {
		if(Lambda.indexOf(table,v) != -1) {
			r += 1;
		}
		return (limit -= 1) == 0;
	});
	return r;
};
jotun_utils_Dice.Remove = function(table,values) {
	if(!((values) instanceof Array)) {
		values = [values];
	}
	jotun_utils_Dice.Values(values,function(v) {
		var i = Lambda.indexOf(table,v);
		if(i != -1) {
			HxOverrides.remove(table,v);
		}
	});
};
jotun_utils_Dice.Mix = function(data) {
	var r = [];
	jotun_utils_Dice.Values(data,function(v) {
		r = r.concat(v);
	});
	return r;
};
jotun_utils_Dice.Random = function(data) {
	return data[Math.random() * data.length | 0];
};
jotun_utils_Dice.Table = function(data,key,numeric,copy) {
	if(copy == null) {
		copy = false;
	}
	if(numeric == null) {
		numeric = false;
	}
	var r = copy == true ? [].concat(data) : data;
	if(numeric) {
		if(key != null) {
			haxe_ds_ArraySort.sort(r,function(a,b) {
				if(Reflect.field(a,key) < Reflect.field(b,key)) {
					return -1;
				} else {
					return 1;
				}
			});
		} else {
			haxe_ds_ArraySort.sort(r,function(a,b) {
				if(a < b) {
					return -1;
				} else {
					return 1;
				}
			});
		}
	} else if(key != null) {
		haxe_ds_ArraySort.sort(r,function(a,b) {
			return Reflect.compare(jotun_utils_SearchTag.convert(Reflect.field(a,key)),jotun_utils_SearchTag.convert(Reflect.field(b,key)));
		});
	} else {
		haxe_ds_ArraySort.sort(r,function(a,b) {
			return Reflect.compare(jotun_utils_SearchTag.convert(a),jotun_utils_SearchTag.convert(b));
		});
	}
	return r;
};
jotun_utils_Dice.List = function(data,a,b) {
	if(a == null) {
		a = 0;
	}
	var copy = [];
	var len = data.length;
	if(b == null) {
		b = data.length;
	}
	if(UInt.gt(b,a)) {
		while(UInt.gt(b,a)) {
			if(UInt.gte(a,len)) {
				break;
			}
			copy[copy.length] = data[a];
			++a;
		}
	} else if(UInt.gt(a,b)) {
		while(UInt.gt(a,b)) {
			if(UInt.gt(len,a)) {
				copy[copy.length] = data[a];
			}
			--a;
		}
	}
	return copy;
};
jotun_utils_Dice.Blend = function(objects,into,blendType) {
	if(blendType == null) {
		blendType = 0;
	}
	jotun_utils_Dice.Values(objects,function(o) {
		jotun_utils_Dice.All(o,function(p,v) {
			switch(blendType) {
			case 0:
				into[p] = v;
				break;
			case 1:
				if(!Object.prototype.hasOwnProperty.call(into,p)) {
					into[p] = v;
				}
				break;
			case 2:
				if(Object.prototype.hasOwnProperty.call(into,p)) {
					var i = 0;
					while(Object.prototype.hasOwnProperty.call(into,Std.string(p) + "_" + i)) ++i;
					into[p] = Std.string(p) + "_" + i;
				} else {
					into[p] = v;
				}
				break;
			}
		});
	});
};
jotun_utils_Dice.Children = function(of,each,complete) {
	var r = { children : []};
	var l = 0;
	var c;
	if(of != null) {
		if(js_Boot.__implements(of,jotun_dom_IDisplay)) {
			of = of.element;
		}
		jotun_utils_Dice.Count(0,of.childNodes.length,function(i,j,k) {
			c = of.childNodes.item(i);
			r.children[l] = c;
			return each(c,i);
		},complete);
	}
	return r;
};
var jotun_dom_A = $hx_exports["J_dom_A"] = function(q) {
	if(q == null) {
		q = window.document.createElement("a");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_A.__name__ = "jotun.dom.A";
jotun_dom_A.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_A.__super__ = jotun_dom_Display;
jotun_dom_A.prototype = $extend(jotun_dom_Display.prototype,{
	href: function(url) {
		if(url != null) {
			this.attribute("href",url);
		}
		return this.attribute("href");
	}
	,path: function() {
		return this.attribute("href").split(jotun_Jotun.domain.host).pop();
	}
	,link: function() {
		var _gthis = this;
		var uri = { };
		jotun_utils_Dice.Values(["href","protocol","host","hostname","port","pathname","search","hash"],function(v) {
			uri[v] = Reflect.field(_gthis.element,v);
		});
		return uri;
	}
	,target: function(q) {
		if(q != null) {
			this.attribute("target",q);
		}
		return this.attribute("target");
	}
	,__class__: jotun_dom_A
});
var jotun_dom_Area = $hx_exports["J_dom_Area"] = function(q) {
	if(q == null) {
		q = window.document.createElement("area");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Area.__name__ = "jotun.dom.Area";
jotun_dom_Area.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Area.__super__ = jotun_dom_Display;
jotun_dom_Area.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Area
});
var jotun_dom_Audio = $hx_exports["J_dom_Audio"] = function(q) {
	if(q == null) {
		q = window.document.createElement("audio");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
};
jotun_dom_Audio.__name__ = "jotun.dom.Audio";
jotun_dom_Audio.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Audio.__super__ = jotun_dom_Display;
jotun_dom_Audio.prototype = $extend(jotun_dom_Display.prototype,{
	src: function(value) {
		this.attribute("src",value);
	}
	,play: function(reset) {
		if(reset == true) {
			this.object.currentTime = 0;
		}
		this.object.play();
	}
	,pause: function() {
		this.object.pause();
	}
	,stop: function() {
		this.object.pause();
		this.object.currentTime = 0;
	}
	,volume: function(ammount) {
		if(ammount != null) {
			this.object.volume = ammount;
		}
		return this.object.volume;
	}
	,loop: function(value) {
		if(value != null) {
			this.object.loop = value;
		}
		return this.object.loop;
	}
	,__class__: jotun_dom_Audio
});
var jotun_dom_B = $hx_exports["J_dom_B"] = function(q) {
	if(q == null) {
		q = window.document.createElement("B");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_B.__name__ = "jotun.dom.B";
jotun_dom_B.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_B.__super__ = jotun_dom_Display;
jotun_dom_B.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_B
});
var jotun_dom_Base = $hx_exports["J_dom_Base"] = function(q) {
	if(q == null) {
		q = window.document.createElement("base");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Base.__name__ = "jotun.dom.Base";
jotun_dom_Base.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Base.__super__ = jotun_dom_Display;
jotun_dom_Base.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Base
});
var jotun_dom_Body = $hx_exports["J_dom_Body"] = function(q) {
	if(q == null) {
		q = window.document.createElement("body");
	}
	jotun_dom_Display.call(this,q,null);
	this._body = this.element;
	window.addEventListener("resize",$bind(this,this._wResize));
};
jotun_dom_Body.__name__ = "jotun.dom.Body";
jotun_dom_Body.__super__ = jotun_dom_Display;
jotun_dom_Body.prototype = $extend(jotun_dom_Display.prototype,{
	_wResize: function(e) {
		this.events.resize().call();
	}
	,maxScrollX: function() {
		return this._body.scrollWidth - jotun_tools_Utils.viewportWidth();
	}
	,maxScrollY: function() {
		return this._body.scrollHeight - jotun_tools_Utils.viewportHeight();
	}
	,__class__: jotun_dom_Body
});
var jotun_dom_BR = $hx_exports["J_dom_BR"] = function(q) {
	if(q == null) {
		q = window.document.createElement("br");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_BR.__name__ = "jotun.dom.BR";
jotun_dom_BR.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_BR.__super__ = jotun_dom_Display;
jotun_dom_BR.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_BR
});
var jotun_dom_Div = $hx_exports["J_dom_Div"] = function(q) {
	if(q == null) {
		q = window.document.createElement("div");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Div.__name__ = "jotun.dom.Div";
jotun_dom_Div.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Div.__super__ = jotun_dom_Display;
jotun_dom_Div.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Div
});
var jotun_dom_Button = function(q) {
	jotun_dom_Div.call(this,q);
	this.style("cursor","pointer");
};
jotun_dom_Button.__name__ = "jotun.dom.Button";
jotun_dom_Button.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Button.__super__ = jotun_dom_Div;
jotun_dom_Button.prototype = $extend(jotun_dom_Div.prototype,{
	__class__: jotun_dom_Button
});
var jotun_dom_Canvas = $hx_exports["J_dom_Canvas"] = function(q) {
	if(q == null) {
		q = window.document.createElement("canvas");
	}
	jotun_dom_Display.call(this,q,null);
	this.dom = this.element;
};
jotun_dom_Canvas.__name__ = "jotun.dom.Canvas";
jotun_dom_Canvas.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Canvas.__super__ = jotun_dom_Display;
jotun_dom_Canvas.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Canvas
});
var jotun_dom_Caption = $hx_exports["J_dom_Caption"] = function(q) {
	if(q == null) {
		q = window.document.createElement("caption");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Caption.__name__ = "jotun.dom.Caption";
jotun_dom_Caption.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Caption.__super__ = jotun_dom_Display;
jotun_dom_Caption.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Caption
});
var jotun_dom_Col = $hx_exports["J_dom_Col"] = function(q) {
	if(q == null) {
		q = window.document.createElement("col");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Col.__name__ = "jotun.dom.Col";
jotun_dom_Col.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Col.__super__ = jotun_dom_Display;
jotun_dom_Col.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Col
});
var jotun_dom_DataList = $hx_exports["J_dom_DataList"] = function(q) {
	if(q == null) {
		q = window.document.createElement("datalist");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_DataList.__name__ = "jotun.dom.DataList";
jotun_dom_DataList.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_DataList.__super__ = jotun_dom_Display;
jotun_dom_DataList.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_DataList
});
var jotun_dom_Embed = $hx_exports["J_dom_Embed"] = function(q) {
	if(q == null) {
		q = window.document.createElement("embed");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Embed.__name__ = "jotun.dom.Embed";
jotun_dom_Embed.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Embed.__super__ = jotun_dom_Display;
jotun_dom_Embed.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Embed
});
var jotun_dom_FieldSet = $hx_exports["J_dom_FieldSet"] = function(q) {
	if(q == null) {
		q = window.document.createElement("fieldset");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_FieldSet.__name__ = "jotun.dom.FieldSet";
jotun_dom_FieldSet.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_FieldSet.__super__ = jotun_dom_Display;
jotun_dom_FieldSet.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_FieldSet
});
var jotun_dom_Form = $hx_exports["J_dom_Form"] = function(q) {
	if(q == null) {
		q = window.document.createElement("form");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
};
jotun_dom_Form.__name__ = "jotun.dom.Form";
jotun_dom_Form.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Form.__super__ = jotun_dom_Display;
jotun_dom_Form.prototype = $extend(jotun_dom_Display.prototype,{
	validate: function() {
		this.checkSubmit().click();
		return this.object.checkValidity();
	}
	,checkSubmit: function() {
		if(this._submit == null) {
			var i;
			if(!this.exists("input[type=submit]")) {
				i = new jotun_dom_Input();
				i.type("submit");
				i.hide();
				this.addChild(i);
			} else {
				i = this.one("input[type=submit]");
			}
			this._submit = i;
		}
		return this._submit;
	}
	,submit: function() {
		this.object.submit();
	}
	,formData: function() {
		if(this.inputData == null) {
			this.inputData = new jotun_data_FormData(this);
		} else {
			this.inputData.scan(this);
		}
		return this.inputData;
	}
	,getAsInput: function(i,update) {
		if(this._children == null || update == true) {
			this._children = this.children();
		}
		return this._children.obj(i);
	}
	,__class__: jotun_dom_Form
});
var jotun_dom_H1 = $hx_exports["J_dom_H1"] = function(q) {
	if(q == null) {
		q = window.document.createElement("h1");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_H1.__name__ = "jotun.dom.H1";
jotun_dom_H1.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_H1.__super__ = jotun_dom_Display;
jotun_dom_H1.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_H1
});
var jotun_dom_H2 = $hx_exports["J_dom_H2"] = function(q) {
	if(q == null) {
		q = window.document.createElement("h2");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_H2.__name__ = "jotun.dom.H2";
jotun_dom_H2.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_H2.__super__ = jotun_dom_Display;
jotun_dom_H2.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_H2
});
var jotun_dom_H3 = $hx_exports["J_dom_H3"] = function(q) {
	if(q == null) {
		q = window.document.createElement("h3");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_H3.__name__ = "jotun.dom.H3";
jotun_dom_H3.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_H3.__super__ = jotun_dom_Display;
jotun_dom_H3.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_H3
});
var jotun_dom_H4 = $hx_exports["J_dom_H4"] = function(q) {
	if(q == null) {
		q = window.document.createElement("h4");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_H4.__name__ = "jotun.dom.H4";
jotun_dom_H4.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_H4.__super__ = jotun_dom_Display;
jotun_dom_H4.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_H4
});
var jotun_dom_H5 = $hx_exports["J_dom_H5"] = function(q) {
	if(q == null) {
		q = window.document.createElement("h5");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_H5.__name__ = "jotun.dom.H5";
jotun_dom_H5.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_H5.__super__ = jotun_dom_Display;
jotun_dom_H5.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_H5
});
var jotun_dom_H6 = $hx_exports["J_dom_H6"] = function(q) {
	if(q == null) {
		q = window.document.createElement("h6");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_H6.__name__ = "jotun.dom.H6";
jotun_dom_H6.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_H6.__super__ = jotun_dom_Display;
jotun_dom_H6.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_H6
});
var jotun_dom_HR = $hx_exports["J_dom_HR"] = function(q) {
	if(q == null) {
		q = window.document.createElement("hr");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_HR.__name__ = "jotun.dom.HR";
jotun_dom_HR.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_HR.__super__ = jotun_dom_Display;
jotun_dom_HR.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_HR
});
var jotun_dom_Html = $hx_exports["J_dom_Html"] = function(q) {
	if(q == null) {
		q = window.document.createElement("html");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Html.__name__ = "jotun.dom.Html";
jotun_dom_Html.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Html.__super__ = jotun_dom_Display;
jotun_dom_Html.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Html
});
var jotun_dom_I = $hx_exports["J_dom_I"] = function(q) {
	if(q == null) {
		q = window.document.createElement("I");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_I.__name__ = "jotun.dom.I";
jotun_dom_I.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_I.__super__ = jotun_dom_Display;
jotun_dom_I.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_I
});
var jotun_dom_IFrame = $hx_exports["J_dom_IFrame"] = function(q) {
	if(q == null) {
		q = window.document.createElement("iframe");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
};
jotun_dom_IFrame.__name__ = "jotun.dom.IFrame";
jotun_dom_IFrame.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_IFrame.__super__ = jotun_dom_Display;
jotun_dom_IFrame.prototype = $extend(jotun_dom_Display.prototype,{
	src: function(url) {
		this.object.src = url;
	}
	,enableScroll: function(mode) {
		this.object.scrolling = mode ? "yes" : "no";
	}
	,__class__: jotun_dom_IFrame
});
var jotun_dom_Img = $hx_exports["J_dom_Img"] = function(q) {
	if(q == null) {
		q = window.document.createElement("img");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
};
jotun_dom_Img.__name__ = "jotun.dom.Img";
jotun_dom_Img.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Img.__super__ = jotun_dom_Display;
jotun_dom_Img.prototype = $extend(jotun_dom_Display.prototype,{
	src: function(value) {
		var a;
		if(value != null) {
			if(value.indexOf("<svg") != -1 && value.indexOf("</svg>") != -1) {
				var blob = new Blob([value],{ type : "image/svg+xml"});
				value = window.URL.createObjectURL(blob);
			}
			this.object.src = value;
		}
		return this.object.src;
	}
	,alt: function(value) {
		if(value != null) {
			this.object.alt = value;
		}
		return this.object.alt;
	}
	,loadBinary: function(url) {
		var _gthis = this;
		var req = new XMLHttpRequest();
		var url1 = url;
		req.open("GET",url1,true);
		req.responseType = "arraybuffer";
		req.send(null);
		req.onload = function(e) {
			var blob = new Blob([e.target.response]);
			_gthis.src(jotun_tools_Utils.fileToURL(blob));
			_gthis.events.progress().call(false,true,{ completed : true});
		};
		req.onprogress = function(e) {
			_gthis.events.progress().call(false,true,e);
		};
		req.onerror = function(e) {
			_gthis.events.error().call(false,true,e);
		};
	}
	,__class__: jotun_dom_Img
});
var jotun_dom_Input = $hx_exports["J_dom_Input"] = function(q) {
	if(q == null) {
		q = window.document.createElement("input");
	}
	jotun_dom_Display.call(this,q,null);
	this._object = this.element;
	if(this.type() == "file") {
		if(this.hasAttribute("display-on")) {
			this.fillTarget = jotun_Jotun.one(this.attribute("display-on"));
		}
	}
};
jotun_dom_Input.__name__ = "jotun.dom.Input";
jotun_dom_Input.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Input.__super__ = jotun_dom_Display;
jotun_dom_Input.prototype = $extend(jotun_dom_Display.prototype,{
	get__object: function() {
		return this.element;
	}
	,_onFileSelected: function(e) {
		var bg = null;
		var ftype = this.file(0).type.split("/");
		if(ftype[0] == "image") {
			bg = this.readFile(0);
		} else {
			bg = Object.prototype.hasOwnProperty.call(jotun_dom_Input.icons,ftype[1]) ? Reflect.field(jotun_dom_Input.icons,ftype[1]) : jotun_dom_Input.icons.common;
		}
		if(bg != null && this.fillTarget != null) {
			if(this.fillTarget.typeOf() == "IMG") {
				this.fillTarget.attribute("src",bg);
			} else {
				this.fillTarget.style({ backgroundImage : "url(" + bg + ")"});
			}
		}
		if(this._ioHandler != null) {
			this._ioHandler(this);
		}
	}
	,type: function(q) {
		if(q != null) {
			this.get__object().type = q;
		}
		return this.get__object().type;
	}
	,required: function(q) {
		if(q != null) {
			this.get__object().required = q;
		}
		return this.get__object().required;
	}
	,pattern: function(q) {
		if(q != null) {
			this.get__object().pattern = q;
		}
		return this.get__object().pattern;
	}
	,placeholder: function(q) {
		if(q != null) {
			this.get__object().placeholder = q;
		}
		return this.get__object().placeholder;
	}
	,restrict: function(q,filter) {
		if(!((q) instanceof EReg)) {
			if(typeof(q) != "string") {
				q = q.toString();
			}
			q = q.split("$/");
			if(!jotun_tools_Utils.isValid(q[1])) {
				q[1] = "";
			}
			q = new EReg(q[0].substring(1),q[1]);
		}
		this._rgx = q;
		this._flt = filter;
	}
	,value: function(q) {
		switch(this.type()) {
		case "checkbox":
			if(q != null) {
				this.check(jotun_tools_Utils.boolean(q));
			} else if(this.hasAttribute("value")) {
				return this.attribute("value");
			} else {
				return this.isChecked();
			}
			break;
		case "file":
			if(this.hasFile()) {
				if(this.get__object().files.length > 0) {
					return this.get__object().files;
				} else if(q != null) {
					if(q != "") {
						return this.file(q);
					}
				} else {
					return this.file(0);
				}
			} else {
				return null;
			}
			break;
		}
		if(q != null) {
			this.get__object().value = q;
		} else {
			q = this.get__object().value;
			if(this.get__object().maxLength != null && this.get__object().maxLength > 0) {
				q = q.substr(0,this.get__object().maxLength);
			}
			if(this._flt != null) {
				var k = this._flt.split("");
				jotun_utils_Dice.Values(k,function(v1) {
					q = q.split(v1).join("");
				});
			}
		}
		return q;
	}
	,clear: function(background) {
		this.value("");
		if(this.fillTarget != null) {
			this.fillTarget.style("backgroundImage",background);
		}
	}
	,isValid: function() {
		switch(this.type()) {
		case "checkbox":
			return true;
		case "file":
			if(this.hasFile()) {
				var mime = this.attribute("accept").split(", ");
				var roll = jotun_utils_Dice.Values(this.files(),function(f) {
					return mime.indexOf(f.type) == -1;
				});
				return roll.completed;
			}
			break;
		default:
			var v = this.get__object().value;
			if(v.length == 0) {
				return false;
			} else if(this._rgx != null) {
				return this._rgx.match(v);
			} else {
				return true;
			}
		}
		return false;
	}
	,isEmpty: function() {
		return this.value() == "";
	}
	,hasFile: function() {
		return this.files().length > 0;
	}
	,files: function() {
		return this.get__object().files;
	}
	,file: function(id) {
		if(id == null) {
			id = 0;
		}
		return this.files().item(id);
	}
	,readFile: function(id) {
		if(id == null) {
			id = 0;
		}
		var tmp = window.URL;
		var tmp1 = this.file();
		return tmp.createObjectURL(tmp1);
	}
	,control: function(handler,display,mime) {
		this._ioHandler = handler;
		if(display != null) {
			this.fillTarget = display;
		}
		if(mime != null) {
			this.acceptOnly(mime);
		}
		if(this.attribute("jotun-control") != "ready") {
			this.type("file");
			this.attribute("jotun-control","ready");
			this.events.change($bind(this,this._onFileSelected));
		}
	}
	,acceptOnly: function(mime) {
		this.attribute("accept",mime.join(", "));
	}
	,check: function(toggle) {
		if(toggle == null) {
			toggle = true;
		}
		var tmp = toggle == null ? !this.get__object().checked : toggle == true || toggle == 1;
		this.get__object().checked = tmp;
	}
	,isChecked: function() {
		return this.get__object().checked;
	}
	,filesToArray: function(o) {
		if(o == null) {
			o = [];
		}
		if(this.hasFile()) {
			var f = this.files();
			jotun_utils_Dice.Count(0,f.length,function(a,b,e) {
				o.push(f.item(a));
				return false;
			});
		}
		return o;
	}
	,filesToObject: function(o) {
		if(o == null) {
			o = { };
		}
		jotun_utils_Dice.All(this.filesToArray(),function(p,v) {
			o["file_" + p] = v;
		});
		return o;
	}
	,__class__: jotun_dom_Input
	,__properties__: {get__object:"get__object"}
});
var jotun_dom_Label = $hx_exports["J_dom_Label"] = function(q) {
	if(q == null) {
		q = window.document.createElement("label");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Label.__name__ = "jotun.dom.Label";
jotun_dom_Label.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Label.__super__ = jotun_dom_Display;
jotun_dom_Label.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Label
});
var jotun_dom_Legend = $hx_exports["J_dom_Legend"] = function(q) {
	if(q == null) {
		q = window.document.createElement("legend");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Legend.__name__ = "jotun.dom.Legend";
jotun_dom_Legend.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Legend.__super__ = jotun_dom_Display;
jotun_dom_Legend.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Legend
});
var jotun_dom_LI = $hx_exports["J_dom_LI"] = function(q) {
	if(q == null) {
		q = window.document.createElement("li");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_LI.__name__ = "jotun.dom.LI";
jotun_dom_LI.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_LI.__super__ = jotun_dom_Display;
jotun_dom_LI.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_LI
});
var jotun_dom_Link = $hx_exports["J_dom_Link"] = function(q) {
	if(q == null) {
		q = window.document.createElement("link");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
};
jotun_dom_Link.__name__ = "jotun.dom.Link";
jotun_dom_Link.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Link.__super__ = jotun_dom_Display;
jotun_dom_Link.prototype = $extend(jotun_dom_Display.prototype,{
	href: function(url,handler) {
		this.object.href = url;
		if(handler != null) {
			this.events.load(handler,1);
		}
	}
	,__class__: jotun_dom_Link
});
var jotun_dom_Map = $hx_exports["J_dom_Map"] = function(q) {
	if(q == null) {
		q = window.document.createElement("map");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Map.__name__ = "jotun.dom.Map";
jotun_dom_Map.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Map.__super__ = jotun_dom_Display;
jotun_dom_Map.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Map
});
var jotun_dom_Media = $hx_exports["J_dom_Media"] = function(q) {
	if(q == null) {
		q = window.document.createElement("media");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Media.__name__ = "jotun.dom.Media";
jotun_dom_Media.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Media.__super__ = jotun_dom_Display;
jotun_dom_Media.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Media
});
var jotun_dom_Meta = $hx_exports["J_dom_Meta"] = function(q) {
	if(q == null) {
		q = window.document.createElement("meta");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Meta.__name__ = "jotun.dom.Meta";
jotun_dom_Meta.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Meta.__super__ = jotun_dom_Display;
jotun_dom_Meta.prototype = $extend(jotun_dom_Display.prototype,{
	set: function(name,content) {
		this.attribute("name",name);
		this.attribute("content",content);
	}
	,charset: function(q,vr) {
		if(vr == null) {
			vr = 5;
		}
		if(vr >= 5) {
			this.attribute("charset",q);
		} else if(vr < 5) {
			this.attribute("http-equiv","content-type");
			this.attribute("charset","text/html; charset=UTF-8");
		}
	}
	,__class__: jotun_dom_Meta
});
var jotun_dom_Meter = $hx_exports["J_dom_Meter"] = function(q) {
	if(q == null) {
		q = window.document.createElement("meter");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Meter.__name__ = "jotun.dom.Meter";
jotun_dom_Meter.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Meter.__super__ = jotun_dom_Display;
jotun_dom_Meter.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Meter
});
var jotun_dom_Mod = $hx_exports["J_dom_Mod"] = function(q) {
	if(q == null) {
		q = window.document.createElement("mod");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Mod.__name__ = "jotun.dom.Mod";
jotun_dom_Mod.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Mod.__super__ = jotun_dom_Display;
jotun_dom_Mod.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Mod
});
var jotun_dom_Object = $hx_exports["J_dom_Object"] = function(q) {
	if(q == null) {
		q = window.document.createElement("object");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Object.__name__ = "jotun.dom.Object";
jotun_dom_Object.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Object.__super__ = jotun_dom_Display;
jotun_dom_Object.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Object
});
var jotun_dom_OL = $hx_exports["J_dom_OL"] = function(q) {
	if(q == null) {
		q = window.document.createElement("ol");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_OL.__name__ = "jotun.dom.OL";
jotun_dom_OL.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_OL.__super__ = jotun_dom_Display;
jotun_dom_OL.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_OL
});
var jotun_dom_OptGroup = $hx_exports["J_dom_OptGroup"] = function(q) {
	if(q == null) {
		q = window.document.createElement("optgroup");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_OptGroup.__name__ = "jotun.dom.OptGroup";
jotun_dom_OptGroup.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_OptGroup.__super__ = jotun_dom_Display;
jotun_dom_OptGroup.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_OptGroup
});
var jotun_dom_Option = $hx_exports["J_dom_Option"] = function(q) {
	if(q == null) {
		q = window.document.createElement("option");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
};
jotun_dom_Option.__name__ = "jotun.dom.Option";
jotun_dom_Option.__super__ = jotun_dom_Display;
jotun_dom_Option.prototype = $extend(jotun_dom_Display.prototype,{
	value: function(q) {
		return this.object.value;
	}
	,label: function() {
		return this.object.innerText;
	}
	,__class__: jotun_dom_Option
});
var jotun_dom_Output = $hx_exports["J_dom_Output"] = function(q) {
	if(q == null) {
		q = window.document.createElement("output");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Output.__name__ = "jotun.dom.Output";
jotun_dom_Output.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Output.__super__ = jotun_dom_Display;
jotun_dom_Output.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Output
});
var jotun_dom_P = $hx_exports["J_dom_P"] = function(q) {
	if(q == null) {
		q = window.document.createElement("p");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_P.__name__ = "jotun.dom.P";
jotun_dom_P.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_P.__super__ = jotun_dom_Display;
jotun_dom_P.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_P
});
var jotun_dom_Param = $hx_exports["J_dom_Param"] = function(q) {
	if(q == null) {
		q = window.document.createElement("param");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Param.__name__ = "jotun.dom.Param";
jotun_dom_Param.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Param.__super__ = jotun_dom_Display;
jotun_dom_Param.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Param
});
var jotun_dom_Picture = $hx_exports["J_dom_Picture"] = function(q) {
	if(q == null) {
		q = window.document.createElement("picture");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Picture.__name__ = "jotun.dom.Picture";
jotun_dom_Picture.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Picture.__super__ = jotun_dom_Display;
jotun_dom_Picture.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Picture
});
var jotun_dom_Pre = $hx_exports["J_dom_Pre"] = function(q) {
	if(q == null) {
		q = window.document.createElement("pre");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Pre.__name__ = "jotun.dom.Pre";
jotun_dom_Pre.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Pre.__super__ = jotun_dom_Display;
jotun_dom_Pre.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Pre
});
var jotun_dom_Progress = $hx_exports["J_dom_Progress"] = function(q) {
	if(q == null) {
		q = window.document.createElement("progress");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Progress.__name__ = "jotun.dom.Progress";
jotun_dom_Progress.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Progress.__super__ = jotun_dom_Display;
jotun_dom_Progress.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Progress
});
var jotun_dom_Quote = $hx_exports["J_dom_Quote"] = function(q) {
	if(q == null) {
		q = window.document.createElement("quote");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Quote.__name__ = "jotun.dom.Quote";
jotun_dom_Quote.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Quote.__super__ = jotun_dom_Display;
jotun_dom_Quote.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Quote
});
var jotun_dom_Script = $hx_exports["J_dom_Script"] = function(q) {
	if(q == null) {
		q = window.document.createElement("script");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
};
jotun_dom_Script.__name__ = "jotun.dom.Script";
jotun_dom_Script.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Script.fromUrl = function(q,data,handler) {
	jotun_Jotun.request(q,data,"GET",function(r) {
		var js = null;
		if(r.success) {
			js = jotun_dom_Script.fromString(r.data).publish();
			js.attribute("source",q);
		}
		if(handler != null) {
			handler(js);
		}
	});
};
jotun_dom_Script.fromString = function(q,data) {
	var js = new jotun_dom_Script();
	js.writeHtml(jotun_utils_Filler.to(q,data));
	return js;
};
jotun_dom_Script.require = function(url,handler) {
	if(!((url) instanceof Array)) {
		url = [url];
	}
	if(url.length > 0) {
		var file = url.shift();
		if(file != null) {
			var s = new jotun_dom_Script();
			s.publish();
			s.src(file,function(e) {
				jotun_dom_Script.require(url,handler);
			});
		}
	} else if(handler != null) {
		handler();
	}
};
jotun_dom_Script.__super__ = jotun_dom_Display;
jotun_dom_Script.prototype = $extend(jotun_dom_Display.prototype,{
	type: function(q) {
		this.object.type = q;
		return this;
	}
	,src: function(url,handler) {
		this.object.src = url;
		if(handler != null) {
			this.events.load(handler,1);
		}
	}
	,async: function() {
		this.object.async = true;
	}
	,writeText: function(q) {
		this.object.text = q;
		return this;
	}
	,appendText: function(q) {
		this.object.text += Std.string(q);
		return this;
	}
	,writeHtml: function(q) {
		this.object.text = q;
		return this;
	}
	,appendHtml: function(q) {
		this.object.text += Std.string(q);
		return this;
	}
	,publish: function() {
		jotun_Jotun.document.head.addChild(this);
		return this;
	}
	,__class__: jotun_dom_Script
});
var jotun_dom_Select = $hx_exports["J_dom_Select"] = function(q) {
	if(q == null) {
		q = window.document.createElement("select");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
	this.events.change($bind(this,this._refreshIO));
};
jotun_dom_Select.__name__ = "jotun.dom.Select";
jotun_dom_Select.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Select.__super__ = jotun_dom_Display;
jotun_dom_Select.prototype = $extend(jotun_dom_Display.prototype,{
	_refreshIO: function(e) {
		var c = "" + Std.string(this.value());
		var p = this.hasAttribute("current-value") ? this.attribute("current-value") : null;
		if(p == null || c != p) {
			this.attribute("previous-value",p);
			this.attribute("current-value",c);
			if(this._ioHandler != null) {
				this._ioHandler(e);
			}
		}
	}
	,getAllSelected: function() {
		return this.all("option:checked");
	}
	,getSelected: function() {
		return this.one("option:checked");
	}
	,setValue: function(i) {
		this.object.selectedIndex = i;
		this.events.change().call(true,true);
	}
	,clearSelected: function() {
		this.getAllSelected().each(function(o) {
			o.object.selected = false;
		});
	}
	,selectValue: function(value) {
		value = Std.string(value);
		this.all("option").each(function(o) {
			var tmp = o.value();
			o.object.selected = tmp == value;
		});
		this.events.change().call(true,true);
	}
	,value: function(q) {
		if(q != null) {
			this.selectValue(q);
		}
		var t = this.getAllSelected();
		var r = [];
		if(t != null && t.length() > 0) {
			t.each(function(v) {
				var o = v;
				r[r.length] = o.value();
			});
		}
		if(r.length <= 1) {
			return r[0];
		} else {
			return r;
		}
	}
	,hasValue: function() {
		var i = 0;
		if(this.object.selectedOptions != null) {
			while(UInt.gt(this.object.selectedOptions.length,i)) {
				var o = this.object.selectedOptions.item(i++);
				if(!o.disabled) {
					return true;
				}
			}
		} else {
			while(UInt.gt(this.object.options.length,i)) {
				var o = this.object.options[i++];
				if(o.selected && !o.disabled) {
					return true;
				}
			}
		}
		return false;
	}
	,add: function(option) {
		var _gthis = this;
		if(((option) instanceof Array)) {
			var r = [];
			jotun_utils_Dice.All(option,function(p,v) {
				r[p] = _gthis.mount(jotun_utils_Filler.to(jotun_dom_Select.layout,v));
			});
			return r;
		} else {
			return this.mount(jotun_utils_Filler.to(jotun_dom_Select.layout,option));
		}
	}
	,saveTheme: function(name,content) {
		if(jotun_dom_Select._themes == null) {
			jotun_dom_Select._themes = { };
		}
		jotun_dom_Select._themes[name] = jotun_tools_Utils.getValidOne(content,this.element.innerHTML);
	}
	,loadTheme: function(name) {
		this.element.innerHTML = Reflect.field(jotun_dom_Select._themes,name);
		this.events.change().call();
	}
	,control: function(handler) {
		this._ioHandler = handler;
	}
	,__class__: jotun_dom_Select
});
var jotun_dom_Source = $hx_exports["J_dom_Source"] = function(q) {
	if(q == null) {
		q = window.document.createElement("source");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
};
jotun_dom_Source.__name__ = "jotun.dom.Source";
jotun_dom_Source.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Source.__super__ = jotun_dom_Display;
jotun_dom_Source.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Source
});
var jotun_dom_Span = $hx_exports["J_dom_Span"] = function(q,d) {
	if(q == null) {
		q = window.document.createElement("span");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Span.__name__ = "jotun.dom.Span";
jotun_dom_Span.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Span.__super__ = jotun_dom_Display;
jotun_dom_Span.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Span
});
var jotun_dom_Style = $hx_exports["J_dom_Style"] = function(q) {
	if(q == null) {
		q = window.document.createElement("style");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
	this.object.type = "text/css";
};
jotun_dom_Style.__name__ = "jotun.dom.Style";
jotun_dom_Style.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Style.fromUrl = function(q,data,handler) {
	jotun_Jotun.request(q,null,"GET",function(r) {
		var css = null;
		if(r.success) {
			css = jotun_dom_Style.fromString(r.data).publish();
		}
		if(handler != null) {
			handler(css);
		}
	});
};
jotun_dom_Style.fromString = function(q,data) {
	var css = new jotun_dom_Style();
	css.writeHtml(jotun_utils_Filler.to(q,data));
	return css;
};
jotun_dom_Style.require = function(url,handler) {
	if(!((url) instanceof Array)) {
		url = [url];
	}
	if(url.length > 0) {
		var file = url.shift();
		if(file != null) {
			var s = new jotun_dom_Link();
			s.href(file,function(e) {
				jotun_dom_Style.require(url,handler);
			});
			jotun_Jotun.document.head.addChild(s);
		}
	} else if(handler != null) {
		handler();
	}
};
jotun_dom_Style.__super__ = jotun_dom_Display;
jotun_dom_Style.prototype = $extend(jotun_dom_Display.prototype,{
	mount: function(q,data,at) {
		if(at == null) {
			at = -1;
		}
		if(jotun_Jotun.resources.exists(q)) {
			this.writeHtml(jotun_Jotun.resources.get(q,data));
		} else {
			this.writeHtml("/* <!> mod:" + q + " not found */");
		}
		return this;
	}
	,publish: function() {
		window.document.head.appendChild(this.element);
		return this;
	}
	,addToBody: function() {
		this.publish();
		return this;
	}
	,__class__: jotun_dom_Style
});
var jotun_dom_Svg = $hx_exports["J_dom_Svg"] = function(q) {
	this._tmp_width = 1;
	this._tmp_stoke = "#CC0000";
	this._tmp_fill = "#FF0000";
	if(q == null) {
		q = window.document.createElementNS("http://www.w3.org/2000/svg","svg");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
};
jotun_dom_Svg.__name__ = "jotun.dom.Svg";
jotun_dom_Svg.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Svg.__super__ = jotun_dom_Display;
jotun_dom_Svg.prototype = $extend(jotun_dom_Display.prototype,{
	hasAttribute: function(name) {
		if(!this.element.hasAttributeNS(null,name)) {
			return Object.prototype.hasOwnProperty.call(this.element,name);
		} else {
			return true;
		}
	}
	,attribute: function(name,value) {
		if(name != null) {
			var t = Reflect.field(this.element,name);
			if(t != null) {
				if(value != null) {
					this.element[name] = value;
				}
				return Reflect.field(this.element,name);
			}
			if(value != null) {
				if(this._setattr) {
					this.element.setAttributeNS(null,name,value);
				}
				return value;
			}
			if(this._getattr) {
				return this.element.getAttributeNS(null,name);
			}
		}
		return null;
	}
	,clearAttribute: function(name) {
		var value = null;
		if(this.hasAttribute(name)) {
			if(Object.prototype.hasOwnProperty.call(this.element,name)) {
				Reflect.deleteField(this.element,name);
			} else {
				value = this.attribute(name);
				this.element.removeAttributeNS(null,name);
			}
		}
		return value;
	}
	,draw: function(paper,stroke,width,fill) {
		if(fill == null) {
			fill = "none";
		}
		if(width == null) {
			width = 1;
		}
		if(stroke == null) {
			stroke = "#000000";
		}
		this.appendHtml("<path d=\"" + paper.val() + "\" stroke=\"" + stroke + "\" stroke-width=\"" + width + "\" fill=\"" + fill + "\"></path>");
	}
	,__class__: jotun_dom_Svg
});
var jotun_dom_Text = function(q) {
	q = window.document.createTextNode(q);
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Text.__name__ = "jotun.dom.Text";
jotun_dom_Text.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Text.__super__ = jotun_dom_Display;
jotun_dom_Text.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Text
});
var jotun_dom_TextArea = $hx_exports["J_dom_TextArea"] = function(q) {
	if(q == null) {
		q = window.document.createElement("textarea");
	}
	jotun_dom_Input.call(this,q);
};
jotun_dom_TextArea.__name__ = "jotun.dom.TextArea";
jotun_dom_TextArea.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_TextArea.__super__ = jotun_dom_Input;
jotun_dom_TextArea.prototype = $extend(jotun_dom_Input.prototype,{
	__class__: jotun_dom_TextArea
});
var jotun_dom_Title = $hx_exports["J_dom_Title"] = function(q) {
	if(q == null) {
		q = window.document.createElement("title");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Title.__name__ = "jotun.dom.Title";
jotun_dom_Title.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Title.__super__ = jotun_dom_Display;
jotun_dom_Title.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Title
});
var jotun_dom_Track = $hx_exports["J_dom_Track"] = function(q) {
	if(q == null) {
		q = window.document.createElement("track");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_Track.__name__ = "jotun.dom.Track";
jotun_dom_Track.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Track.__super__ = jotun_dom_Display;
jotun_dom_Track.prototype = $extend(jotun_dom_Display.prototype,{
	__class__: jotun_dom_Track
});
var jotun_dom_UL = $hx_exports["J_dom_UL"] = function(q) {
	if(q == null) {
		q = window.document.createElement("ul");
	}
	jotun_dom_Display.call(this,q,null);
};
jotun_dom_UL.__name__ = "jotun.dom.UL";
jotun_dom_UL.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_UL.__super__ = jotun_dom_Display;
jotun_dom_UL.prototype = $extend(jotun_dom_Display.prototype,{
	add: function(li) {
		var _gthis = this;
		if(((li) instanceof Array)) {
			var r = [];
			jotun_utils_Dice.All(li,function(p,v) {
				r[p] = _gthis.mount(jotun_utils_Filler.to(jotun_dom_UL.layout,v));
			});
			return r;
		} else {
			return this.mount(jotun_utils_Filler.to(jotun_dom_UL.layout,li));
		}
	}
	,__class__: jotun_dom_UL
});
var jotun_dom_Video = $hx_exports["J_dom_Video"] = function(q) {
	if(q == null) {
		q = window.document.createElement("video");
	}
	jotun_dom_Display.call(this,q,null);
	this.object = this.element;
};
jotun_dom_Video.__name__ = "jotun.dom.Video";
jotun_dom_Video.get = function(q) {
	return jotun_Jotun.one(q);
};
jotun_dom_Video.__super__ = jotun_dom_Display;
jotun_dom_Video.prototype = $extend(jotun_dom_Display.prototype,{
	play: function() {
		this.object.play();
	}
	,pause: function() {
		this.object.pause();
	}
	,togglePause: function() {
		if(this.object.paused) {
			this.play();
		} else {
			this.pause();
		}
	}
	,__class__: jotun_dom_Video
});
var jotun_tools_Utils = $hx_exports["J_Utils"] = function() { };
jotun_tools_Utils.__name__ = "jotun.tools.Utils";
jotun_tools_Utils.matchMedia = function(value) {
	return window.matchMedia(value).matches;
};
jotun_tools_Utils.screenOrientation = function() {
	if(jotun_tools_Utils.matchMedia("(orientation: portrait)")) {
		return "portrait";
	} else {
		return "landscape";
	}
};
jotun_tools_Utils.viewportWidth = function() {
	return window.innerWidth || document.documentElement.clientWidth;
};
jotun_tools_Utils.viewportHeight = function() {
	return window.innerHeight || document.documentElement.clientHeight;
};
jotun_tools_Utils.mathLocation = function(uri) {
	return window.location.href.indexOf(uri) != -1;
};
jotun_tools_Utils.screenInfo = function() {
	return jotun_tools_Utils.screenOrientation() + "(" + jotun_tools_Utils.viewportWidth() + "x" + jotun_tools_Utils.viewportHeight() + ")";
};
jotun_tools_Utils.displayFrom = function(t) {
	var id = null;
	var type = null;
	if(t.hasAttribute != null) {
		id = t.getAttribute("jtn-id");
		if(id == null) {
			type = t.getAttribute("jtn-dom");
			if(type == null) {
				type = t.tagName.toUpperCase();
				t.setAttribute("jtn-dom",type);
			} else {
				type = type.toUpperCase();
			}
		} else {
			return jotun_dom_Display.fromGC(id);
		}
	}
	var OC = Reflect.field(jotun_tools_Utils._typeOf,type);
	if(OC == null) {
		return new jotun_dom_Display(t);
	} else {
		return new OC(t);
	}
};
jotun_tools_Utils.getDisplay = function(t) {
	var id = t.hasAttribute != null && t.hasAttribute("jtn-id") ? Std.parseInt(t.getAttribute("jtn-id")) : null;
	if(id != null) {
		return jotun_dom_Display.fromGC(id);
	}
	return new jotun_dom_Display(t);
};
jotun_tools_Utils.intToString = function(value,rad) {
	if(typeof(value) == "string") {
		value = Std.parseInt(value);
	}
	return value.toString.apply(value,rad != null ? [rad] : []);
};
jotun_tools_Utils.getAttributes = function(display) {
	var attr = display.element.attributes;
	var data = { };
	if(attr != null) {
		var i = 0;
		var len = attr.length;
		while(UInt.gt(len,i)) {
			var a = attr.item(i);
			data[a.name] = a.value;
			++i;
		}
	}
	return data;
};
jotun_tools_Utils.fileToURL = function(file) {
	return window.URL.createObjectURL(file);
};
jotun_tools_Utils.getMin = function(values,filter) {
	var r = null;
	jotun_utils_Dice.Values(values,function(i) {
		if(filter == null || filter(i)) {
			if(i < r || r == null) {
				r = i;
			}
		}
	});
	return r;
};
jotun_tools_Utils.getMax = function(values,filter) {
	var r = null;
	jotun_utils_Dice.Values(values,function(i) {
		if(filter == null || filter(i)) {
			if(i > r || r == null) {
				r = i;
			}
		}
	});
	return r;
};
jotun_tools_Utils.getQueryParams = function(value) {
	var params = { };
	if(value.indexOf("?") > 0) {
		value = value.split("+").join(" ").split("?")[1];
	} else {
		return params;
	}
	jotun_utils_Dice.Values(value.split("&"),function(v) {
		var data = v.split("=");
		if(data.length > 1) {
			var field = decodeURIComponent(data[0].split("+").join(" "));
			var value = decodeURIComponent(data[1].split("+").join(" "));
			params[field] = value;
		}
	});
	return params;
};
jotun_tools_Utils.clearArray = function(path,filter) {
	var copy = [];
	jotun_utils_Dice.Values(path,function(v) {
		if(v != null && v != "" && (filter == null || filter(v))) {
			copy[copy.length] = v;
		}
	});
	return copy;
};
jotun_tools_Utils.toString = function(o,json) {
	if(json == true) {
		return JSON.stringify(o);
	} else {
		return Std.string(o);
	}
};
jotun_tools_Utils.sruString = function(o) {
	return jotun_tools_Utils._sruFly(o,"","");
};
jotun_tools_Utils._sruFly = function(o,i,b) {
	i += "  ";
	jotun_utils_Dice.All(o,function(p,v) {
		if(v == null) {
			b += i + p + ":* = NULL\r";
		} else if(typeof(v) == "string") {
			b += i + p + ":String = " + Std.string(v) + "\r";
		} else if(typeof(v) == "boolean" || v == "true" || v == "false" || v == true || v == false) {
			b += i + p + ":Bool = " + Std.string(v) + "\r";
		} else if(typeof(v) == "number" && ((v | 0) === v) || typeof(v) == "number") {
			b += i + p + ":Number = " + Std.string(v) + "\r";
		} else if(((v) instanceof Array)) {
			b += i + p + ":Array[" + Std.string(v.length) + "]:[\r" + jotun_tools_Utils._sruFly(v,i,"") + i + "]\r";
		} else {
			b += i + p + ":Object {\r" + jotun_tools_Utils._sruFly(v,i,"") + i + "}\r";
		}
	});
	return b;
};
jotun_tools_Utils.isValid = function(o,len) {
	if(len == null) {
		len = 0;
	}
	if(o != null && o != "") {
		if(o != "null" && Object.prototype.hasOwnProperty.call(o,"length")) {
			return UInt.gt(o.length,len);
		} else if(o != 0) {
			return o != false;
		} else {
			return false;
		}
	}
	return false;
};
jotun_tools_Utils.isRange = function(o,min,max) {
	if(o != null) {
		if(typeof(o) != "number") {
			if(((o) instanceof Array) || typeof(o) == "string") {
				o = o.length;
			} else {
				return false;
			}
		}
	} else {
		return false;
	}
	if(max == null) {
		return o >= min;
	} else if(min == null) {
		return o <= max;
	} else if(o >= min) {
		return o <= max;
	} else {
		return false;
	}
};
jotun_tools_Utils.isValidAll = function(o) {
	var q = jotun_utils_Dice.Values(o,function(v) {
		return !jotun_tools_Utils.isValid(v);
	});
	return q.completed;
};
jotun_tools_Utils.getValidOne = function(o,alt) {
	if(jotun_tools_Utils.isValid(o)) {
		return o;
	} else {
		return alt;
	}
};
jotun_tools_Utils.typeof = function(o) {
	var name;
	if(o != null) {
		try {
			return o.__proto__.__class__.__name__.join(".");
		} catch( _g ) {
		}
		try {
			var c = js_Boot.getClass(o);
			return c.__name__;
		} catch( _g ) {
		}
	}
	return null;
};
jotun_tools_Utils.boolean = function(q) {
	if(!(q == true || q == 1 || q == "1" || q == "true" || q == "yes" || q == "accept" || q == "ok")) {
		return q == "selected";
	} else {
		return true;
	}
};
jotun_tools_Utils.money = function(val,s,a,b) {
	if(b == null) {
		b = ".";
	}
	if(a == null) {
		a = ",";
	}
	if(s == null) {
		s = "$";
	}
	var r = "";
	val *= 100;
	if(val > 99) {
		val = "" + (val | 0);
		var i = val.length;
		var c = 0;
		while(i-- > 0) {
			r = Std.string(val.substr(i,1)) + r;
			if(i > 0) {
				if(c == 1) {
					r = b + r;
				} else if(c > 1 && (c + 2) % 3 == 0) {
					r = a + r;
				}
			} else if(c < 3) {
				r = "0" + (c == 1 ? "." : "") + r;
			}
			++c;
		}
	} else {
		r = "0" + b + (val < 10 ? "0" : "") + Std.string(val);
	}
	return s + r;
};
jotun_tools_Utils.stdClone = function(q) {
	return JSON.parse(JSON.stringify(q));
};
jotun_tools_Utils.paramsOf = function(o) {
	var r = [];
	jotun_utils_Dice.All(o,function(p,v) {
		if(jotun_tools_Utils.isValid(v) && !jotun_tools_Utils.isFunction(v)) {
			if(typeof(v) == "number") {
				v = Std.string(v);
			} else if(typeof(v) != "string") {
				v = JSON.stringify(v);
			}
			r[r.length] = p + "=" + encodeURIComponent(v);
		}
	});
	return r.join("&");
};
jotun_tools_Utils.And = function(data,separator,and) {
	if(and == null) {
		and = " & ";
	}
	if(separator == null) {
		separator = ", ";
	}
	if(data.length > 1) {
		var q = data.splice(0,data.length - 1);
		return q.join(separator) + and + data.join("");
	} else {
		return data.join("");
	}
};
jotun_tools_Utils.toFixed = function(n,i,s) {
	if(s == null) {
		s = ".";
	}
	var a = n.toFixed(i);
	if(s != ".") {
		a = a.split(".").join("s");
	}
	return a;
};
jotun_tools_Utils.isFunction = function(o) {
	return Reflect.isFunction(o);
};
var jotun_net_Broadcast = $hx_exports["J_Broadcast"] = function() {
	this._listeners = { };
	this._muted = true;
	var _gthis = this;
	if(jotun_net_Broadcast.__me__ == null) {
		try {
			this._channels = { };
		} catch( _g ) {
			window.addEventListener("storage",function(e) {
				var channel = e.key;
				var events = Reflect.field(_gthis._listeners,channel);
				if(events != null && events.length > 0) {
					var data = e.newValue;
					if(data != null) {
						data = JSON.parse(data);
						_gthis._proccessMsg(channel,data);
					}
				}
			});
		}
		jotun_net_Broadcast.__me__ = this;
	} else {
		throw new Error("Broadcast is a singleton, use Broadcast.ME() instead of new");
	}
};
jotun_net_Broadcast.__name__ = "jotun.net.Broadcast";
jotun_net_Broadcast.ME = function() {
	if(jotun_net_Broadcast.__me__ == null) {
		return new jotun_net_Broadcast();
	} else {
		return jotun_net_Broadcast.__me__;
	}
};
jotun_net_Broadcast.prototype = {
	_openChannel: function(name) {
		var bc = Reflect.field(this._channels,name);
		if(bc == null) {
			bc = new BroadcastChannel(name);
			bc.onmessage = $bind(this,this._onChannelMsg);
			this._channels[name] = bc;
		}
		return bc;
	}
	,_onChannelMsg: function(e) {
		this._proccessMsg(e.target.name,e.data);
	}
	,_proccessMsg: function(channel,data) {
		if(!this._muted) {
			jotun_Jotun.log(["[BROADCAST <<] CHANNEL {" + channel + "} @ DATA RECEIVED",data]);
		}
		jotun_utils_Dice.Values(Reflect.field(this._listeners,channel),function(handler) {
			handler(data);
		});
	}
	,listen: function(channel,handler) {
		if(handler != null) {
			var events = Reflect.field(this._listeners,channel);
			if(events == null) {
				if(this._channels != null) {
					this._openChannel(channel);
				}
				events = [];
				this._listeners[channel] = events;
				if(!this._muted) {
					jotun_Jotun.log(["[BROADCAST ++] CHANNEL {" + channel + "} CONNECTED"]);
				}
			}
			events.push(handler);
		} else if(!this._muted) {
			jotun_Jotun.log(["[BROADCAST !!] CHANNEL {" + channel + "} NOT CONNECTED (null)"]);
		}
	}
	,unlisten: function(channel,handler) {
		var events = Reflect.field(this._listeners,channel);
		if(events != null && handler != null) {
			var iof = events.indexOf(handler);
			if(iof != -1) {
				events.slice(iof,1);
				if(events.length == 0) {
					if(this._channels != null) {
						Reflect.field(this._channels,channel).close();
						Reflect.deleteField(this._channels,channel);
					}
					if(!this._muted) {
						jotun_Jotun.log(["[BROADCAST --] CHANNEL {" + channel + "} DISCONNECTED"]);
					}
				}
			}
		}
	}
	,send: function(channel,data) {
		if(!this._muted) {
			jotun_Jotun.log(["[BROADCAST >>] CHANNEL {" + channel + "} @ DATA SENT",data]);
		}
		if(this._channels != null) {
			this._openChannel(channel).postMessage(data);
		} else {
			window.localStorage.setItem(channel,JSON.stringify(data));
			window.localStorage.removeItem(channel);
		}
	}
	,mute: function() {
		this._muted = true;
	}
	,unmute: function() {
		this._muted = false;
	}
	,__class__: jotun_net_Broadcast
};
var jotun_net_IDomain = function() { };
jotun_net_IDomain.__name__ = "jotun.net.IDomain";
jotun_net_IDomain.prototype = {
	__class__: jotun_net_IDomain
};
var jotun_net_Domain = function() {
	this._parseURI();
};
jotun_net_Domain.__name__ = "jotun.net.Domain";
jotun_net_Domain.__interfaces__ = [jotun_net_IDomain];
jotun_net_Domain.prototype = {
	_parseURI: function() {
		var l = window.location;
		this.host = l.hostname;
		this.port = l.port;
		this.hash = new jotun_data_Fragments(HxOverrides.substr(l.hash,1,null),"/");
		this.params = jotun_tools_Utils.getQueryParams(l.href);
		this.url = new jotun_data_Fragments(l.pathname,"/");
	}
	,getFQDN: function(len) {
		if(len == null) {
			len = 2;
		}
		var h = this.host.split(".");
		return h.splice(h.length - len,len).join(".");
	}
	,allocate: function(expire) {
		if(expire == null) {
			expire = 30;
		}
		if(this.data == null) {
			this.data = new jotun_data_DataCache(this.host,"/",86400 * expire);
		}
		return this.data;
	}
	,reload: function(force) {
		if(force == null) {
			force = false;
		}
		window.location.reload(force);
	}
	,__class__: jotun_net_Domain
};
var jotun_net_ILoader = function() { };
jotun_net_ILoader.__name__ = "jotun.net.ILoader";
jotun_net_ILoader.prototype = {
	__class__: jotun_net_ILoader
};
var jotun_net_Loader = function() {
};
jotun_net_Loader.__name__ = "jotun.net.Loader";
jotun_net_Loader.__interfaces__ = [jotun_net_ILoader];
jotun_net_Loader.prototype = {
	_getReq: function(u) {
		return new jotun_net_HttpRequest(u);
	}
	,module: function(file,data,handler,progress) {
		var r = this._getReq(file);
		r.async = true;
		r.onData = function(d) {
			jotun_Jotun.resources.register(file,d);
			if(handler != null) {
				handler(new jotun_net_Request(true,d,null,file));
			}
		};
		r.onError = function(d) {
			if(handler != null) {
				handler(new jotun_net_Request(false,null,new jotun_errors_Error(-1,d),file));
			}
		};
		if(progress == null) {
			r.request("GET",null);
		} else {
			var pro = { loaded : 0, total : 0, file : file};
			r.request("GET",null,function(u,a,b) {
				pro.loaded = a;
				pro.total = b;
				pro.file = u;
				progress(pro);
			});
		}
	}
	,request: function(url,data,method,handler,headers,progress,options) {
		if(method == null) {
			method = "POST";
		}
		if(method != null) {
			method = method.toUpperCase();
		}
		var is_post = method == "POST";
		var is_get = method == "GET";
		var is_data = typeof(data) == "string";
		if(is_get && data != null) {
			url += (url.indexOf("?") == -1 ? "?" : "&") + jotun_tools_Utils.paramsOf(data);
		}
		var r = this._getReq(url);
		r.async = true;
		if(!is_data && data != null) {
			jotun_utils_Dice.All(data,$bind(r,r.addParameter));
		}
		if(headers != null) {
			jotun_utils_Dice.All(headers,function(p,v) {
				r.setHeader(p,v);
			});
		}
		r.onData = function(d) {
			if(handler != null) {
				var hdrs = r.responseHeaders;
				if(options != null) {
					if(options.responseType == "blob") {
						var f = new FileReader();
						f.onloadend = function(e) {
							handler(new jotun_net_Request(true,e.target.result,null,url,hdrs));
						};
						f.readAsDataURL(d);
						return;
					}
				} else {
					handler(new jotun_net_Request(true,d,null,url,hdrs));
				}
			}
		};
		r.onError = function(d) {
			if(handler != null) {
				handler(new jotun_net_Request(false,null,new jotun_errors_Error(-1,d)));
			}
		};
		var pro = { loaded : 0, total : 0, file : url};
		var tmp = progress != null ? function(u,a,b) {
			pro.loaded = a;
			pro.total = b;
			pro.file = u;
			progress(pro);
		} : null;
		r.request(method,data,tmp,options);
	}
	,__class__: jotun_net_Loader
};
var jotun_modules_ModLib = function() {
	this._onMount = [];
	this.assets = new jotun_dom_Display();
	this.data = jotun_modules_ModLib.DATA;
	this._predata = [];
};
jotun_modules_ModLib.__name__ = "jotun.modules.ModLib";
jotun_modules_ModLib.prototype = {
	_afterMount: function(object,module) {
		jotun_utils_Dice.Values(this._onMount,function(v) {
			v(object,module);
		});
	}
	,onMount: function(handler) {
		if(Lambda.indexOf(this._onMount,handler) == -1) {
			this._onMount[this._onMount.length] = handler;
		}
	}
	,_sanitize: function(name,data) {
		jotun_utils_Dice.Values(this._predata,function(v) {
			data = v(name,data);
		});
		return data;
	}
	,onDataOut: function(handler) {
		if(Lambda.indexOf(this._predata,handler) == -1) {
			this._predata[this._predata.length] = handler;
		}
	}
	,exists: function(module) {
		module = module.toLowerCase();
		return Object.prototype.hasOwnProperty.call(jotun_modules_ModLib.CACHE,module);
	}
	,remove: function(module) {
		if(this.exists(module)) {
			Reflect.deleteField(jotun_modules_ModLib.CACHE,module);
		}
	}
	,register: function(file,content,data) {
		var _gthis = this;
		content = content.split("[module:{").join("[!MOD!]");
		content = content.split("[Module:{").join("[!MOD!]");
		var sur = content.split("[!MOD!]");
		if(sur.length > 1) {
			jotun_Jotun.log("ModLib => PARSING " + file,1);
			var mountAfter = [];
			jotun_utils_Dice.All(sur,function(p,v) {
				if(p > 0) {
					var i = v.indexOf("}]");
					if(i != -1) {
						var mod = JSON.parse("{" + HxOverrides.substr(v,0,i) + "}");
						var path = file;
						if(mod.name == null) {
							mod.name = file;
						} else {
							path += "#" + mod.name;
							jotun_Jotun.log("\t\tModLib => NAME " + path,1);
						}
						if(_gthis.exists(mod.name)) {
							jotun_Jotun.log("\tModLib => OVERRIDE " + path,2);
						}
						var end = v.indexOf("/EOF;");
						content = StringTools.trim(v.substring(i + 2,end == -1 ? v.length : end));
						if(mod.type == null || mod.type == "null" || mod.type == "html") {
							content = content.split("\r\n").join("\r").split("\n").join("\r");
							while(HxOverrides.substr(content,0,1) == "\r") content = content.substring(1,content.length);
							while(HxOverrides.substr(content,-1,null) == "\r") content = content.substring(0,content.length - 1);
						}
						if(mod.require != null) {
							jotun_Jotun.log("\tModLib => " + path + " INCLUDING MODULES...",1);
							jotun_utils_Dice.Values(mod.require,function(v) {
								if(_gthis.exists(v)) {
									content = content.split("{{@include:" + v + "}}").join(_gthis.get(v));
								} else {
									jotun_Jotun.log("\t\tModLib => MISSING '" + v + "'",2);
								}
							});
						}
						if(mod.inject != null) {
							var injection = mod.inject;
							jotun_Jotun.log("\tModLib => " + path + " INJECTING MODULES...",1);
							if(_gthis.exists(injection)) {
								content = _gthis.get(injection).split("{{@injection}}").join(content);
							} else {
								jotun_Jotun.log("\t\tModLib => MISSING '" + v + "'",2);
							}
						}
						if(mod.data != null) {
							mod.data = JSON.parse(mod.data);
							content = jotun_utils_Filler.to(content,mod.data);
						}
						if(mod.wrap != null) {
							content = content.split("\r\n").join(mod.wrap).split("\n").join(mod.wrap).split("\r").join(mod.wrap);
						}
						if(mod.type != null) {
							if(mod.type == "data") {
								try {
									_gthis.data[mod.name] = JSON.parse(content);
								} catch( _g ) {
									var e = haxe_Exception.caught(_g).unwrap();
									jotun_Jotun.log("\tModLib => Can't parse DATA[" + mod.name + "] \n\n " + content + "\n\n" + Std.string(e),3);
								}
							} else if(mod.type == "style" || mod.type == "css" || mod.type == "script" || mod.type == "javascript") {
								jotun_Jotun.document.head.bind(content,mod.type,mod.id);
								content = "";
							} else if(mod.type.substring(0,6) == "image/") {
								var img = new Image();
								img.src = "data:" + mod.type + "," + jotun_serial_Packager.encodeBase64(content);
							}
						}
						if(mod.target != null) {
							mountAfter[mountAfter.length] = mod;
						}
						var n = mod.name.toLowerCase();
						jotun_modules_ModLib.CACHE[n] = content;
						jotun_modules_ModLib.CACHE["@" + n] = path;
					} else {
						jotun_Jotun.log("\tModLib => CONFIG ERROR " + file + "(" + HxOverrides.substr(v,0,15) + "...)",3);
					}
				}
			});
			if(mountAfter.length > 0) {
				jotun_utils_Dice.Values(mountAfter,function(v) {
					var o = jotun_Jotun.one(v.target);
					if(o != null) {
						o.mount(v.name,v.data,v.index);
					}
				});
			}
		} else {
			var ext = file.split(".").pop();
			switch(ext) {
			case "css":
				var dom = new jotun_dom_Style();
				dom.attribute("data-url",file);
				dom.writeHtml(content);
				dom.publish();
				break;
			case "bmp":case "gif":case "ico":case "jpeg":case "jpg":case "png":
				var img = new Image();
				img.setAttribute("data-url",file);
				img.src = file;
				this.assets.element.appendChild(img);
				break;
			case "js":
				var dom = new jotun_dom_Script();
				dom.attribute("data-url",file);
				dom.type("text/javascript");
				dom.writeText(content);
				dom.addToBody();
				break;
			default:
				jotun_modules_ModLib.CACHE[file.toLowerCase()] = content;
			}
		}
	}
	,get: function(name,data) {
		name = name.toLowerCase();
		if(!this.exists(name)) {
			return "<span style='color:#ff0000;font-weight:bold;'>Undefined [Module:" + name + "]</span><br/>";
		}
		var content = Reflect.field(jotun_modules_ModLib.CACHE,name);
		data = this._sanitize(name,data);
		if(data != null) {
			return jotun_utils_Filler.to(content,data);
		} else {
			return content;
		}
	}
	,getObj: function(name,data) {
		var val = this.get(name,data);
		if(val != null) {
			try {
				return JSON.parse(val);
			} catch( _g ) {
				haxe_Log.trace("Parsing error for MOD:[" + name + "]",{ fileName : "src/jotun/modules/ModLib.hx", lineNumber : 249, className : "jotun.modules.ModLib", methodName : "getObj"});
			}
		}
		return null;
	}
	,build: function(module,data) {
		if(jotun_Jotun.agent.mobile && this.exists(module + "::mobile")) {
			module += "::mobile";
		}
		var signature = Reflect.field(jotun_modules_ModLib.CACHE,"@" + module.toLowerCase());
		var result = new jotun_dom_Display().writeHtml(this.get(module,data));
		result.children().attribute("sru-mod",signature);
		if(data != null) {
			result.react(data);
		}
		this._afterMount(result,module);
		return result;
	}
	,__class__: jotun_modules_ModLib
};
var jotun_Jotun = $hx_exports["Jotun"] = function() { };
jotun_Jotun.__name__ = "jotun.Jotun";
jotun_Jotun.main = function() {
	if(!jotun_Jotun._initialized) {
		return jotun_Jotun._preInit();
	} else {
		return true;
	}
};
jotun_Jotun._loadController = function(e) {
	if(!jotun_Jotun._loaded) {
		jotun_Jotun._loaded = true;
		jotun_Jotun.document.checkBody();
		jotun_Jotun.agent.update();
		jotun_Jotun.log("Jotun => READY",1);
		jotun_utils_Dice.Values(jotun_Jotun._loadPool,function(v) {
			if(v != null) {
				v();
			}
		});
		jotun_Jotun._loadPool = null;
		window.document.removeEventListener("DOMContentLoaded",jotun_Jotun._loadController);
		Reflect.deleteField(jotun_Jotun,"_loadController");
		Reflect.deleteField(jotun_Jotun,"_loadPool");
		Reflect.deleteField(jotun_Jotun,"main");
		jotun_Jotun.one("head").autoLoad();
		jotun_Jotun.one("body").autoLoad();
	}
};
jotun_Jotun._preInit = function() {
	if(!jotun_Jotun._initialized) {
		window.trace = console.log;
		jotun_Jotun._initialized = true;
		jotun_Jotun._loadPool = [];
		jotun_Jotun.document = jotun_dom_Document.ME();
		window.document.addEventListener("DOMContentLoaded",jotun_Jotun._loadController);
		try {
			Reflect.deleteField(jotun_Jotun,"_preInit");
		} catch( _g ) {
		}
		var state = window.document.readyState;
		if(state == "complete" || state == "interactive") {
			jotun_Jotun._loadController(null);
		}
	}
	return true;
};
jotun_Jotun.one = function(q,t) {
	if(q == null) {
		q = "*";
	}
	if(t == null) {
		t = window.document.querySelector(q);
	} else {
		t = t.querySelector(q);
	}
	if(t != null) {
		t = jotun_tools_Utils.displayFrom(t);
	} else {
		jotun_Jotun.log("Find => No result on selector (" + q + ")",5);
	}
	return t;
};
jotun_Jotun.all = function(q,t) {
	if(q == null) {
		q = "*";
	}
	return jotun_utils_Table.recycle(q,t);
};
jotun_Jotun.run = function(handler) {
	if(handler != null) {
		if(!jotun_Jotun._loaded && jotun_Jotun._loadPool != null) {
			jotun_Jotun._loadPool[jotun_Jotun._loadPool.length] = handler;
		} else {
			handler();
		}
	}
};
jotun_Jotun.inject = function(value,data,handler) {
	if(!((value) instanceof Array)) {
		value = [value];
	}
	jotun_utils_Dice.Values(value,function(v) {
		if(v.indexOf(".js") == -1) {
			var o = jotun_dom_Script.fromString(v,data);
			if(handler != null) {
				handler(o);
			}
		} else {
			jotun_dom_Script.fromUrl(v,data,handler);
		}
	});
};
jotun_Jotun.stylish = function(value,data,handler) {
	if(value.indexOf(".css") == -1) {
		jotun_dom_Style.fromString(value,data);
	} else {
		jotun_dom_Style.fromUrl(value,data,handler);
	}
};
jotun_Jotun.status = function() {
	jotun_Jotun.log("Jotun => STATUS " + (jotun_Jotun._initialized ? "READY " : "") + jotun_tools_Utils.toString(jotun_Jotun.agent,true),1);
	return jotun_Jotun.agent;
};
jotun_Jotun.request = function(url,data,method,handler,headers,progress,options) {
	if(method == null) {
		method = "POST";
	}
	jotun_Jotun.run(function() {
		jotun_Jotun.loader.request(url,data,method,handler,headers,progress,options);
	});
};
jotun_Jotun.module = function(file,name,data,handler,progress) {
	if(name == null || !jotun_Jotun.resources.exists(name)) {
		jotun_Jotun.loader.module(file,data,handler,progress);
	} else {
		handler(null);
	}
};
jotun_Jotun.log = function(q,type) {
	if(type == null) {
		type = -1;
	}
	jotun_Jotun.logger.push(q,type);
};
var jotun_css_CSSGroup = $hx_exports["J_CSSGroup"] = function() {
	this.reset();
	if(this.container == null) {
		this.container = new jotun_dom_Style();
		this.CM = jotun_css_CSSGroup._style("**");
		this.XS = jotun_css_CSSGroup._style("xs");
		this.SM = jotun_css_CSSGroup._style("sm");
		this.MD = jotun_css_CSSGroup._style("md");
		this.LG = jotun_css_CSSGroup._style("lg");
		this.XL = jotun_css_CSSGroup._style("xl");
		this.PR = jotun_css_CSSGroup._style("pr");
		window.document.head.appendChild(this.container.element);
	}
};
jotun_css_CSSGroup.__name__ = "jotun.css.CSSGroup";
jotun_css_CSSGroup._style = function(media) {
	var e = window.document.createElement("style");
	e.setAttribute("media-type",media);
	e.type = "text/css";
	e.innerHTML = "";
	return e;
};
jotun_css_CSSGroup.prototype = {
	_checkSelector: function(value,content,current) {
		var iof = content.indexOf(value);
		var r = false;
		if(iof != -1) {
			r = true;
			if(current != null) {
				var eof = content.indexOf("}",iof);
				content = content.substring(iof,eof);
				r = current == content;
			}
		}
		return r;
	}
	,_add: function(id,style) {
		return id + "{" + (style != null ? style : "/*<NULL>*/") + "}";
	}
	,_write: function(e,v,h) {
		if(v.length > 0) {
			e.innerHTML = h != "" ? (e.innerHTML.length > 0 ? h + e.innerHTML.split(h).join("").split(jotun_css_CSSGroup.EOF).join("") + v : h + v) + jotun_css_CSSGroup.EOF : e.innerHTML + v;
			if(e.parentElement == null) {
				this.container.element.appendChild(e);
			}
		}
	}
	,getMode: function(id) {
		var r = id.split("-");
		if(r.length > 1) {
			id = r.pop();
			if(id.length == 2) {
				return id.toUpperCase();
			}
		}
		return "";
	}
	,exists: function(id,content,mode) {
		var k = mode != null ? mode.toUpperCase() : this.getMode(id);
		id = (HxOverrides.substr(id,0,1) == "." ? "" : ".") + id + "{";
		var a = Object.prototype.hasOwnProperty.call(this,k) ? Reflect.field(this,k).innerHTML : this.CM.innerHTML;
		var b = Reflect.field(this,"style" + k);
		return this._checkSelector(id,a + b,content);
	}
	,add: function(css,mode) {
		var p = "style" + (mode != null ? mode.toUpperCase() : "");
		this[p] = Std.string(Reflect.field(this,p)) + css;
	}
	,set: function(id,style,mode) {
		var p = "style" + (mode != null ? mode.toUpperCase() : "");
		this[p] = Std.string(Reflect.field(this,p)) + this._add(id,style);
	}
	,build: function() {
		this._write(this.CM,this.style,"");
		this._write(this.XS,this.styleXS,jotun_css_CSSGroup.SOF + jotun_css_CSSGroup.MEDIA_XS + "{");
		this._write(this.SM,this.styleSM,jotun_css_CSSGroup.SOF + jotun_css_CSSGroup.MEDIA_SM + "{");
		this._write(this.MD,this.styleMD,jotun_css_CSSGroup.SOF + jotun_css_CSSGroup.MEDIA_MD + "{");
		this._write(this.LG,this.styleLG,jotun_css_CSSGroup.SOF + jotun_css_CSSGroup.MEDIA_LG + "{");
		this._write(this.XL,this.styleXL,jotun_css_CSSGroup.SOF + jotun_css_CSSGroup.MEDIA_XL + "{");
		this._write(this.PR,this.stylePR,jotun_css_CSSGroup.SOF + jotun_css_CSSGroup.MEDIA_PR + "{");
		this.reset();
	}
	,reset: function() {
		this.style = this.styleXS = this.styleSM = this.styleMD = this.styleLG = this.styleXL = this.stylePR = "";
	}
	,__class__: jotun_css_CSSGroup
};
var jotun_css_XCode = $hx_exports["XCode"] = function() { };
jotun_css_XCode.__name__ = "jotun.css.XCode";
jotun_css_XCode._filterCheck = function(id,replace) {
	if(jotun_css_XCode._filters == null) {
		jotun_css_XCode._filters = new jotun_dom_Svg();
		jotun_Jotun.document.head.addChild(jotun_css_XCode._filters);
	}
	var filter = jotun_css_XCode._filters.one("#" + id);
	if(filter != null) {
		if(replace) {
			jotun_css_XCode._filters.removeChild(filter);
			return true;
		} else {
			return false;
		}
	}
	return true;
};
jotun_css_XCode._createGrid = function() {
	if(!jotun_css_XCode._inits.grid) {
		jotun_css_XCode.omnibuild(".shelf,.hack,.drawer","display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;");
		jotun_css_XCode.omnibuild(".shelf","-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;");
		jotun_css_XCode.omnibuild(".hack,.drawer","-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;");
		jotun_css_XCode.omnibuild(".drawer","-webkit-box-direction:column;-ms-flex-direction:column;flex-direction:column;");
		jotun_css_XCode.omnibuild(".cel","-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;-ms-flex-preferred-size:0;flex-basis:0;max-width:100%;");
		jotun_css_XCode.omnibuild(".o-left,.o-top-left,.o-bottom-left","-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start;text-align:start;");
		jotun_css_XCode.omnibuild(".h-middle,.o-middle","-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;");
		jotun_css_XCode.omnibuild(".o-right,.o-top-right,o-bottom-right","-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;text-align:end;");
		jotun_css_XCode.omnibuild(".o-top,.o-top-left,.o-top-right","-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start;");
		jotun_css_XCode.omnibuild(".v-middle,.o-middle","-webkit-box-align:center;-ms-flex-align:center;align-items:center;");
		jotun_css_XCode.omnibuild(".o-bottom,.o-bottom-left,.o-bottom-right","-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end;");
		jotun_css_XCode.omnibuild(".o-outer-fill","-ms-flex-pack:distribute;justify-content: space-around;");
		jotun_css_XCode.omnibuild(".o-inner-fill","-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content: space-between;");
		jotun_css_XCode.omnibuild(".shelf.o-stack,.hack.o-stack","-webkit-box-direction:reverse;-ms-flex-direction:row-reverse;flex-direction:row-reverse;");
		jotun_css_XCode.omnibuild(".drawer.o-stack","-webkit-box-direction:column;-ms-flex-direction:column-reverse;flex-direction:column-reverse;");
		jotun_css_XCode.omnibuild(".hack.o-stack","-webkit-flex-wrap:wrap-reverse;flex-wrap:wrap-reverse;");
		jotun_utils_Dice.Count(0,12,function(a,b,c) {
			if(a > 0) {
				jotun_css_XCode.omnibuild(".tag-" + a + "n","-webkit-box-ordinal-group:-" + a + ";-ms-flex-order:-" + a + ";order:-" + a + ";");
			}
			jotun_css_XCode.omnibuild(".tag-" + a,"-webkit-box-ordinal-group:" + a + ";-ms-flex-order:" + a + ";order:" + a + ";");
			++a;
			var m = a / b * 100 - .001;
			var t = m.toFixed(5) + "%";
			var s = "flex-basis:" + t + ";max-width:" + t;
			jotun_css_XCode.omnibuild(".cel-" + a,s);
			if(a < b) {
				jotun_css_XCode.omnibuild(".rcell-" + a,"margin-left:" + t);
			}
			return null;
		});
		jotun_css_XCode._inits.grid = true;
	}
};
jotun_css_XCode.reset = function() {
	if(!jotun_css_XCode._inits.reset) {
		jotun_css_XCode._inits.reset = true;
		jotun_css_XCode.css.add("html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;}body{margin:0;}article,aside,footer,header,nav,section{display:block;}h1{font-size:2em;margin:0.67em 0;}figcaption,figure,main{display:block;}figure{margin:1em 40px;}hr{box-sizing:content-box;height:0;overflow:visible;}pre{font-family:monospace, monospace;font-size:1em;}a{background-color:transparent;-webkit-text-decoration-skip:objects;}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted;}b,strong{font-weight:inherit;}b,strong{font-weight:bolder;}code,kbd,samp{font-family:monospace, monospace;font-size:1em;}dfn{font-style:italic;}mark{background-color:#ff0;color:#000;}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sub{bottom:-0.25em;}sup{top:-0.5em;}audio,video{display:inline-block;}audio:not([controls]){display:none;height:0;}img{border-style:none;}svg:not(:root){overflow:hidden;}button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0;border:0;}button,input{overflow:visible;}button,select{text-transform:none;}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"]{-webkit-appearance:button;}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner{border-style:none;padding:0;}button:-moz-focusring,[type=\"button\"]:-moz-focusring,[type=\"reset\"]:-moz-focusring,[type=\"submit\"]:-moz-focusring{outline:1px dotted ButtonText;}fieldset{padding:0.35em 0.75em 0.625em;}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal;}progress{display:inline-block;vertical-align:baseline;}textarea{overflow:auto;}[type=\"checkbox\"],[type=\"radio\"]{box-sizing:border-box;padding:0;}[type=\"number\"]::-webkit-inner-spin-button,[type=\"number\"]::-webkit-outer-spin-button{height:auto;}[type=\"search\"]{-webkit-appearance:textfield;outline-offset:-2px;}[type=\"search\"]::-webkit-search-cancel-button,[type=\"search\"]::-webkit-search-decoration{-webkit-appearance:none;}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit;}details,menu{display:block;}summary{display:list-item;}canvas{display:inline-block;}template{display:none;}[hidden]{display:none;}*{box-sizing:border-box;}");
		jotun_css_XCode.omnibuild(".hidden","display:none !important;");
		jotun_css_XCode._createGrid();
		jotun_css_XCode.css.build();
	}
};
jotun_css_XCode.style = function(selector,value,mode) {
	if(typeof(value) != "string") {
		var r = "";
		jotun_utils_Dice.All(value,function(p,v) {
			r += (r == "" ? "" : ";") + (p + ": " + Std.string(v));
		});
		value = r;
	}
	jotun_css_XCode.css.add(selector + "{" + Std.string(value) + "}",mode);
};
jotun_css_XCode.morph = function(q) {
	if(jotun_css_XCode._morph_rules == null) {
		var e = " and ";
		var m = "@media ";
		jotun_css_XCode._morph_rules = [["~@XS",e + jotun_css_CSSGroup.MEDIA_XS_MAX],["~@SM",e + jotun_css_CSSGroup.MEDIA_SM_MAX],["~@MD",e + jotun_css_CSSGroup.MEDIA_MD_MAX],["~@LG",e + jotun_css_CSSGroup.MEDIA_LG_MAX],["@XS-",m + jotun_css_CSSGroup.MEDIA_XS_MAX],["@SM-",m + jotun_css_CSSGroup.MEDIA_SM_MAX],["@MD-",m + jotun_css_CSSGroup.MEDIA_MD_MAX],["@LG-",m + jotun_css_CSSGroup.MEDIA_LG_MAX],["@XS",m + jotun_css_CSSGroup.MEDIA_XS],["@SM",m + jotun_css_CSSGroup.MEDIA_SM],["@MD",m + jotun_css_CSSGroup.MEDIA_MD],["@LG",m + jotun_css_CSSGroup.MEDIA_LG],["@XL",m + jotun_css_CSSGroup.MEDIA_XL]];
	}
	jotun_utils_Dice.Values(jotun_css_XCode._morph_rules,function(v) {
		q = q.split(v[0]).join(v[1]);
	});
	return q;
};
jotun_css_XCode.apply = function() {
	jotun_css_XCode.css.build();
};
jotun_css_XCode.omnibuild = function(selector,query) {
	jotun_css_XCode.build(selector,query);
	jotun_css_XCode.css.styleXS += selector.split(",").join("-xs,") + "-xs" + "{" + query + "}";
	jotun_css_XCode.css.styleSM += selector.split(",").join("-sm,") + "-sm" + "{" + query + "}";
	jotun_css_XCode.css.styleMD += selector.split(",").join("-md,") + "-md" + "{" + query + "}";
	jotun_css_XCode.css.styleLG += selector.split(",").join("-lg,") + "-lg" + "{" + query + "}";
	jotun_css_XCode.css.styleXL += selector.split(",").join("-xl,") + "-xl" + "{" + query + "}";
	jotun_css_XCode.css.stylePR += selector.split(",").join("-pr,") + "-pr" + "{" + query + "}";
};
jotun_css_XCode.build = function(selector,query) {
	jotun_css_XCode.css.style += selector + "{" + query + "}";
};
jotun_css_XCode.clearDisplacements = function() {
	if(jotun_css_XCode._filters != null) {
		jotun_css_XCode._filters.empty(true);
	}
};
jotun_css_XCode.filter = function(id,a,r,g,b,replace) {
	if(jotun_css_XCode._filterCheck(id,replace)) {
		var end = "<filter id=\"" + id + "\" color-interpolation-filters=\"sRGB\" x=\"0\" y=\"0\" height=\"100%\" width=\"100%\">";
		end += "<feColorMatrix type=\"matrix\" values=\"" + r + " 0 0 0 0 0 " + g + " 0 0 0 0 0 " + b + " 0 0 0 0 0 " + a + " 0\"/>";
		end += "</filter>";
		jotun_css_XCode._filters.appendHtml(end);
	}
};
jotun_css_XCode.displacement = function(id,freq,octaves,scale,seed,replace) {
	if(seed == null) {
		seed = 0;
	}
	if(jotun_css_XCode._filterCheck(id,replace)) {
		var end = "<filter id=\"" + id + "\">";
		end += "<feTurbulence baseFrequency=\"" + freq + "\" numOctaves=\"" + octaves + "\" result=\"noise\" seed=\"" + seed + "\"/>";
		end += "<feDisplacementMap id=\"displacement\" in=\"SourceGraphic\" in2=\"noise\" scale=\"" + scale + "\" />";
		end += "</filter>";
		jotun_css_XCode._filters.appendHtml(end);
	}
};
jotun_css_XCode.stroke = function(id,text,color,strenght,blur) {
	var c = new jotun_math_ARGB(color).hex();
	var l = jotun_tools_Utils.getValidOne(strenght,1);
	var b = jotun_tools_Utils.getValidOne(blur,1);
	var x = 0;
	var s = [];
	var t = Std.string(jotun_tools_Utils.getValidOne(blur,1)) + "px " + c;
	while(x < l) {
		++x;
		if(x != 0) {
			var xs = x + "px";
			s[s.length] = "-" + xs + " 0 " + t;
			s[s.length] = "0 " + xs + " " + t;
			s[s.length] = "" + xs + " 0 " + t;
			s[s.length] = "0 -" + xs + " " + t;
			if(x % 2 == 0) {
				s[s.length] = "-" + xs + " -" + xs + " " + t;
				s[s.length] = "" + xs + " -" + xs + " " + t;
				s[s.length] = "-" + xs + " " + xs + " " + t;
				s[s.length] = "" + xs + " " + xs + " " + t;
			}
		}
	}
	jotun_css_XCode.omnibuild(id,(text ? "text-shadow" : "box-shadow") + ":" + s.join(","));
	return id;
};
jotun_css_XCode.shadow = function(id,text,color,distance,direction,quality,strenght,multiplier) {
	if(!js_Boot.__implements(color,jotun_math_IARGB)) {
		color = new jotun_math_ARGB(color);
	}
	var t = color;
	var y = 0;
	var z = jotun_tools_Utils.getValidOne(distance,text ? 1 : 5);
	var a = jotun_tools_Utils.getValidOne(direction,45);
	var w = jotun_tools_Utils.getValidOne(strenght,5);
	var u = jotun_tools_Utils.getValidOne(quality,10);
	var c = jotun_tools_Utils.getValidOne(multiplier,.5);
	var cos = Math.cos(.017453 * a);
	var sin = Math.sin(.017453 * a);
	var r = [];
	var tx = 0;
	var ty = 0;
	if(a % 90 == 0) {
		w = z;
	}
	w = Math.floor(z / w);
	if(w <= 0) {
		w = 1;
	}
	while(y < z) {
		y += w;
		if(y > z) {
			y = z;
		}
		tx = cos * y;
		ty = sin * y;
		r[r.length] = (tx == 0 ? "0" : Math.round(tx) + "px") + " " + (ty == 0 ? "0" : Math.round(ty) + "px") + " 0 " + t.multiply(.8 - y / z * c).hex();
	}
	y = 0;
	var oX = cos * z;
	var oY = sin * z;
	while(y < u) {
		++y;
		tx = cos * y + oX;
		ty = sin * y + oY;
		r[r.length] = (tx == 0 ? "0" : Math.round(tx) + "px") + " " + (ty == 0 ? "0" : Math.round(ty) + "px") + " 0 rgba(0,0,0,.1)";
	}
	var q = (text ? "text-shadow" : "box-shadow") + ":" + r.join(",");
	jotun_css_XCode.omnibuild(id,q);
	return id;
};
jotun_css_XCode.motion = function(name,time,values) {
	if(jotun_css_XCode._motions == null) {
		jotun_css_XCode._motions = new jotun_dom_Style();
		jotun_css_XCode._motions.publish();
	}
	var css = "@keyframes " + name + "{";
	var len = values.length;
	jotun_utils_Dice.All(values,function(p,v) {
		var i = Std.parseInt(p) / len | 0;
		css += i + "%{" + Std.string(v) + "}";
	});
	css += "} animation: " + name + " " + time + "s linear infinite; /*EOF " + name + "*/";
	jotun_css_XCode._motions.appendHtml(css);
};
var jotun_data_IDataCache = function() { };
jotun_data_IDataCache.__name__ = "jotun.data.IDataCache";
jotun_data_IDataCache.prototype = {
	__class__: jotun_data_IDataCache
	,__properties__: {get_data:"get_data"}
};
var jotun_data_DataCache = $hx_exports["J_DataCache"] = function(name,path,expire,base64) {
	if(expire == null) {
		expire = 0;
	}
	this._name = name;
	this._path = path;
	this._expire = expire;
	this._base64 = base64;
	this.clear();
};
jotun_data_DataCache.__name__ = "jotun.data.DataCache";
jotun_data_DataCache.__interfaces__ = [jotun_data_IDataCache];
jotun_data_DataCache.prototype = {
	get_data: function() {
		return this._DB;
	}
	,_now: function() {
		return new Date().getTime();
	}
	,clear: function(p) {
		if(p != null) {
			if(p != "__time__") {
				Reflect.deleteField(this._DB,p);
			}
		} else {
			this._DB = { };
			if(this._expire > 0) {
				this._DB.__time__ = this._now();
			}
			js_Cookie.remove(this._name,this._path);
		}
		return this;
	}
	,set: function(p,v) {
		this._DB[p] = v;
		return this;
	}
	,merge: function(p,v) {
		if(((v) instanceof Array) && Object.prototype.hasOwnProperty.call(this._DB,this._name)) {
			var t = this.get(p);
			if(((t) instanceof Array)) {
				return this.set(p,t.concat(v));
			}
		}
		this._DB[p] = v;
		return this;
	}
	,get: function(id) {
		var d = id != null ? Reflect.field(this._DB,id) : null;
		if(d == null) {
			d = { };
			this.set(id,d);
		}
		return d;
	}
	,exists: function(name) {
		if(name != null) {
			return Object.prototype.hasOwnProperty.call(this._DB,name);
		} else {
			return this._loaded;
		}
	}
	,save: function() {
		var data = jotun_serial_Packager.encodeBase64(this._DB);
		js_Cookie.set(this._name,data,this._expire > 0 ? this._expire : 2592000,this._path);
		return this;
	}
	,_sign: function(add) {
		if(add) {
			this._DB.__time__ = this._now();
		} else {
			this.__time__ = this._expire > 0 ? this._DB.__time__ : 0;
			Reflect.deleteField(this._DB,"__time__");
		}
	}
	,load: function() {
		this._DB = null;
		if(js_Cookie.exists(this._name)) {
			var a = haxe_crypto_Base64.decode(js_Cookie.get(this._name));
			haxe_Log.trace(a,{ fileName : "src/jotun/data/DataCache.hx", lineNumber : 181, className : "jotun.data.DataCache", methodName : "load"});
			this._DB = jotun_serial_Packager.decodeBase64(js_Cookie.get(this._name),true);
			haxe_Log.trace(this._DB,{ fileName : "src/jotun/data/DataCache.hx", lineNumber : 183, className : "jotun.data.DataCache", methodName : "load"});
		}
		if(this._DB == null || this._expire != 0 && (this._DB.__time__ == null || this._now() - this._DB.__time__ >= this._expire)) {
			this._DB = { };
			this._loaded = false;
		} else {
			this._sign(false);
			this._loaded = true;
		}
		return this._loaded;
	}
	,refresh: function() {
		this.__time__ = this._now();
		return this;
	}
	,json: function(print) {
		var result = jotun_serial_JsonTool.stringify(this._DB,null," ");
		if(print) {
			if(print) {
				haxe_Log.trace(result,{ fileName : "src/jotun/data/DataCache.hx", lineNumber : 209, className : "jotun.data.DataCache", methodName : "json"});
			}
		}
		return result;
	}
	,base64: function(print) {
		var result = jotun_serial_Packager.encodeBase64(this._DB);
		if(print) {
			if(print) {
				haxe_Log.trace(result,{ fileName : "src/jotun/data/DataCache.hx", lineNumber : 215, className : "jotun.data.DataCache", methodName : "base64"});
			}
		}
		return result;
	}
	,__class__: jotun_data_DataCache
	,__properties__: {get_data:"get_data"}
};
var jotun_data_IDataSet = function() { };
jotun_data_IDataSet.__name__ = "jotun.data.IDataSet";
jotun_data_IDataSet.prototype = {
	__class__: jotun_data_IDataSet
};
var jotun_data_DataSet = $hx_exports["J_DataSet"] = function(q) {
	this._content = q != null ? q : { };
};
jotun_data_DataSet.__name__ = "jotun.data.DataSet";
jotun_data_DataSet.__interfaces__ = [jotun_data_IDataSet];
jotun_data_DataSet.prototype = {
	get: function(p) {
		return Reflect.field(this._content,p);
	}
	,set: function(p,v) {
		this._content[p] = v;
		return this;
	}
	,unset: function(p) {
		Reflect.deleteField(this._content,p);
		return this;
	}
	,exists: function(p) {
		return Object.prototype.hasOwnProperty.call(this._content,p);
	}
	,clear: function() {
		this._content = { };
		return this;
	}
	,find: function(v) {
		var r = [];
		jotun_utils_Dice.All(this._content,function(p,x) {
			if(typeof(x) == "string" && x.indexOf(v) != -1) {
				r[r.length] = p;
			} else if(x == v) {
				r[r.length] = p;
			}
		});
		return r;
	}
	,index: function() {
		var r = [];
		jotun_utils_Dice.Params(this._content,$bind(r,$arrayPush));
		return r;
	}
	,values: function() {
		var r = [];
		jotun_utils_Dice.Values(this._content,$bind(r,$arrayPush));
		return r;
	}
	,filter: function(p,handler) {
		var r = new jotun_data_DataSet();
		var h = handler != null;
		jotun_utils_Dice.All(this._content,function(p2,v) {
			if(js_Boot.__implements(v,jotun_data_IDataSet)) {
				if(v.exists(p)) {
					r.set(p2,h ? handler(v) : v.get(p));
				}
			} else if(Object.prototype.hasOwnProperty.call(v,p)) {
				r.set(p2,h ? handler(v) : Reflect.field(v,p));
			}
		});
		return r;
	}
	,each: function(handler) {
		jotun_utils_Dice.All(this._content,handler);
	}
	,data: function() {
		return this._content;
	}
	,__class__: jotun_data_DataSet
};
var jotun_data_IFormData = function() { };
jotun_data_IFormData.__name__ = "jotun.data.IFormData";
jotun_data_IFormData.prototype = {
	__class__: jotun_data_IFormData
};
var jotun_data_FormData = $hx_exports["J_FormData"] = function(target) {
	if(target != null) {
		if(typeof(target) == "string") {
			this.scan(jotun_Jotun.one(target));
		}
		if(js_Boot.__implements(target,jotun_dom_IDisplay)) {
			this.scan(target);
		}
	}
};
jotun_data_FormData.__name__ = "jotun.data.FormData";
jotun_data_FormData.__interfaces__ = [jotun_data_IFormData];
jotun_data_FormData.prototype = {
	reset: function() {
		this.params = [];
		return this;
	}
	,scan: function(target) {
		var _gthis = this;
		this.reset();
		this._form = target == null ? jotun_Jotun.document.body : target;
		target.all("[form-data]").each(function(o) {
			_gthis.params[_gthis.params.length] = new jotun_data_FormParam(o);
		});
		return this;
	}
	,valueOf: function(p) {
		return jotun_utils_Dice.Values(this.params,function(v) {
			return v.getName() == p;
		}).value;
	}
	,isValid: function(needAll) {
		var _gthis = this;
		this.errors = [];
		jotun_utils_Dice.Values(this.params,function(v) {
			if(!v.isValid(needAll)) {
				_gthis.errors[_gthis.errors.length] = v;
			}
		});
		return this.errors.length == 0;
	}
	,getParam: function(p) {
		return jotun_utils_Dice.Values(this.params,function(v) {
			return v.getName() == p;
		}).value;
	}
	,getData: function(feed) {
		if(feed == null) {
			feed = { };
		}
		jotun_utils_Dice.Values(this.params,function(v) {
			var field = v.getName();
			var value = v.getValue();
			feed[field] = value;
		});
		return feed;
	}
	,clear: function() {
		jotun_utils_Dice.Values(this.params,function(v) {
			v.clear();
		});
		return this;
	}
	,send: function(url,handler,method) {
		if(method == null) {
			method = "post";
		}
		jotun_Jotun.request(url,this.getData(),null,handler,method);
	}
	,match: function(paramA,paramB) {
		return this.getParam(paramA).getValue() == this.getParam(paramB).getValue();
	}
	,__class__: jotun_data_FormData
};
var jotun_data_FormParam = function(e) {
	this._e = e;
};
jotun_data_FormParam.__name__ = "jotun.data.FormParam";
jotun_data_FormParam.prototype = {
	getName: function() {
		return this._e.attribute("form-data");
	}
	,getValidator: function() {
		return this._e.attribute("form-validate");
	}
	,isRequired: function() {
		if(this._e.hasAttribute("form-required")) {
			return jotun_utils_Dice.Match(["1","true","yes"],this._e.attribute("form-required")) > 0;
		} else {
			return false;
		}
	}
	,getMessage: function() {
		return this._e.attribute("form-message");
	}
	,getValue: function() {
		if(((this._e) instanceof jotun_dom_Select)) {
			var e = this._e;
			if(!e.hasValue()) {
				return null;
			}
		}
		return this._e.attribute("value");
	}
	,isValid: function(required) {
		if(!(!required && !this.isRequired())) {
			return jotun_tools_Utils.isValid(this.getValue());
		} else {
			return true;
		}
	}
	,clear: function() {
		if(jotun_utils_Dice.Match(["1","true","yes"],this._e.attribute("form-persistent")) == 0) {
			this._e.attribute("value","");
		}
	}
	,getCell: function() {
		return this._e;
	}
	,__class__: jotun_data_FormParam
};
var jotun_data_IFragments = function() { };
jotun_data_IFragments.__name__ = "jotun.data.IFragments";
jotun_data_IFragments.prototype = {
	__class__: jotun_data_IFragments
};
var jotun_data_Fragments = function(value,separator) {
	this.value = value == null ? "" : value;
	if(separator != null && separator.length > 0) {
		this.split(separator);
	} else {
		this.clear();
	}
};
jotun_data_Fragments.__name__ = "jotun.data.Fragments";
jotun_data_Fragments.__interfaces__ = [jotun_data_IFragments];
jotun_data_Fragments.prototype = {
	_sel: function(i,e) {
		var r = [];
		while(i != e) {
			var p = this.pieces[i++];
			if(p != null && p != "") {
				r[r.length] = p;
			}
		}
		return "/" + r.join("/") + "/";
	}
	,split: function(separator) {
		this.pieces = jotun_tools_Utils.clearArray(this.value.split(separator));
		if(this.pieces.length == 0) {
			this.pieces[0] = "";
		}
		this.first = this.pieces[0];
		this.last = this.pieces[this.pieces.length - 1];
		this.glue(separator);
		return this;
	}
	,find: function(value) {
		return Lambda.indexOf(this.pieces,value) != -1;
	}
	,glue: function(value) {
		this.value = this.pieces.join(value);
		return this;
	}
	,addPiece: function(value,at) {
		if(at == null) {
			at = -1;
		}
		if(at == 0) {
			this.pieces.unshift(value);
		} else if(at == -1 || at >= this.pieces.length) {
			this.pieces.push(value);
		} else {
			var tail = this.pieces.splice(at,this.pieces.length - at);
			this.pieces.push(value);
			this.pieces = this.pieces.concat(tail);
		}
		return this;
	}
	,get: function(i,e) {
		if(e == null || e <= i) {
			if(i < this.pieces.length) {
				return this.pieces[i];
			} else {
				return "";
			}
		} else {
			return this._sel(i,e);
		}
	}
	,set: function(i,val) {
		if(i > this.pieces.length) {
			i = this.pieces.length;
		}
		if(val != null) {
			this.pieces[i] = val;
		}
		return this;
	}
	,clear: function() {
		this.pieces = [];
		this.first = "";
		this.last = "";
		return this;
	}
	,__class__: jotun_data_Fragments
};
var jotun_draw_Book = $hx_exports["J_Book"] = function() {
	this.pages = { };
};
jotun_draw_Book.__name__ = "jotun.draw.Book";
jotun_draw_Book.prototype = {
	create: function(name) {
		return this.add(name,new jotun_draw_Paper());
	}
	,add: function(name,page) {
		this.pages[name] = page;
		return page;
	}
	,get: function(name) {
		return Reflect.getProperty(this.pages,name);
	}
	,getDVal: function(name) {
		var p = this.get(name);
		if(p != null) {
			return p.dVal();
		} else {
			return "";
		}
	}
	,getVal: function(name) {
		var p = this.get(name);
		if(p != null) {
			return p.val();
		} else {
			return "";
		}
	}
	,remove: function(name) {
		var p = this.get(name);
		Reflect.deleteField(this.pages,name);
		return p;
	}
	,__class__: jotun_draw_Book
};
var jotun_draw_Paper = $hx_exports["J_Paper"] = function() {
	this.erase();
};
jotun_draw_Paper.__name__ = "jotun.draw.Paper";
jotun_draw_Paper.prototype = {
	erase: function() {
		this._tmp_path = "";
	}
	,m: function(x,y) {
		this._tmp_path += "M " + x + "," + y + " ";
	}
	,l: function(x,y) {
		this._tmp_path += "L " + x + "," + y + " ";
	}
	,c: function(coord) {
		var _gthis = this;
		jotun_utils_Dice.Values(coord,function(v) {
			_gthis._tmp_path += "C " + v.join(",") + " ";
		});
	}
	,q: function(a,b,x,y) {
		this._tmp_path += "Q " + a + "," + b + " " + x + "," + y + " ";
	}
	,s: function(a,b,x,y) {
		this._tmp_path += "S " + a + "," + b + " " + x + "," + y + " ";
	}
	,t: function(x,y) {
		this._tmp_path += "T " + x + "," + y + " ";
	}
	,z: function() {
		this._tmp_path += "Z ";
	}
	,dVal: function() {
		return "d(" + this._tmp_path + ")";
	}
	,val: function() {
		return this._tmp_path;
	}
	,__class__: jotun_draw_Paper
};
var jotun_errors_IError = function() { };
jotun_errors_IError.__name__ = "jotun.errors.IError";
jotun_errors_IError.prototype = {
	__class__: jotun_errors_IError
};
var jotun_errors_Error = function(code,message,object) {
	this.object = object;
	this.message = message;
	this.code = code;
};
jotun_errors_Error.__name__ = "jotun.errors.Error";
jotun_errors_Error.__interfaces__ = [jotun_errors_IError];
jotun_errors_Error.prototype = {
	__class__: jotun_errors_Error
};
var jotun_events_IEvent = function() { };
jotun_events_IEvent.__name__ = "jotun.events.IEvent";
jotun_events_IEvent.prototype = {
	__class__: jotun_events_IEvent
};
var jotun_events_Event = $hx_exports["J_Event"] = function(from,ticket,event) {
	this.event = event;
	this.ticket = ticket;
	this.from = from;
	this.target = from.target;
};
jotun_events_Event.__name__ = "jotun.events.Event";
jotun_events_Event.__interfaces__ = [jotun_events_IEvent];
jotun_events_Event.prototype = {
	cancel: function() {
		if(this.event != null) {
			this.event.stopPropagation();
			this.event.stopImmediatePropagation();
			this.event.preventDefault();
		}
	}
	,description: function() {
		return "[Event{name:" + this.ticket.name + ",target:" + this.from.target.typeOf() + "}]";
	}
	,__class__: jotun_events_Event
};
var jotun_events_IEventGroup = function() { };
jotun_events_IEventGroup.__name__ = "jotun.events.IEventGroup";
jotun_events_IEventGroup.prototype = {
	__class__: jotun_events_IEventGroup
};
var jotun_events_EventGroup = $hx_exports["J_EventGroup"] = function(dispatcher,name) {
	this.dispatcher = dispatcher;
	this.name = name;
	this.enabled = true;
	this.events = [];
};
jotun_events_EventGroup.__name__ = "jotun.events.EventGroup";
jotun_events_EventGroup.__interfaces__ = [jotun_events_IEventGroup];
jotun_events_EventGroup.prototype = {
	add: function(handler,capture) {
		if(capture != null) {
			this.capture = capture;
		}
		if(handler != null) {
			this.events.push(handler);
		}
		return this;
	}
	,addOnce: function(handler,capture) {
		if(!this.exists(handler)) {
			this.add(handler,capture);
		}
		return this;
	}
	,exists: function(handler) {
		return this.events.indexOf(handler) != -1;
	}
	,remove: function(handler) {
		var iof = Lambda.indexOf(this.events,handler);
		if(iof != -1) {
			this.events.splice(iof,1);
		}
		return this;
	}
	,prepare: function(t) {
		t.element.removeEventListener(this.name,$bind(this,this._runner),this.capture);
		t.element.addEventListener(this.name,$bind(this,this._runner),this.capture);
		return this;
	}
	,dispose: function(t) {
		t.element.removeEventListener(this.name,$bind(this,this._runner),this.capture);
	}
	,cancel: function() {
		this.propagation = false;
		return this;
	}
	,noDefault: function() {
		this._pd = true;
		return this;
	}
	,reset: function() {
		this.events = [];
		return this;
	}
	,_runner: function(e) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		var evt = new jotun_events_Event(this.dispatcher,this,e);
		jotun_utils_Dice.Values(this.events,function(v) {
			if(v != null) {
				v(evt);
			}
			return !_gthis.propagation;
		});
		if(this._pd && e != null) {
			evt.event.preventDefault();
			evt.event.stopPropagation();
		}
		this.propagation = true;
	}
	,call: function(bubbles,cancelable,data) {
		if(cancelable == null) {
			cancelable = true;
		}
		if(bubbles == null) {
			bubbles = false;
		}
		this.data = data;
		if(jotun_Jotun.agent.ie) {
			var e = window.document.createEvent("CustomEvent");
			e.initCustomEvent(this.name,bubbles,cancelable,{ });
			this.dispatcher.target.element.dispatchEvent(e);
		} else if(window.document.createEvent != null) {
			var e = new CustomEvent(this.name);
			e.initEvent(this.name,bubbles,cancelable);
			this.dispatcher.target.element.dispatchEvent(e);
		} else {
			this._runner(null);
		}
		this.data = null;
		return this;
	}
	,__class__: jotun_events_EventGroup
};
var jotun_gaming_actions_Resolution = $hx_exports["J_Resolution"] = function(type,data) {
	this._type = type;
	if(((data.query) instanceof Array)) {
		this.query = data.query;
		this.query.unshift("@result");
	} else if(jotun_tools_Utils.isValid(data.query)) {
		this.query = ["@result",data.query];
	}
	if(data.onSuccess != null) {
		this.onSuccess = new jotun_gaming_actions_Events(this._type + ".onSuccess",data.onSuccess);
	}
	if(data.onFail != null) {
		this.onFail = new jotun_gaming_actions_Events(this._type + ".onFail",data.onFail);
	}
	this.id = data.id;
};
jotun_gaming_actions_Resolution.__name__ = "jotun.gaming.actions.Resolution";
jotun_gaming_actions_Resolution.prototype = {
	resolve: function(result,context) {
		++context.ident;
		if(result) {
			if(this.onSuccess != null) {
				this.onSuccess.run(context);
			}
		} else if(this.onFail != null) {
			this.onFail.run(context);
		}
		--context.ident;
		return result;
	}
	,length: function() {
		if(this.query != null) {
			return this.query.length - 1;
		} else {
			return 0;
		}
	}
	,__class__: jotun_gaming_actions_Resolution
};
var jotun_objects_QueryGroup = $hx_exports["J_QueryGroup"] = function() {
	this.clear();
};
jotun_objects_QueryGroup.__name__ = "jotun.objects.QueryGroup";
jotun_objects_QueryGroup.prototype = {
	add: function(o) {
		if(this.units.indexOf(o) == -1) {
			this.units[this.units.length] = o;
		}
	}
	,remove: function(o) {
		var iof = this.units.indexOf(o);
		if(iof != -1) {
			this.units.splice(iof,1);
		}
	}
	,clear: function() {
		this.units = [];
	}
	,run: function(query) {
		var result = { };
		jotun_utils_Dice.Values(this.units,function(o) {
			o.proc(query,result);
			o.flush();
		});
		return result;
	}
	,__class__: jotun_objects_QueryGroup
};
var jotun_gaming_actions_Action = $hx_exports["J_Action"] = function(type,data) {
	var _gthis = this;
	jotun_gaming_actions_Resolution.call(this,type,data);
	this.requirements = [];
	var i = 0;
	jotun_utils_Dice.All(data.requirements,function(p,v) {
		if(typeof(v) == "string") {
			v = jotun_gaming_actions_Requirement.get(v);
		}
		if(v != null) {
			if(((v) instanceof jotun_gaming_actions_Requirement)) {
				_gthis.requirements[i] = v;
			} else {
				_gthis.requirements[i] = new jotun_gaming_actions_Requirement(type + "[" + Std.string(p) + "]",v);
			}
			i += 1;
		}
	});
	this.target = data.target | 0;
	if(this.target == null) {
		this.target = this.requirements.length;
	}
	if(jotun_tools_Utils.isValid(data.id)) {
		jotun_gaming_actions_Action.cache[data.id] = this;
	}
};
jotun_gaming_actions_Action.__name__ = "jotun.gaming.actions.Action";
jotun_gaming_actions_Action.get = function(id) {
	return Reflect.field(jotun_gaming_actions_Action.cache,id);
};
jotun_gaming_actions_Action._log = function(evt,context,success,score,position) {
	var s = "";
	while(s.length < context.ident) s += "\t";
	var context1 = context.log;
	var tmp = jotun_tools_Utils.isValid(evt.id) ? "#{" + evt.id + "} " : "";
	context1.push(s + "↑ " + (success ? "SUCCESS" : "FAIL") + " ACTION " + tmp + "[" + position + "] score:" + score + "/" + evt.target + " queries:" + evt.length());
};
jotun_gaming_actions_Action.__super__ = jotun_gaming_actions_Resolution;
jotun_gaming_actions_Action.prototype = $extend(jotun_gaming_actions_Resolution.prototype,{
	run: function(context,position) {
		var resolution = 0;
		++context.ident;
		jotun_utils_Dice.All(this.requirements,function(p,r) {
			var result = r.verify(context,p);
			if(result) {
				resolution += 1;
				return r.cancelOnSuccess;
			} else {
				resolution -= 1;
				return r.cancelOnFail;
			}
		});
		--context.ident;
		var success = this.target == 0 || this.target > 0 && resolution >= this.target || this.target < 0 && resolution <= this.target;
		if(context.debug) {
			jotun_gaming_actions_Action._log(this,context,success,resolution,position);
		}
		if(success) {
			if(jotun_tools_Utils.isValid(this.query)) {
				jotun_gaming_actions_Action.commands.run(this.query);
			}
		}
		return this.resolve(success,context);
	}
	,__class__: jotun_gaming_actions_Action
});
var jotun_gaming_actions_ActionQuery = $hx_exports["J_ActionQuery"] = function() {
	jotun_objects_Query.call(this);
};
jotun_gaming_actions_ActionQuery.__name__ = "jotun.gaming.actions.ActionQuery";
jotun_gaming_actions_ActionQuery.__super__ = jotun_objects_Query;
jotun_gaming_actions_ActionQuery.prototype = $extend(jotun_objects_Query.prototype,{
	_isempty: function(value) {
		if(value != null) {
			return value == "";
		} else {
			return true;
		}
	}
	,_INT: function(value) {
		var o = Std.parseInt(value);
		if(o != null) {
			return o;
		} else {
			return 0;
		}
	}
	,_FLOAT: function(value) {
		var o = parseFloat(value);
		if(o != null) {
			return o;
		} else {
			return 0;
		}
	}
	,rng: function() {
		return Math.random();
	}
	,_resolve: function(a,r,v) {
		if(r == null) {
			r = "=";
		}
		switch(r) {
		case "#":
			return a + this.rng() * v;
		case "%":
			return a % v;
		case "&":
			return a & v;
		case "*":
			return a * v;
		case "+":
			return a + v;
		case "++":
			return a + 1;
		case "-":
			return a - v;
		case "--":
			return a - 1;
		case "/":
			return a / v;
		case "<<":
			return a << v;
		case "=":
			return v;
		case ">>":
			return a >> v;
		case "^":
			return Math.pow(a,v);
		case "|":
			return a | v;
		case "~":
			return a & ~v;
		default:
			return v;
		}
	}
	,__class__: jotun_gaming_actions_ActionQuery
});
var jotun_gaming_actions_Events = $hx_exports["J_Events"] = function(type,data) {
	this._type = type;
	this._init(data);
};
jotun_gaming_actions_Events.__name__ = "jotun.gaming.actions.Events";
jotun_gaming_actions_Events.patch = function(data,origin) {
	if(data.events != null) {
		if(!data.events.patched) {
			data.events.patched = true;
			jotun_utils_Dice.All(data.events,function(p,v) {
				data.events[p] = new jotun_gaming_actions_Events(p,v);
			});
		}
	}
};
jotun_gaming_actions_Events._log = function(evt,context) {
	var s = "";
	while(s.length < context.ident) s += "\t";
	var a = evt._data.length;
	context.log.push(s + "≈ EVENT " + evt._type + (a == 0 ? " [!] No Actions" : " @" + a));
};
jotun_gaming_actions_Events.prototype = {
	_init: function(data) {
		var _gthis = this;
		this._data = [];
		var i = 0;
		jotun_utils_Dice.All(data,function(p,v) {
			if(typeof(v) == "string") {
				v = jotun_gaming_actions_Action.get(v);
			}
			if(v != null) {
				if(((v) instanceof jotun_gaming_actions_Action)) {
					_gthis._data[i] = v;
				} else {
					_gthis._data[i] = new jotun_gaming_actions_Action(_gthis._type + "[" + p + "]",v);
				}
				i += 1;
			}
		});
	}
	,run: function(context) {
		var l = context.log.length;
		++context.ident;
		jotun_utils_Dice.All(this._data,function(p,a) {
			return !a.run(context,p);
		});
		--context.ident;
		if(context.ident == 0) {
			if(context.debug) {
				jotun_gaming_actions_Events._log(this,context);
				context.log.reverse();
			}
		}
	}
	,__class__: jotun_gaming_actions_Events
};
var jotun_gaming_actions_IEventContext = function() { };
jotun_gaming_actions_IEventContext.__name__ = "jotun.gaming.actions.IEventContext";
jotun_gaming_actions_IEventContext.prototype = {
	__class__: jotun_gaming_actions_IEventContext
};
var jotun_gaming_actions_Requirement = $hx_exports["J_Requirement"] = function(type,data) {
	jotun_gaming_actions_Resolution.call(this,type,data);
	this.cancelOnSuccess = jotun_tools_Utils.boolean(data.cancelOnSuccess);
	this.cancelOnFail = jotun_tools_Utils.boolean(data.cancelOnFail);
	this.reverse = jotun_tools_Utils.boolean(data.reverse);
	this.target = data.target | 0;
	if(this.target == null) {
		this.target = this.query != null ? this.query.length - 1 : 0;
	}
	if(jotun_tools_Utils.isValid(data.id)) {
		jotun_gaming_actions_Requirement.cache[data.id] = this;
	}
};
jotun_gaming_actions_Requirement.__name__ = "jotun.gaming.actions.Requirement";
jotun_gaming_actions_Requirement.get = function(id) {
	return Reflect.field(jotun_gaming_actions_Requirement.cache,id);
};
jotun_gaming_actions_Requirement._log = function(evt,context,success,score,reversed,position) {
	var s = "";
	while(s.length < context.ident) s += "\t";
	var context1 = context.log;
	var tmp = jotun_tools_Utils.isValid(evt.id) ? "#{" + evt.id + "} " : " ";
	context1.push(s + "↓ " + (success ? "SUCCESS" : "FAIL") + " REQUIREMENT " + tmp + "[" + position + "]" + (reversed ? " REVERSED" : "") + " score:" + score + "/" + evt.target + " queries:" + evt.length());
};
jotun_gaming_actions_Requirement.__super__ = jotun_gaming_actions_Resolution;
jotun_gaming_actions_Requirement.prototype = $extend(jotun_gaming_actions_Resolution.prototype,{
	verify: function(context,position) {
		var res = true;
		var score = 0;
		if(jotun_tools_Utils.isValid(this.query)) {
			var sec = jotun_gaming_actions_Requirement.commands.run(this.query).result;
			if(sec != null) {
				jotun_utils_Dice.Values(sec,function(v) {
					if(jotun_tools_Utils.boolean(v)) {
						score += 1;
					}
				});
			}
			res = UInt.gte(score,this.target);
			if(this.reverse) {
				res = !res;
			}
		}
		this.resolve(res,context);
		if(context.debug) {
			jotun_gaming_actions_Requirement._log(this,context,res,score,this.reverse,position);
		}
		return res;
	}
	,__class__: jotun_gaming_actions_Requirement
});
var jotun_gaming_actions_RequirementQuery = $hx_exports["J_RequirementQuery"] = function() {
	jotun_objects_Query.call(this);
};
jotun_gaming_actions_RequirementQuery.__name__ = "jotun.gaming.actions.RequirementQuery";
jotun_gaming_actions_RequirementQuery.__super__ = jotun_objects_Query;
jotun_gaming_actions_RequirementQuery.prototype = $extend(jotun_objects_Query.prototype,{
	_isempty: function(value) {
		if(value != null) {
			return value == "";
		} else {
			return true;
		}
	}
	,_INT: function(value) {
		var o = Std.parseInt(value);
		if(o != null) {
			return o;
		} else {
			return 0;
		}
	}
	,_FLOAT: function(value) {
		var o = parseFloat(value);
		if(o != null) {
			return o;
		} else {
			return 0;
		}
	}
	,rng: function() {
		return Math.random();
	}
	,_resolve: function(a,r,v) {
		if(r == null) {
			r = ">=";
		}
		switch(r) {
		case "!&":
			return (~a & v) == v;
		case "!=":
			return a != v;
		case "#!":
			return (this.rng() * a | 0) != v;
		case "#<":
			return this.rng() * a <= v;
		case "#=":
			return (this.rng() * a | 0) == v;
		case "#>":
			return this.rng() * a >= v;
		case "&":
			return (a & v) == v;
		case "*=":
			return a.indexOf(v) != -1;
		case "<":
			return a < v;
		case "<=":
			return a <= v;
		case "=":
			return a == v;
		case ">":
			return a > v;
		case ">=":
			return a >= v;
		case "~=":
			return v.indexOf(a) != -1;
		default:
			return a == v;
		}
	}
	,__class__: jotun_gaming_actions_RequirementQuery
});
var jotun_idb_WebDB = $hx_exports["J_WebDB"] = function(db,error,upgrade) {
	this._tables = [];
	this._need_upgrade = upgrade;
	this._db = db;
	this._error = error;
};
jotun_idb_WebDB.__name__ = "jotun.idb.WebDB";
jotun_idb_WebDB.open = function(name,options,handler) {
	var request = window.indexedDB.open(name,options);
	request.onsuccess = function(e) {
		handler(new jotun_idb_WebDB(request.result,null,false));
	};
	request.onerror = function(e) {
		handler(new jotun_idb_WebDB(null,request.error,false));
	};
	request.onupgradeneeded = function(e) {
		handler(new jotun_idb_WebDB(request.result,null,true));
	};
};
jotun_idb_WebDB.prototype = {
	isOpen: function() {
		return this._db != null;
	}
	,isUpgradeNeeded: function() {
		return this._need_upgrade;
	}
	,getError: function() {
		return this._error;
	}
	,createTable: function(name,options) {
		this._regTable(name,this._db.createObjectStore(name,options));
		return this.table(name);
	}
	,getTables: function(name,mode,handler) {
		var _gthis = this;
		if(typeof(name) == "string") {
			if(name == "*") {
				name = this._db.objectStoreNames;
			} else {
				name = [name];
			}
		}
		if(mode.toLowerCase() == "r") {
			mode = "readonly";
		} else {
			mode = "readwrite";
		}
		this._transaction = this._db.transaction(name,mode);
		jotun_utils_Dice.Values(name,function(v) {
			_gthis._regTable(v,_gthis._transaction.objectStore(v));
		});
		if(handler != null) {
			this._transaction.oncomplete = function(e) {
				handler(_gthis);
			};
			this._transaction.onerror = function(e) {
				_gthis._error = _gthis._transaction.error;
				handler(_gthis);
			};
		}
	}
	,_regTable: function(name,store) {
		this._tables[name] = new jotun_idb_WebDBTable(name,this._db,store);
	}
	,table: function(name) {
		return Reflect.field(this._tables,name);
	}
	,__class__: jotun_idb_WebDB
};
var jotun_idb_WebDBTable = $hx_exports["J_WebDBTable"] = function(name,db,store) {
	this._db = db;
	this._name = name;
	this._table = store;
};
jotun_idb_WebDBTable.__name__ = "jotun.idb.WebDBTable";
jotun_idb_WebDBTable.prototype = {
	_request_io: function(r,handler) {
		var _gthis = this;
		if(handler != null) {
			r.onsuccess = function(e) {
				_gthis._result = e.target.result;
				handler(_gthis);
			};
			r.onerror = function(e) {
				_gthis._error = r.error;
				handler(_gthis);
			};
		}
		return r;
	}
	,destroy: function() {
		this._db.deleteObjectStore(this._name);
	}
	,addIndex: function(key,path,props) {
		this._table.createIndex(key,path,props);
	}
	,deleteIndex: function(key) {
		this._table.deleteIndex(key);
	}
	,index: function(key) {
		this._table.index(key);
	}
	,count: function(key,handler) {
		this._error = null;
		return this._request_io(this._table.count(key),handler);
	}
	,clear: function(handler) {
		this._error = null;
		return this._request_io(this._table.clear(),handler);
	}
	,'delete': function(key,handler) {
		this._error = null;
		return this._request_io(this._table.delete(key),handler);
	}
	,add: function(data,key,handler) {
		this._error = null;
		return this._request_io(this._table.add(data,key),handler);
	}
	,put: function(data,key,handler) {
		this._error = null;
		return this._request_io(this._table.put(data,key),handler);
	}
	,get: function(key,handler) {
		this._error = null;
		return this._request_io(this._table.get(key),handler);
	}
	,getAll: function(key,limit,handler) {
		this._error = null;
		return this._request_io(this._table.getAll(key,limit),handler);
	}
	,getAllKeys: function(key,limit,handler) {
		this._error = null;
		return this._request_io(this._table.getAllKeys(key,limit),handler);
	}
	,openCursor: function(key,direction,handler) {
		this._error = null;
		return this._request_io(this._table.openCursor(key,direction),handler);
	}
	,openKeyCursor: function(key,direction,handler) {
		this._error = null;
		return this._request_io(this._table.openKeyCursor(key,direction),handler);
	}
	,each: function(handler) {
		var _gthis = this;
		this._error = null;
		return this._request_io(this._table.openCursor(),function(h) {
			if(_gthis._result != null) {
				if(handler(_gthis._result.value) != true) {
					_gthis._result.continue();
				}
			}
		});
	}
	,isSuccess: function() {
		return this._error == null;
	}
	,getResult: function() {
		return this._result;
	}
	,__class__: jotun_idb_WebDBTable
};
var jotun_math_IARGB = function() { };
jotun_math_IARGB.__name__ = "jotun.math.IARGB";
jotun_math_IARGB.prototype = {
	__class__: jotun_math_IARGB
};
var jotun_math_ARGB = $hx_exports["J_ARGB"] = function(q,g,b,a) {
	var s = typeof(q) == "string" && (q.substr(0,3) == "rgb" || q.substr(0,2) == "0x" || q.substr(0,1) == "#");
	if(s && q.substr(0,3) == "rgb") {
		s = false;
		q = q.split(q.substr(0,4) == "rgba" ? "rgba" : "rgb")[1].split("(").join("").split(")").join("").split(" ").join("");
		q = q.split(",");
		if(q.length == 4) {
			a = Std.parseInt(q[3]);
		}
		b = Std.parseInt(q[2]);
		g = Std.parseInt(q[1]);
		q = Std.parseInt(q[0]);
	}
	if(!s && q <= 255 && g != null) {
		this.a = jotun_math_ARGB._minmax(a);
		this.r = jotun_math_ARGB._minmax(q);
		this.g = jotun_math_ARGB._minmax(g);
		this.b = jotun_math_ARGB._minmax(b);
	} else {
		var x;
		if(s) {
			q = q.split("#").join("0x");
			x = Std.parseInt(q);
			if(q.length < 10) {
				x |= -16777216;
			}
		} else {
			x = q;
		}
		this.a = x >> 24 & 255;
		this.r = x >> 16 & 255;
		this.g = x >> 8 & 255;
		this.b = x & 255;
	}
};
jotun_math_ARGB.__name__ = "jotun.math.ARGB";
jotun_math_ARGB.__interfaces__ = [jotun_math_IARGB];
jotun_math_ARGB.from = function(q,g,b,a) {
	return new jotun_math_ARGB(q,g,b,a);
};
jotun_math_ARGB._minmax = function(q) {
	if(q < 0) {
		return 0;
	} else if(q > 255) {
		return 255;
	} else {
		return q;
	}
};
jotun_math_ARGB._v16 = function(v) {
	var a = v.toString(16);
	if(a.length == 1) {
		return "0" + a;
	} else {
		return a;
	}
};
jotun_math_ARGB.prototype = {
	value32: function() {
		return this.a << 24 | this.r << 16 | this.g << 8 | this.b;
	}
	,value: function() {
		return this.r << 16 | this.g << 8 | this.b;
	}
	,invert: function() {
		return new jotun_math_ARGB(255 - this.r,255 - this.g,255 - this.b,this.a);
	}
	,multiply: function(ammount) {
		if(ammount < .01) {
			ammount = .01;
		}
		return new jotun_math_ARGB(jotun_math_ARGB._minmax(this.r * ammount),jotun_math_ARGB._minmax(this.g * ammount),jotun_math_ARGB._minmax(this.b * ammount),this.a);
	}
	,shift: function(ammount) {
		return new jotun_math_ARGB(jotun_math_ARGB._minmax(this.r + ammount),jotun_math_ARGB._minmax(this.g + ammount),jotun_math_ARGB._minmax(this.b + ammount),this.a);
	}
	,hex: function() {
		var r = jotun_math_ARGB._v16(this.value());
		while(r.length < 6) r = "0" + r;
		return "#" + r;
	}
	,css: function() {
		if(this.a == 255 || this.a == null) {
			return "rgb(" + this.r + "," + this.g + "," + this.b + ")";
		} else {
			return "rgba(" + this.r + "," + this.g + "," + this.b + "," + jotun_tools_Utils.toFixed(this.a / 255,2) + ")";
		}
	}
	,__class__: jotun_math_ARGB
};
var jotun_math_IPoint = function() { };
jotun_math_IPoint.__name__ = "jotun.math.IPoint";
jotun_math_IPoint.prototype = {
	__class__: jotun_math_IPoint
};
var jotun_math_Matrix3D = function() { };
jotun_math_Matrix3D.__name__ = "jotun.math.Matrix3D";
jotun_math_Matrix3D.rotateX = function(r) {
	r *= .017453292519943295;
	return [1,0,0,0,0,Math.cos(r),-Math.sin(r),0,0,Math.sin(r),Math.cos(r),0,0,0,0,1];
};
jotun_math_Matrix3D.rotateY = function(r) {
	r *= .017453292519943295;
	return [Math.cos(r),0,Math.sin(r),0,0,1,0,0,-Math.sin(r),0,Math.cos(r),0,0,0,0,1];
};
jotun_math_Matrix3D.rotateZ = function(r) {
	r *= .017453292519943295;
	return [Math.cos(r),-Math.sin(r),0,0,Math.sin(r),Math.cos(r),0,0,0,0,1,0,0,0,0,1];
};
jotun_math_Matrix3D.scale = function(x,y,z) {
	return [x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1];
};
jotun_math_Matrix3D.translate = function(x,y,z) {
	return [1,0,0,0,0,1,0,0,0,0,1,0,x,y,z,1];
};
jotun_math_Matrix3D._multiply = function(a,b) {
	var result = [];
	var a00 = a[0];
	var a10 = a[1];
	var a20 = a[2];
	var a30 = a[3];
	var a01 = a[4];
	var a11 = a[5];
	var a21 = a[6];
	var a31 = a[7];
	var a02 = a[8];
	var a12 = a[9];
	var a22 = a[10];
	var a32 = a[11];
	var a03 = a[12];
	var a13 = a[13];
	var a23 = a[14];
	var a33 = a[15];
	var b0 = b[0];
	var b1 = b[1];
	var b2 = b[2];
	var b3 = b[3];
	result[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	result[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	result[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	result[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	b0 = b[4];
	b1 = b[5];
	b2 = b[6];
	b3 = b[7];
	result[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	result[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	result[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	result[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	b0 = b[8];
	b1 = b[9];
	b2 = b[10];
	b3 = b[11];
	result[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	result[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	result[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	result[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	b0 = b[12];
	b1 = b[13];
	b2 = b[14];
	b3 = b[15];
	result[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	result[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	result[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	result[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	return result;
};
jotun_math_Matrix3D.transform = function(data) {
	var res = null;
	var idx = 0;
	var len = data.length;
	var mx;
	while(idx < len) {
		mx = data[idx];
		if(mx != null) {
			if(res == null) {
				res = mx;
			} else {
				res = jotun_math_Matrix3D._multiply(res,mx);
			}
		}
		++idx;
	}
	return res;
};
jotun_math_Matrix3D.toCss = function(matrix) {
	return "matrix3d(" + matrix.join(",") + ")";
};
var jotun_math_Point = $hx_exports["J_Point"] = function(x,y) {
	this.x = x;
	this.y = y;
};
jotun_math_Point.__name__ = "jotun.math.Point";
jotun_math_Point.__interfaces__ = [jotun_math_IPoint];
jotun_math_Point.distance = function(x1,y1,x2,y2) {
	x1 -= x2;
	y1 -= y2;
	x1 *= x1;
	y1 *= y1;
	return Math.sqrt(x1 + y1);
};
jotun_math_Point.hilbert = function(n,d) {
	var rx;
	var ry;
	var t = d;
	var x = 0;
	var y = 0;
	var s = 0;
	while(s < n) {
		rx = 1 & t / 2;
		ry = 1 & (t ^ rx);
		if(ry == 0) {
			if(rx == 1) {
				x = s - 1 - x;
				y = s - 1 - y;
			}
			var tmp = x;
			x = y;
			y = tmp;
		}
		x += s * rx;
		y += s * ry;
		t /= 4;
		s *= 2;
	}
	return new jotun_math_Point(x,y);
};
jotun_math_Point.prototype = {
	reset: function() {
		this.x = this.y = 0;
	}
	,match: function(o,round) {
		if(round) {
			if(Math.round(o.x) == Math.round(this.x)) {
				return Math.round(o.y) == Math.round(this.y);
			} else {
				return false;
			}
		} else if(o.x == this.x) {
			return o.y == this.y;
		} else {
			return false;
		}
	}
	,add: function(q) {
		this.x += q.x;
		this.y += q.y;
		return this;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,distanceOf: function(point) {
		return jotun_math_Point.distance(point.x,point.y,this.x,this.y);
	}
	,__class__: jotun_math_Point
};
var jotun_modules_IMod = function() { };
jotun_modules_IMod.__name__ = "jotun.modules.IMod";
jotun_modules_IMod.prototype = {
	__class__: jotun_modules_IMod
};
var jotun_net_BulkLoader = $hx_exports["J_BulkLoader"] = function() {
	this._toload = [];
	this.signals = new jotun_signals_Signals(this);
	this.totalLoaded = 0;
	this.totalFiles = 0;
	this._fileProgress = 0;
};
jotun_net_BulkLoader.__name__ = "jotun.net.BulkLoader";
jotun_net_BulkLoader.prototype = {
	_getReq: function(u) {
		return new jotun_net_HttpRequest(u);
	}
	,progress: function() {
		return (this.totalLoaded + (this._fileProgress < 1 ? this._fileProgress : 0)) / this.totalFiles;
	}
	,add: function(files) {
		if(!((files) instanceof Array)) {
			files = [files];
		}
		if(files != null && files.length > 0) {
			this._toload = this._toload.concat(files);
			this.totalFiles += files.length;
		}
	}
	,start: function() {
		if(!this._isBusy) {
			this._isBusy = true;
			this._loadNext();
		}
	}
	,_changed: function(file,status,data,request) {
		this.signals.call(status,{ file : file, data : data, request : request});
	}
	,_loadNext: function() {
		var _gthis = this;
		if(this._toload.length > 0) {
			var f = this._toload.shift();
			var r = this._getReq(f);
			this._changed(f,"started",null,r);
			r.async = true;
			r.onError = function(e) {
				++_gthis.totalLoaded;
				_gthis._changed(f,"error",e,r);
				_gthis._loadNext();
			};
			r.onData = function(d) {
				++_gthis.totalLoaded;
				jotun_Jotun.resources.register(f,d);
				_gthis._changed(f,"loaded",d,r);
				_gthis._loadNext();
			};
			r.request("GET",null,$bind(this,this._onLoadProgress));
		} else {
			this._isBusy = false;
			this._complete();
		}
	}
	,_onLoadProgress: function(file,loaded,total) {
		this._fileProgress = loaded / total;
		this.signals.call("progress",{ file : file, loaded : loaded, total : total, progress : this._fileProgress});
	}
	,_error: function(e) {
		this.lastError = typeof(e) == "string" ? new jotun_errors_Error(-1,e,this) : new jotun_errors_Error(-1,"Unknow",{ content : e, loader : this});
		this.signals.call("error",this.lastError);
	}
	,_complete: function() {
		this.signals.call("completed");
	}
	,__class__: jotun_net_BulkLoader
};
var jotun_net_HttpRequest = function(url) {
	this.url = url;
	this.headers = new haxe_ds_List();
	this.params = new haxe_ds_List();
	this.async = true;
};
jotun_net_HttpRequest.__name__ = "jotun.net.HttpRequest";
jotun_net_HttpRequest.requestUrl = function(url) {
	var h = new jotun_net_HttpRequest(url);
	h.async = false;
	var r = null;
	h.onData = function(d) {
		r = d;
	};
	h.onError = function(e) {
		throw haxe_Exception.thrown(e);
	};
	h.request("GET");
	return r;
};
jotun_net_HttpRequest.prototype = {
	setHeader: function(header,value) {
		this.headers.push({ header : header, value : value});
		return this;
	}
	,addHeader: function(header,value) {
		this.headers.push({ header : header, value : value});
		return this;
	}
	,addParameter: function(param,value) {
		if(this.data == null) {
			this.data = new FormData();
		}
		this.data.append(param,value);
		return this;
	}
	,setData: function(data) {
		this.data = data;
		return this;
	}
	,setOptions: function(data) {
		var _gthis = this;
		if(data != null) {
			jotun_utils_Dice.All(data,function(p,v) {
				_gthis.req[p] = v;
			});
		}
	}
	,cancel: function() {
		if(this.req == null) {
			return;
		}
		this.req.abort();
	}
	,_getData: function(r) {
		if(r.responseType == "" || r.responseType == "text") {
			return r.responseText;
		} else {
			return r.response;
		}
	}
	,request: function(method,data,progress,options) {
		var _gthis = this;
		var me = this;
		me.responseData = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		this.setOptions(options);
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( _g ) {
				s = null;
			}
			if(s != null) {
				var protocol = $global.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					me.responseHeaders = me.req.getAllResponseHeaders();
					s = _gthis._getData(r) != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				me.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				var _gthis1 = _gthis;
				var onreadystatechange = me.req.getAllResponseHeaders();
				me.responseHeaders = _gthis1._parseHeader(onreadystatechange);
				me.req = null;
				me.onData(me.responseData = _gthis._getData(r));
			} else if(s == null) {
				me.req = null;
				me.onError("Failed to connect or resolve host");
			} else if(s == null) {
				me.req = null;
				me.responseData = _gthis._getData(r);
				me.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					me.req = null;
					me.onError("Unknown host");
					break;
				case 12029:
					me.req = null;
					me.onError("Failed to connect to host");
					break;
				default:
					me.req = null;
					me.responseData = _gthis._getData(r);
					me.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri = null;
		try {
			if(progress != null) {
				r.onprogress = function(e) {
					if(e.lengthComputable) {
						progress(_gthis.url,e.loaded,e.total);
					} else {
						progress(_gthis.url,e.loaded,0);
					}
				};
				r.onloadend = r.onloadstart = function(e) {
					progress(_gthis.url,0,0);
				};
			}
			r.open(method,this.url,this.async);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			me.req = null;
			this.onError(e.toString());
			return;
		}
		var is_json = typeof(data) == "string";
		if(!Lambda.exists(this.headers,function(h) {
			return h.header == "Content-Type";
		})) {
			if(is_json) {
				r.setRequestHeader("Content-Type","application/json");
			}
		}
		var _g_head = this.headers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var h = val;
			r.setRequestHeader(h.header,h.value);
		}
		if(is_json) {
			r.send(data);
		} else {
			r.send(this.data);
		}
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,_parseHeader: function(headers) {
		var line = headers.split("\r\n");
		var res = { };
		jotun_utils_Dice.Values(line,function(o) {
			line = o.split(": ");
			var prop = line.shift().toLowerCase();
			var value = line.join("");
			res[prop] = value;
		});
		return res;
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,__class__: jotun_net_HttpRequest
};
var jotun_net_IDomainData = function() { };
jotun_net_IDomainData.__name__ = "jotun.net.IDomainData";
jotun_net_IDomainData.__interfaces__ = [jotun_objects_IResolve];
jotun_net_IDomainData.prototype = {
	__class__: jotun_net_IDomainData
};
var jotun_net_IProgress = function() { };
jotun_net_IProgress.__name__ = "jotun.net.IProgress";
jotun_net_IProgress.prototype = {
	__class__: jotun_net_IProgress
};
var jotun_net_IRequest = function() { };
jotun_net_IRequest.__name__ = "jotun.net.IRequest";
jotun_net_IRequest.prototype = {
	__class__: jotun_net_IRequest
};
var jotun_net_Request = function(success,data,error,url,headers) {
	this.url = url;
	this.error = error;
	this.data = data;
	this.success = success;
	this.headers = headers;
};
jotun_net_Request.__name__ = "jotun.net.Request";
jotun_net_Request.__interfaces__ = [jotun_net_IRequest];
jotun_net_Request.prototype = {
	object: function() {
		if(this.data != null && this.data.length > 1) {
			return JSON.parse(this.data);
		} else {
			return null;
		}
	}
	,getHeader: function(name) {
		return Reflect.field(this.headers,name.toLowerCase());
	}
	,__class__: jotun_net_Request
};
var jotun_serial_JsonTool = $hx_exports["J_Json"] = function(replacer,space) {
	this.replacer = replacer;
	this.indent = space;
	this.pretty = space != null;
	this.nind = 0;
	this.buf = new StringBuf();
};
jotun_serial_JsonTool.__name__ = "jotun.serial.JsonTool";
jotun_serial_JsonTool.customReplacer = function(a,b) {
	if(typeof(a) == "string") {
		if(a.substr(0,1) == "_") {
			return null;
		}
	}
	if(((b) instanceof jotun_tools_Flag)) {
		return b.value;
	}
	if(b == null) {
		return null;
	} else {
		return b;
	}
};
jotun_serial_JsonTool.stringify = function(o,replacer,space) {
	var printer = new jotun_serial_JsonTool(replacer != null ? replacer : jotun_serial_JsonTool.customReplacer,space);
	printer.write("",o);
	return printer.buf.b;
};
jotun_serial_JsonTool.prototype = {
	ipad: function() {
		if(this.pretty) {
			var v = StringTools.lpad("",this.indent,this.nind * this.indent.length);
			this.buf.b += Std.string(v);
		}
	}
	,newl: function() {
		if(this.pretty) {
			this.buf.b += String.fromCodePoint(10);
		}
	}
	,write: function(k,v) {
		if(this.replacer != null) {
			v = this.replacer(k,v);
		}
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "null";
			break;
		case 1:
			this.buf.b += Std.string(v);
			break;
		case 2:
			var v1 = isFinite(v) ? v : "null";
			this.buf.b += Std.string(v1);
			break;
		case 3:
			this.buf.b += Std.string(v);
			break;
		case 4:
			this.fieldsString(v,Reflect.fields(v));
			break;
		case 5:
			this.buf.b += "\"<fun>\"";
			break;
		case 6:
			var c = _g.c;
			if(c == String) {
				this.quote(v);
			} else if(c == Array) {
				var v1 = v;
				this.buf.b += String.fromCodePoint(91);
				var len = v1.length;
				var last = len - 1;
				var _g1 = 0;
				var _g2 = len;
				while(_g1 < _g2) {
					var i = _g1++;
					if(i > 0) {
						this.buf.b += String.fromCodePoint(44);
					} else {
						this.nind++;
					}
					if(this.pretty) {
						this.buf.b += String.fromCodePoint(10);
					}
					if(this.pretty) {
						var v2 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
						this.buf.b += Std.string(v2);
					}
					this.write(i,v1[i]);
					if(i == last) {
						this.nind--;
						if(this.pretty) {
							this.buf.b += String.fromCodePoint(10);
						}
						if(this.pretty) {
							var v3 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
							this.buf.b += Std.string(v3);
						}
					}
				}
				this.buf.b += String.fromCodePoint(93);
			} else if(c == haxe_ds_StringMap) {
				var v1 = v;
				var o = { };
				var k = haxe_ds_StringMap.keysIterator(v1.h);
				while(k.hasNext()) {
					var k1 = k.next();
					o[k1] = v1.h[k1];
				}
				var v1 = o;
				this.fieldsString(v1,Reflect.fields(v1));
			} else if(c == Date) {
				var v1 = v;
				this.quote(HxOverrides.dateStr(v1));
			} else {
				this.fieldsString(v,Reflect.fields(v));
			}
			break;
		case 7:
			var _g1 = _g.e;
			var i = v._hx_index;
			this.buf.b += Std.string(i);
			break;
		case 8:
			this.fieldsString(v,Reflect.fields(v));
			break;
		}
	}
	,objString: function(v) {
		this.fieldsString(v,Reflect.fields(v));
	}
	,fieldsString: function(v,fields) {
		this.buf.b += String.fromCodePoint(123);
		var len = fields.length;
		var last = len - 1;
		var first = true;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			var f = fields[i];
			var value = Reflect.field(v,f);
			if(value == null) {
				continue;
			}
			if(Reflect.isFunction(value)) {
				continue;
			}
			if(typeof(f) == "string" && HxOverrides.substr(f,0,1) == "_") {
				continue;
			}
			if(first) {
				this.nind++;
				first = false;
			} else {
				this.buf.b += String.fromCodePoint(44);
			}
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(10);
			}
			if(this.pretty) {
				var v1 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
				this.buf.b += Std.string(v1);
			}
			this.quote(f);
			this.buf.b += String.fromCodePoint(58);
			if(this.pretty) {
				this.buf.b += String.fromCodePoint(32);
			}
			this.write(f,value);
			if(i == last) {
				this.nind--;
				if(this.pretty) {
					this.buf.b += String.fromCodePoint(10);
				}
				if(this.pretty) {
					var v2 = StringTools.lpad("",this.indent,this.nind * this.indent.length);
					this.buf.b += Std.string(v2);
				}
			}
		}
		this.buf.b += String.fromCodePoint(125);
	}
	,quote: function(s) {
		this.buf.b += String.fromCodePoint(34);
		var i = 0;
		while(true) {
			var c = s.charCodeAt(i++);
			if(c != c) {
				break;
			}
			switch(c) {
			case 8:
				this.buf.b += "\\b";
				break;
			case 9:
				this.buf.b += "\\t";
				break;
			case 10:
				this.buf.b += "\\n";
				break;
			case 12:
				this.buf.b += "\\f";
				break;
			case 13:
				this.buf.b += "\\r";
				break;
			case 34:
				this.buf.b += "\\\"";
				break;
			case 92:
				this.buf.b += "\\\\";
				break;
			default:
				this.buf.b += String.fromCodePoint(c);
			}
		}
		this.buf.b += String.fromCodePoint(34);
	}
	,__class__: jotun_serial_JsonTool
};
var jotun_serial_Packager = $hx_exports["J_Packager"] = function() { };
jotun_serial_Packager.__name__ = "jotun.serial.Packager";
jotun_serial_Packager.encodeBase64 = function(q) {
	if(typeof(q) != "string") {
		q = jotun_serial_Packager.jsonEncode(q);
	}
	return haxe_crypto_Base64.encode(haxe_io_Bytes.ofString(q));
};
jotun_serial_Packager.decodeBase64 = function(q,json) {
	var r = null;
	try {
		r = haxe_crypto_Base64.decode(q).toString();
	} catch( _g ) {
	}
	if(r != null) {
		if(json && r.length > 1) {
			return jotun_serial_Packager.jsonDecode(r);
		} else {
			return r;
		}
	} else {
		return null;
	}
};
jotun_serial_Packager.jsonEncode = function(o,rep,space) {
	return jotun_serial_JsonTool.stringify(o,rep,space);
};
jotun_serial_Packager.jsonDecode = function(q) {
	return JSON.parse(q);
};
jotun_serial_Packager.md5Encode = function(o,base64) {
	if(typeof(o) == "string") {
		return haxe_crypto_Md5.encode(o);
	} else {
		return haxe_crypto_Md5.encode(base64 ? jotun_serial_Packager.encodeBase64(o) : jotun_serial_Packager.jsonEncode(o));
	}
};
var jotun_signals_IFlow = function() { };
jotun_signals_IFlow.__name__ = "jotun.signals.IFlow";
jotun_signals_IFlow.prototype = {
	__class__: jotun_signals_IFlow
};
var jotun_signals_Flow = function(pipe,data) {
	this.data = data;
	this.pipe = pipe;
};
jotun_signals_Flow.__name__ = "jotun.signals.Flow";
jotun_signals_Flow.__interfaces__ = [jotun_signals_IFlow];
jotun_signals_Flow.prototype = {
	__class__: jotun_signals_Flow
};
var jotun_signals_IPipe = function() { };
jotun_signals_IPipe.__name__ = "jotun.signals.IPipe";
jotun_signals_IPipe.prototype = {
	__class__: jotun_signals_IPipe
};
var jotun_signals_ISignals = function() { };
jotun_signals_ISignals.__name__ = "jotun.signals.ISignals";
jotun_signals_ISignals.prototype = {
	__class__: jotun_signals_ISignals
};
var jotun_signals_Observer = $hx_exports["J_Observer"] = function() { };
jotun_signals_Observer.__name__ = "jotun.signals.Observer";
jotun_signals_Observer.add = function(target,handler) {
	if(!jotun_signals_Observer._init) {
		jotun_signals_Observer._init = true;
		jotun_signals_Observer._radar = [];
		jotun_tools_Ticker.start();
		jotun_tools_Ticker.addLow(jotun_signals_Observer._checkTargets);
	}
	if(target != null && jotun_signals_Observer._radar.indexOf(target) == -1) {
		target.setProp("__onsigh",handler);
		jotun_signals_Observer._radar[jotun_signals_Observer._radar.length] = target;
	}
};
jotun_signals_Observer._checkTargets = function() {
	jotun_utils_Dice.Values(jotun_signals_Observer._radar,jotun_signals_Observer._singleCheck);
};
jotun_signals_Observer._singleCheck = function(d) {
	if(d == null || d.element == null) {
		jotun_signals_Observer.remove(d);
	} else if(UInt.gt(d.getVisibility(),0)) {
		var h = d.getProp("__onsigh");
		if(h == null || h(d)) {
			jotun_signals_Observer.remove(d);
		}
	}
};
jotun_signals_Observer.remove = function(target) {
	if(jotun_signals_Observer._init) {
		if(target != null) {
			var i = jotun_signals_Observer._radar.indexOf(target);
			if(i > -1) {
				target.deleteProp("__onsigh");
				jotun_signals_Observer._radar.splice(i,1);
			}
		}
	}
};
jotun_signals_Observer.removeBy = function(atrr,value) {
	jotun_utils_Dice.Values(jotun_signals_Observer._radar,function(v) {
		if(v.attribute(atrr) == value) {
			jotun_signals_Observer.remove(v);
		}
	});
};
jotun_signals_Observer.clear = function() {
	jotun_signals_Observer._radar = [];
};
var jotun_signals_Pipe = function(name,host) {
	this.calls = 0;
	this.enabled = true;
	this.transfer = true;
	this.host = host;
	this.name = name;
	this.reset();
};
jotun_signals_Pipe.__name__ = "jotun.signals.Pipe";
jotun_signals_Pipe.__interfaces__ = [jotun_signals_IPipe];
jotun_signals_Pipe.prototype = {
	add: function(handler) {
		if(Lambda.indexOf(this._l,handler) == -1) {
			this._l.push(handler);
		}
		return this;
	}
	,remove: function(handler) {
		var i = Lambda.indexOf(this._l,handler);
		if(i != -1) {
			this._l.splice(i,1);
		}
		return this;
	}
	,disconnect: function() {
		if(this._v != null) {
			this.remove(this._v);
			this._v = null;
		}
		return this;
	}
	,call: function(data) {
		var _gthis = this;
		if(this.enabled) {
			++this.calls;
			this.current = new jotun_signals_Flow(this,data);
			this.transfer = true;
			jotun_utils_Dice.Values(this._l,function(v) {
				_gthis._v = v;
				v(_gthis.current);
				return !_gthis.transfer;
			});
			this._v = null;
		}
		this.current = null;
		return this;
	}
	,stop: function() {
		this.transfer = false;
	}
	,reset: function() {
		this._l = [];
	}
	,__class__: jotun_signals_Pipe
};
var jotun_signals_Signals = $hx_exports["J_Signal"] = function(to) {
	this.object = to;
	this.reset();
};
jotun_signals_Signals.__name__ = "jotun.signals.Signals";
jotun_signals_Signals.__interfaces__ = [jotun_signals_ISignals];
jotun_signals_Signals.prototype = {
	_c: function(n) {
		if(!this.has(n)) {
			this._l[n] = new jotun_signals_Pipe(n,this);
		}
		return Reflect.field(this._l,n);
	}
	,has: function(name) {
		return Object.prototype.hasOwnProperty.call(this._l,name);
	}
	,get: function(name) {
		return this._c(name);
	}
	,remove: function(name,handler) {
		return this._c(name).remove(handler);
	}
	,add: function(name,handler) {
		return this._c(name).add(handler);
	}
	,call: function(name,data) {
		if(this.has(name)) {
			this.get(name).call(data);
		}
		return this;
	}
	,reset: function(name) {
		if(name != null) {
			if(this.has(name)) {
				this.get(name).reset();
			}
		} else {
			this._l = [];
		}
	}
	,__class__: jotun_signals_Signals
};
var jotun_tools_Flag = $hx_exports["Flag"] = function(value) {
	if(typeof(value) != "number" && (typeof(value) == "number" && ((value | 0) === value))) {
		value = Std.parseInt(value);
	}
	this.value = value >>> 0;
};
jotun_tools_Flag.__name__ = "jotun.tools.Flag";
jotun_tools_Flag.from = function(hash) {
	if(typeof(hash) == "string") {
		hash = Std.parseInt(hash);
	}
	return new jotun_tools_Flag(hash);
};
jotun_tools_Flag.FPut = function(hash,bit) {
	return hash | bit;
};
jotun_tools_Flag.FDrop = function(hash,bit) {
	return hash & ~bit;
};
jotun_tools_Flag.FToggle = function(hash,bit) {
	if(jotun_tools_Flag.FTest(hash,bit)) {
		return jotun_tools_Flag.FDrop(hash,bit);
	} else {
		return jotun_tools_Flag.FPut(hash,bit);
	}
};
jotun_tools_Flag.FTest = function(hash,value) {
	return (hash & value) == value;
};
jotun_tools_Flag.FValue = function(hash,skip) {
	if(skip == null) {
		skip = 0;
	}
	var v = hash.toString(2);
	var i = v.length;
	while(UInt.gt(32,i)) {
		v = "0" + v;
		++i;
	}
	i = UInt.toFloat(skip) % UInt.toFloat(8) | 0;
	var r = "";
	while(UInt.gt(8,i)) r += HxOverrides.substr(v,i++ * 4,4) + (UInt.gt(8,i) ? " " : "");
	return r;
};
jotun_tools_Flag.FLength = function(hash) {
	var count = 0;
	while(UInt.gt(hash,0)) {
		hash = hash & hash - 1;
		++count;
	}
	return count;
};
jotun_tools_Flag.prototype = {
	toggle: function(bit) {
		this.value = jotun_tools_Flag.FToggle(this.value,bit);
		return this;
	}
	,put: function(bit) {
		this.value = jotun_tools_Flag.FPut(this.value,1 << bit);
		return this;
	}
	,drop: function(bit) {
		this.value = jotun_tools_Flag.FDrop(this.value,1 << bit);
		return this;
	}
	,test: function(bit) {
		return jotun_tools_Flag.FTest(this.value,1 << bit);
	}
	,putAll: function(bits) {
		var _gthis = this;
		jotun_utils_Dice.Values(bits,function(v) {
			_gthis.put(1 << v);
		});
		return this;
	}
	,dropAll: function(bits) {
		var _gthis = this;
		jotun_utils_Dice.Values(bits,function(v) {
			_gthis.drop(1 << v);
		});
		return this;
	}
	,testAll: function(bits) {
		var _gthis = this;
		return jotun_utils_Dice.Values(bits,function(v) {
			return !_gthis.test(v);
		}).completed;
	}
	,testAny: function(bits,min) {
		if(min == null) {
			min = 1;
		}
		var _gthis = this;
		return !jotun_utils_Dice.Values(bits,function(v) {
			if(_gthis.test(v)) {
				min -= 1;
			}
			return min == 0;
		}).completed;
	}
	,length: function() {
		return jotun_tools_Flag.FLength(this.value);
	}
	,toString: function(skip) {
		if(skip == null) {
			skip = 0;
		}
		return jotun_tools_Flag.FValue(this.value,skip);
	}
	,__class__: jotun_tools_Flag
};
var jotun_tools_Key = $hx_exports["J_Key"] = function() { };
jotun_tools_Key.__name__ = "jotun.tools.Key";
jotun_tools_Key.COUNTER = function(id) {
	if(id == null) {
		id = "global";
	}
	var v = 0;
	if(!Object.prototype.hasOwnProperty.call(jotun_tools_Key._cts,id)) {
		jotun_tools_Key._cts[id] = 0;
	} else {
		v = Reflect.field(jotun_tools_Key._cts,id);
		jotun_tools_Key._cts[id] = v + 1;
	}
	return v;
};
jotun_tools_Key.GEN = function(size,table,mixCase) {
	if(mixCase == null) {
		mixCase = true;
	}
	if(size == null) {
		size = 9;
	}
	var s = "";
	if(table == null) {
		table = jotun_tools_Key.TABLE;
	}
	var l = table.length;
	var c = null;
	while(UInt.gt(size,s.length)) {
		c = HxOverrides.substr(table,Std.random(l),1);
		if(mixCase) {
			if(Math.random() < .5) {
				c = c.toUpperCase();
			} else {
				c = c.toLowerCase();
			}
		}
		s += c;
	}
	return s;
};
jotun_tools_Key.getLastUUID = function() {
	return jotun_tools_Key._last_uuid;
};
jotun_tools_Key.UUID = function() {
	jotun_tools_Key._last_uuid = jotun_serial_Packager.md5Encode(Std.string(new Date()) + "-" + jotun_tools_Key.GEN());
	return jotun_tools_Key._last_uuid;
};
jotun_tools_Key.TAG = function(value,prefix,len) {
	if(len == null) {
		len = 11;
	}
	if(prefix == null) {
		prefix = "0";
	}
	if(typeof(value) != "string") {
		value = Std.string(value);
	} else if(value == null) {
		value = jotun_tools_Key.COUNTER("tag");
	}
	var k = value.length;
	while(k < len) {
		value = prefix + Std.string(value);
		++k;
	}
	return value;
};
var jotun_tools_Ticker = $hx_exports["J_Ticker"] = function() { };
jotun_tools_Ticker.__name__ = "jotun.tools.Ticker";
jotun_tools_Ticker._calcElapsed = function() {
	var ctime = Date.now();
	jotun_tools_Ticker._etime += (ctime - jotun_tools_Ticker._ltime) * 0.001;
	jotun_tools_Ticker._ltime = ctime;
};
jotun_tools_Ticker._tickAll = function() {
	jotun_tools_Ticker._etime = 0;
	jotun_utils_Dice.All(jotun_tools_Ticker._pool_high,function(p,v) {
		if(v != null) {
			jotun_tools_Ticker._calcElapsed();
			v(jotun_tools_Ticker._etime);
		}
	});
	while(jotun_tools_Ticker._etime > 1) jotun_tools_Ticker._etime -= 1.0;
};
jotun_tools_Ticker.start = function() {
	if(jotun_tools_Ticker._uid == null) {
		jotun_tools_Ticker.stop();
		jotun_tools_Ticker._ltime = Date.now();
		jotun_tools_Ticker._etime = 0;
		jotun_tools_Ticker._uid = setInterval(jotun_tools_Ticker._tickAll,1);
	}
};
jotun_tools_Ticker.stop = function() {
	clearInterval(jotun_tools_Ticker._uid);
	jotun_tools_Ticker._uid = null;
};
jotun_tools_Ticker.add = function(handler) {
	if(handler == null) {
		return;
	}
	var iof = jotun_tools_Ticker._pool_high.indexOf(handler);
	if(iof == -1) {
		jotun_tools_Ticker._pool_high[jotun_tools_Ticker._pool_high.length] = handler;
	}
};
jotun_tools_Ticker.addLow = function(handler) {
	if(handler == null) {
		return;
	}
	var iof = jotun_tools_Ticker._pool_low.indexOf(handler);
	if(iof == -1) {
		jotun_tools_Ticker._pool_low[jotun_tools_Ticker._pool_low.length] = handler;
	}
};
jotun_tools_Ticker.remove = function(handler) {
	if(handler == null) {
		return;
	}
	var iof = jotun_tools_Ticker._pool_high.indexOf(handler);
	if(iof != -1) {
		jotun_tools_Ticker._pool_high.splice(iof,1);
	} else {
		iof = jotun_tools_Ticker._pool_low.indexOf(handler);
		if(iof != -1) {
			jotun_tools_Ticker._pool_low.splice(iof,1);
		}
	}
};
jotun_tools_Ticker.delay = function(handler,time,args) {
};
var jotun_utils_Filler = $hx_exports["J_Filler"] = function() { };
jotun_utils_Filler.__name__ = "jotun.utils.Filler";
jotun_utils_Filler._apply = function(path,content,data) {
	if(data == null) {
		content = content.split("{{" + path + "}}").join("");
	} else if(typeof(data) == "number" || typeof(data) == "string" || typeof(data) == "boolean" || typeof(data) == "number" && ((data | 0) === data)) {
		var is_valid = data != null && data != 0 && data != false;
		content = content.split("{{" + path + "}}").join(data);
		content = content.split("{{show-if:" + path + "}}").join(is_valid ? "" : "hidden");
		content = content.split("{{hide-if:" + path + "}}").join(is_valid ? "hidden" : "");
		path = path.toLowerCase();
		content = content.split("{{" + path + "}}").join(data);
		content = content.split("{{show-if:" + path + "}}").join(is_valid ? "" : "hidden");
		content = content.split("{{hide-if:" + path + "}}").join(is_valid ? "hidden" : "");
	} else {
		if(path != null && path != "") {
			path += ".";
		} else {
			path = "";
		}
		jotun_utils_Dice.All(data,function(p,v) {
			p = "" + p;
			if(HxOverrides.substr(p,0,1) != "_") {
				content = jotun_utils_Filler._apply(path + p,content,v);
			}
		});
	}
	return content;
};
jotun_utils_Filler.to = function(value,data,sufix) {
	var r = "";
	if(((data) instanceof Array)) {
		jotun_utils_Dice.All(data,function(p,v) {
			v["%0"] = p;
			r += jotun_utils_Filler._apply(sufix,value,v);
			Reflect.deleteField(v,"%0");
		});
	} else {
		r = jotun_utils_Filler._apply(sufix,value,data);
	}
	return r;
};
jotun_utils_Filler.splitter = function(value,split,glue,each) {
	var r = value.split(split);
	if(r.length > 1) {
		jotun_utils_Dice.All(r,function(p,v) {
			if(p < glue.length) {
				var e = glue[p];
				if(each != null) {
					e = each(e);
				}
				r[p] = v + Std.string(e);
			}
		});
	}
	return r.join("");
};
jotun_utils_Filler.splitterTo = function(value,data,split,glue,each) {
	value = jotun_utils_Filler.to(value,data);
	return jotun_utils_Filler.splitter(value,split,glue,each);
};
jotun_utils_Filler.extractNumber = function(value) {
	var s = "";
	var i = 0;
	while(UInt.gt(value.length,i)) {
		var j = Std.parseInt(HxOverrides.substr(value,i,1));
		++i;
		if(j != null) {
			s += (j == null ? "null" : Std.string(UInt.toFloat(j))) + "";
		}
	}
	i = Std.parseInt(s);
	if(i == null) {
		return 0;
	} else {
		return i;
	}
};
var jotun_utils_IDiceRoll = function() { };
jotun_utils_IDiceRoll.__name__ = "jotun.utils.IDiceRoll";
jotun_utils_IDiceRoll.prototype = {
	__class__: jotun_utils_IDiceRoll
};
var jotun_utils_ITable = function() { };
jotun_utils_ITable.__name__ = "jotun.utils.ITable";
jotun_utils_ITable.prototype = {
	__class__: jotun_utils_ITable
};
var jotun_utils_SearchTag = $hx_exports["J_SearchTag"] = function(tags) {
	tags = [];
	this.add(tags);
};
jotun_utils_SearchTag.__name__ = "jotun.utils.SearchTag";
jotun_utils_SearchTag.from = function(value) {
	if(!((value) instanceof jotun_utils_SearchTag)) {
		value = new jotun_utils_SearchTag(value);
	}
	return value;
};
jotun_utils_SearchTag.convert = function(data) {
	data = Std.string(data).toLowerCase().split(" ").join("");
	data = Std.string(data.substr(0,1)) + data.replace(jotun_utils_SearchTag._E.r,"");
	return data;
};
jotun_utils_SearchTag.prototype = {
	_tag: function() {
		return "|" + this.tags.join("|") + "|";
	}
	,add: function(values) {
		var _gthis = this;
		if(!((values) instanceof Array)) {
			values = [values];
		}
		jotun_utils_Dice.Values(values,function(v) {
			v = jotun_utils_SearchTag.convert(v);
			var iof = Lambda.indexOf(_gthis.tags,v);
			if(iof == -1) {
				_gthis.tags[_gthis.tags.length] = v;
			}
		});
	}
	,remove: function(values) {
		var _gthis = this;
		values = jotun_utils_SearchTag.from(values).tags;
		jotun_utils_Dice.Values(values,function(v) {
			var iof = Lambda.indexOf(_gthis.tags,v);
			if(iof != -1) {
				_gthis.tags.splice(iof,1);
			}
		});
	}
	,compare: function(values,equality) {
		if(equality == null) {
			equality = false;
		}
		var tag = this._tag();
		values = jotun_utils_SearchTag.from(values).tags;
		var total = values.length;
		var count = jotun_utils_Dice.Values(values,function(v) {
			if(equality) {
				return tag.indexOf("|" + v + "|") == -1;
			} else {
				return tag.indexOf(v) != -1;
			}
		}).keys;
		return UInt.toFloat(count) / UInt.toFloat(total) * 100;
	}
	,equal: function(values) {
		var tag = this._tag();
		values = jotun_utils_SearchTag.from(values).tags;
		return jotun_utils_Dice.Values(values,function(v) {
			return tag.indexOf("|" + v + "|") == -1;
		}).completed;
	}
	,contains: function(values) {
		var tag = this._tag();
		values = jotun_utils_SearchTag.from(values).tags;
		return !jotun_utils_Dice.Values(values,function(v) {
			return tag.indexOf(v) != -1;
		}).completed;
	}
	,__class__: jotun_utils_SearchTag
};
var jotun_utils_Table = $hx_exports["J_Table"] = function() {
};
jotun_utils_Table.__name__ = "jotun.utils.Table";
jotun_utils_Table.__interfaces__ = [jotun_utils_ITable];
jotun_utils_Table.recycle = function(q,t) {
	var r = null;
	if(jotun_utils_Table._trash.length > 0) {
		r = jotun_utils_Table._trash.pop();
	} else {
		r = new jotun_utils_Table();
	}
	return r.scan(q,t);
};
jotun_utils_Table.empty = function() {
	return new jotun_utils_Table().reset();
};
jotun_utils_Table.prototype = {
	reset: function() {
		this.content = [];
		this.elements = [];
		return this;
	}
	,scan: function(q,t) {
		this.reset();
		if(q == null) {
			q = "*";
		}
		if(t == null) {
			t = window.document.body;
		}
		var result = q != "*" ? t.querySelectorAll(q) : t.childNodes;
		var element = null;
		var obj = null;
		var len = result.length;
		if(UInt.gt(len,0)) {
			var ind = 0;
			while(UInt.gt(len,ind)) {
				element = result.item(ind);
				if(element != null) {
					obj = jotun_tools_Utils.displayFrom(element);
					this.content[ind] = obj;
					this.elements[ind] = element;
				}
				++ind;
			}
		}
		return this;
	}
	,contains: function(q) {
		var t = jotun_utils_Table.empty();
		var i = 0;
		this.each(function(v) {
			if(v.element.innerHTML.indexOf(q) != -1) {
				t.content[i] = v;
				t.elements[i] = v.element;
				i += 1;
			}
		});
		return t;
	}
	,flush: function(handler,complete) {
		jotun_utils_Dice.Values(this.content,handler,complete);
		return this;
	}
	,first: function() {
		return this.content[0];
	}
	,last: function() {
		return this.content[this.content.length - 1];
	}
	,obj: function(i) {
		return this.content[i];
	}
	,css: function(styles) {
		this.each(function(v) {
			v.css(styles);
		});
		return this;
	}
	,react: function(data) {
		this.each(function(v) {
			v.react(data);
		});
		return this;
	}
	,style: function(p,v) {
		this.each(function(v) {
			v.style(p,v);
		});
		return this;
	}
	,attribute: function(name,value) {
		this.each(function(v) {
			v.attribute(name,value);
		});
		return this;
	}
	,attributes: function(values) {
		this.each(function(v) {
			v.attributes(values);
		});
		return this;
	}
	,show: function() {
		return this.each(function(v) {
			v.show();
		});
	}
	,hide: function() {
		return this.each(function(v) {
			v.hide();
		});
	}
	,remove: function() {
		return this.each(function(v) {
			v.remove();
		});
	}
	,clear: function(fast) {
		return this.each(function(v) {
			v.empty(fast);
		});
	}
	,addTo: function(target) {
		return this.each(function(v) {
			v.addTo(target);
		});
	}
	,addToBody: function() {
		return this.each(function(v) {
			v.addToBody();
		});
	}
	,length: function() {
		return this.content.length;
	}
	,each: function(handler,onnull) {
		if(this.content.length > 0) {
			jotun_utils_Dice.Values(this.content,handler);
		} else if(onnull != null) {
			onnull();
		}
		return this;
	}
	,call: function(method,args) {
		jotun_utils_Dice.Call(this.content,method,args);
		return this;
	}
	,on: function(name,handler,mode) {
		return this.each(function(v) {
			v.events.on(name,handler,mode);
		});
	}
	,merge: function(tables) {
		var t = jotun_utils_Table.empty();
		if(tables == null) {
			tables = [];
		}
		tables[tables.length] = this;
		jotun_utils_Dice.Values(tables,function(v) {
			t.content = t.content.concat(v.content);
			t.elements = t.elements.concat(v.elements);
		});
		return t;
	}
	,dispose: function() {
		this.each(function(o) {
			o.dispose();
		});
		this.content = null;
		this.elements = null;
		jotun_utils_Table._trash[jotun_utils_Table._trash.length] = this;
	}
	,onWheel: function(handler,mode) {
		return this.on("wheel",handler,mode);
	}
	,onCopy: function(handler,mode) {
		return this.on("copy",handler,mode);
	}
	,onCut: function(handler,mode) {
		return this.on("cut",handler,mode);
	}
	,onPaste: function(handler,mode) {
		return this.on("paste",handler,mode);
	}
	,onAbort: function(handler,mode) {
		return this.on("abort",handler,mode);
	}
	,onBlur: function(handler,mode) {
		return this.on("blur",handler,mode);
	}
	,onFocusIn: function(handler,mode) {
		return this.on("focusin",handler,mode);
	}
	,onFocusOut: function(handler,mode) {
		return this.on("focusout",handler,mode);
	}
	,onCanPlay: function(handler,mode) {
		return this.on("canplay",handler,mode);
	}
	,onCanPlayThrough: function(handler,mode) {
		return this.on("canplaythrough",handler,mode);
	}
	,onChange: function(handler,mode) {
		return this.on("change",handler,mode);
	}
	,onClick: function(handler,mode) {
		return this.on("click",handler,mode);
	}
	,onContextMenu: function(handler,mode) {
		return this.on("contextmenu",handler,mode);
	}
	,onDblClick: function(handler,mode) {
		return this.on("dblclick",handler,mode);
	}
	,onDrag: function(handler,mode) {
		return this.on("drag",handler,mode);
	}
	,onDragEnd: function(handler,mode) {
		return this.on("dragend",handler,mode);
	}
	,onDragEnter: function(handler,mode) {
		return this.on("dragenter",handler,mode);
	}
	,onDragLeave: function(handler,mode) {
		return this.on("dragleave",handler,mode);
	}
	,onDragOver: function(handler,mode) {
		return this.on("dragover",handler,mode);
	}
	,onDragStart: function(handler,mode) {
		return this.on("dragstart",handler,mode);
	}
	,onDrop: function(handler,mode) {
		return this.on("drop",handler,mode);
	}
	,onDurationChange: function(handler,mode) {
		return this.on("durationchange",handler,mode);
	}
	,onEmptied: function(handler,mode) {
		return this.on("emptied",handler,mode);
	}
	,onEnded: function(handler,mode) {
		return this.on("ended",handler,mode);
	}
	,onInput: function(handler,mode) {
		return this.on("input",handler,mode);
	}
	,onInvalid: function(handler,mode) {
		return this.on("invalid",handler,mode);
	}
	,onKeyDown: function(handler,mode) {
		return this.on("keydown",handler,mode);
	}
	,onKeyPress: function(handler,mode) {
		return this.on("keypress",handler,mode);
	}
	,onKeyUp: function(handler,mode) {
		return this.on("keyup",handler,mode);
	}
	,onLoad: function(handler,mode) {
		return this.on("load",handler,mode);
	}
	,onLoadedData: function(handler,mode) {
		return this.on("loadeddata",handler,mode);
	}
	,onLoadedMetadata: function(handler,mode) {
		return this.on("loadedmetadata",handler,mode);
	}
	,onLoadStart: function(handler,mode) {
		return this.on("loadstart",handler,mode);
	}
	,onMouseDown: function(handler,mode) {
		return this.on("mousedown",handler,mode);
	}
	,onMouseEnter: function(handler,mode) {
		return this.on("mouseenter",handler,mode);
	}
	,onMouseLeave: function(handler,mode) {
		return this.on("mouseleave",handler,mode);
	}
	,onMouseMove: function(handler,mode) {
		return this.on("mousemove",handler,mode);
	}
	,onMouseOut: function(handler,mode) {
		return this.on("mouseout",handler,mode);
	}
	,onMouseOver: function(handler,mode) {
		return this.on("mouseover",handler,mode);
	}
	,onMouseUp: function(handler,mode) {
		return this.on("mouseup",handler,mode);
	}
	,onPause: function(handler,mode) {
		return this.on("pause",handler,mode);
	}
	,onPlay: function(handler,mode) {
		return this.on("play",handler,mode);
	}
	,onPlaying: function(handler,mode) {
		return this.on("playing",handler,mode);
	}
	,onProgress: function(handler,mode) {
		return this.on("progress",handler,mode);
	}
	,onRateChange: function(handler,mode) {
		return this.on("ratechange",handler,mode);
	}
	,onReset: function(handler,mode) {
		return this.on("reset",handler,mode);
	}
	,onScroll: function(handler,mode) {
		return this.on("scroll",handler,mode);
	}
	,onSeeked: function(handler,mode) {
		return this.on("seeked",handler,mode);
	}
	,onSeeking: function(handler,mode) {
		return this.on("seeking",handler,mode);
	}
	,onSelect: function(handler,mode) {
		return this.on("select",handler,mode);
	}
	,onShow: function(handler,mode) {
		return this.on("show",handler,mode);
	}
	,onStalled: function(handler,mode) {
		return this.on("stalled",handler,mode);
	}
	,onSubmit: function(handler,mode) {
		return this.on("submit",handler,mode);
	}
	,onSuspend: function(handler,mode) {
		return this.on("suspend",handler,mode);
	}
	,onTimeUpdate: function(handler,mode) {
		return this.on("timeupdate",handler,mode);
	}
	,onVolumeChange: function(handler,mode) {
		return this.on("volumechange",handler,mode);
	}
	,onWaiting: function(handler,mode) {
		return this.on("waiting",handler,mode);
	}
	,onPointerCancel: function(handler,mode) {
		return this.on("pointercancel",handler,mode);
	}
	,onPointerDown: function(handler,mode) {
		return this.on("pointerdown",handler,mode);
	}
	,onPointerUp: function(handler,mode) {
		return this.on("pointerup",handler,mode);
	}
	,onPointerMove: function(handler,mode) {
		return this.on("pointermove",handler,mode);
	}
	,onPointerOut: function(handler,mode) {
		return this.on("pointerout",handler,mode);
	}
	,onPointerOver: function(handler,mode) {
		return this.on("pointerover",handler,mode);
	}
	,onPointerEnter: function(handler,mode) {
		return this.on("pointerenter",handler,mode);
	}
	,onPointerLeave: function(handler,mode) {
		return this.on("pointerleave",handler,mode);
	}
	,onGotPointerCapture: function(handler,mode) {
		return this.on("gotpointercapture",handler,mode);
	}
	,onLostPointerCapture: function(handler,mode) {
		return this.on("lostpointercapture",handler,mode);
	}
	,onPointerLockChange: function(handler,mode) {
		return this.on("pointerlockchange",handler,mode);
	}
	,onPointerLockError: function(handler,mode) {
		return this.on("pointerlockerror",handler,mode);
	}
	,onError: function(handler,mode) {
		return this.on("error",handler,mode);
	}
	,onTouchStart: function(handler,mode) {
		return this.on("touchstart",handler,mode);
	}
	,onTouchEnd: function(handler,mode) {
		return this.on("touchend",handler,mode);
	}
	,onTouchMove: function(handler,mode) {
		return this.on("touchmove",handler,mode);
	}
	,onTouchCancel: function(handler,mode) {
		return this.on("touchcancel",handler,mode);
	}
	,onVisibility: function(handler,mode) {
		return this.on("visibility",handler,mode);
	}
	,focusOverall: function(handler,mode) {
		return this.each(function(o) {
			o.events.focusOverall(handler,mode);
		});
	}
	,__class__: jotun_utils_Table
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
js_Browser.__name__ = "js.Browser";
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
var js_Cookie = function() { };
js_Cookie.__name__ = "js.Cookie";
js_Cookie.set = function(name,value,expireDelay,path,domain) {
	var s = name + "=" + encodeURIComponent(value);
	if(expireDelay != null) {
		var d = new Date(new Date().getTime() + expireDelay * 1000);
		s += ";expires=" + d.toGMTString();
	}
	if(path != null) {
		s += ";path=" + path;
	}
	if(domain != null) {
		s += ";domain=" + domain;
	}
	window.document.cookie = s;
};
js_Cookie.all = function() {
	var h = new haxe_ds_StringMap();
	var a = window.document.cookie.split(";");
	var _g = 0;
	while(_g < a.length) {
		var e = a[_g];
		++_g;
		e = StringTools.ltrim(e);
		var t = e.split("=");
		if(t.length < 2) {
			continue;
		}
		var value = decodeURIComponent(t[1].split("+").join(" "));
		h.h[t[0]] = value;
	}
	return h;
};
js_Cookie.get = function(name) {
	return js_Cookie.all().h[name];
};
js_Cookie.exists = function(name) {
	var _this = js_Cookie.all();
	return Object.prototype.hasOwnProperty.call(_this.h,name);
};
js_Cookie.remove = function(name,path,domain) {
	js_Cookie.set(name,"",-10,path,domain);
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
function $arrayPush(x) { this.push(x); }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
jotun_dom_Display._CNT = 0;
jotun_dom_Display._DATA = [];
jotun_dom_Input.icons = { };
jotun_dom_Select.layout = "<option value=\"{{value}}\">{{label}}</option>";
jotun_dom_UL.layout = "<li class=\"{{class}}\">{{label}}</li>";
jotun_tools_Utils._typeOf = { A : jotun_dom_A, AREA : jotun_dom_Area, AUDIO : jotun_dom_Audio, B : jotun_dom_B, BASE : jotun_dom_Base, BODY : jotun_dom_Body, BR : jotun_dom_BR, BUTTON : jotun_dom_Button, CANVAS : jotun_dom_Canvas, CAPTION : jotun_dom_Caption, COL : jotun_dom_Col, DATALIST : jotun_dom_DataList, DIV : jotun_dom_Div, DISPLAY : jotun_dom_Display, DOCUMENT : jotun_dom_Document, EMBED : jotun_dom_Embed, FIELDSET : jotun_dom_FieldSet, FORM : jotun_dom_Form, H1 : jotun_dom_H1, H2 : jotun_dom_H2, H3 : jotun_dom_H3, H4 : jotun_dom_H4, H5 : jotun_dom_H5, H6 : jotun_dom_H6, HEAD : jotun_dom_Head, HR : jotun_dom_HR, HTML : jotun_dom_Html, I : jotun_dom_I, IFRAME : jotun_dom_IFrame, IMG : jotun_dom_Img, INPUT : jotun_dom_Input, LABEL : jotun_dom_Label, LEGEND : jotun_dom_Legend, LI : jotun_dom_LI, LINK : jotun_dom_Link, MAP : jotun_dom_Map, MEDIA : jotun_dom_Media, META : jotun_dom_Meta, METER : jotun_dom_Meter, MOD : jotun_dom_Mod, OBJECT : jotun_dom_Object, OL : jotun_dom_OL, OPTGROUP : jotun_dom_OptGroup, OPTION : jotun_dom_Option, OUTPUT : jotun_dom_Output, P : jotun_dom_P, PARAM : jotun_dom_Param, PICTURE : jotun_dom_Picture, PRE : jotun_dom_Pre, PROGRESS : jotun_dom_Progress, QUOTE : jotun_dom_Quote, SCRIPT : jotun_dom_Script, SELECT : jotun_dom_Select, SOURCE : jotun_dom_Source, SPAN : jotun_dom_Span, STYLE : jotun_dom_Style, SVG : jotun_dom_Svg, TEXT : jotun_dom_Text, TEXTAREA : jotun_dom_TextArea, TITLE : jotun_dom_Title, TRACK : jotun_dom_Track, UL : jotun_dom_UL, VIDEO : jotun_dom_Video};
jotun_modules_ModLib.CACHE = { };
jotun_modules_ModLib.DATA = { };
jotun_Jotun._loaded = false;
jotun_Jotun.resources = new jotun_modules_ModLib();
jotun_Jotun.domain = new jotun_net_Domain();
jotun_Jotun.logger = new jotun_data_Logger();
jotun_Jotun._initialized = jotun_Jotun.main();
jotun_Jotun.loader = new jotun_net_Loader();
jotun_Jotun.agent = new jotun_tools_Agent();
jotun_Jotun.broadcast = jotun_net_Broadcast.ME();
jotun_css_CSSGroup.SOF = "/*SOF*/@media";
jotun_css_CSSGroup.EOF = "}/*EOF*/";
jotun_css_CSSGroup.MEDIA_PR = "print";
jotun_css_CSSGroup.MEDIA_XS = "(min-width:1px)";
jotun_css_CSSGroup.MEDIA_XS_MAX = "(max-width:767px)";
jotun_css_CSSGroup.MEDIA_SM = "(min-width:768px)";
jotun_css_CSSGroup.MEDIA_SM_MAX = "(max-width:991px)";
jotun_css_CSSGroup.MEDIA_MD = "(min-width:992px)";
jotun_css_CSSGroup.MEDIA_MD_MAX = "(max-width:1199px)";
jotun_css_CSSGroup.MEDIA_LG = "(min-width:1200px)";
jotun_css_CSSGroup.MEDIA_LG_MAX = "(max-width:1479px)";
jotun_css_CSSGroup.MEDIA_XL = "(min-width:1480px)";
jotun_css_XCode.css = new jotun_css_CSSGroup();
jotun_css_XCode._inits = { reset : false, grid : false};
jotun_gaming_actions_Action.cache = { };
jotun_gaming_actions_Action.commands = new jotun_objects_QueryGroup();
jotun_gaming_actions_Requirement.cache = { };
jotun_gaming_actions_Requirement.commands = new jotun_objects_QueryGroup();
jotun_tools_Key.TABLE = "abcdefghijklmnopqrstuvwxyz0123456789";
jotun_tools_Key._cts = { "global" : 0};
jotun_tools_Key.VALIDATE_DATE = new EReg("\\d{1,2}/\\d{1,2}/\\d{4}","");
jotun_tools_Key.VALIDATE_URL = new EReg("https?://.+","");
jotun_tools_Key.VALIDATE_IPV4 = new EReg("^\\d{1,3}d{1,3}.\\d{1,3}.\\d{1,3}","");
jotun_tools_Key.VALIDATE_CURRENCY = new EReg("\\d+(.\\d{2})?","");
jotun_tools_Key.VALIDATE_EMAIL = new EReg("^[a-z0-9!'#$%&*+/=?^_`{|}~-]+(?:\\.[a-z0-9!'#$%&*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-zA-Z]{2,}$","giu");
jotun_tools_Key.VALIDATE_NUMBER = new EReg("^\\d{1,}$","");
jotun_tools_Key.VALIDATE_PHONE = new EReg("^(\\d{10,11})|(\\(\\d{2}\\) \\d{4,5}-\\d{4})$","");
jotun_tools_Key.VALIDATE_LETTER = new EReg("^[a-zA-Z]{6,}$","");
jotun_tools_Key.VALIDATE_USER_NAME = new EReg("^[a-zA-Z ]{8,100}$","");
jotun_tools_Key.VALIDATE_CHAR_NAME = new EReg("^[a-zA-Z ]{8,32}$","");
jotun_tools_Key.VALIDATE_NON_URL = new EReg("^[A-Za-z0-9._-]{6,24}$","");
jotun_tools_Key.VALIDATE_HASH = new EReg("^[A-Za-z0-9._-]{35}$","");
jotun_tools_Key.VALIDATE_CARD = new EReg("\\d{4}-\\d{4}-\\d{4}-\\d{4}$","");
jotun_tools_Ticker._pool_high = [];
jotun_tools_Ticker._pool_low = [];
jotun_tools_Ticker._ltime = 0;
jotun_tools_Ticker._etime = 0;
jotun_utils_SearchTag._M = [["á","a"],["ã","a"],["â","a"],["à","a"],["ê","e"],["é","e"],["è","e"],["î","i"],["í","i"],["ì","i"],["õ","o"],["ô","o"],["ó","o"],["ò","o"],["ú","u"],["ù","u"],["û","u"],["ç","c"]];
jotun_utils_SearchTag._E = new EReg("^[a-z0-9]","g");
jotun_utils_Table._trash = [];
jotun_Jotun.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
